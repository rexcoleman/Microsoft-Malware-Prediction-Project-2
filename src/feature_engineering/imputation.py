# src/feature_engineering/imputation.py

import yaml
from src.config_loader import load_paths
from src.feature_engineering.utils import load_feature_metadata, save_feature_metadata, classify_data_type

def parse_missing_percentage(missing_value_str):
    # Remove any non-numeric characters and convert to float
    return float(''.join(filter(lambda x: x.isdigit() or x == '.', missing_value_str)))

def define_imputation_strategies(feature_metadata):
    imputation_strategies = {
        'numerical_features': {},
        'categorical_features': {},
        'binary_features': {}
    }

    for feature, metadata in feature_metadata['features'].items():
        data_type = classify_data_type(metadata)
        missing_percentage = parse_missing_percentage(metadata['missing_values'])

        if data_type == 'numerical':
            if missing_percentage < 5.0:
                imputation_strategies['numerical_features'][feature] = 'mean'
            elif 5.0 <= missing_percentage < 20.0:
                imputation_strategies['numerical_features'][feature] = 'median'
            else:
                imputation_strategies['numerical_features'][feature] = 'mode'

        elif data_type == 'categorical':
            if missing_percentage < 5.0:
                imputation_strategies['categorical_features'][feature] = 'mode'
            else:
                imputation_strategies['categorical_features'][feature] = 'Unknown'

        elif data_type == 'binary':
            imputation_strategies['binary_features'][feature] = 'mode'

    return imputation_strategies

def save_imputation_strategies(imputation_strategies):
    paths = load_paths()
    with open(paths['config']['imputation_strategies'], 'w') as file:
        file.write("# config/imputation_strategies.yaml\n\n")
        yaml.dump(imputation_strategies, file)
