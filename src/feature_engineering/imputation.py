# src/feature_engineering/imputation.py

import pandas as pd

def suggest_imputation_strategy(summary_stats, corr_matrix, target_col='HasDetections'):
    strategies = {}
    for column in summary_stats.index:
        if summary_stats.loc[column, 'missing_values'] > 0:
            if summary_stats.loc[column, 'dtype'] in ['float64', 'int64']:
                if abs(corr_matrix[target_col].get(column, 0)) > 0.1:
                    strategies[column] = 'median'  # For numerical columns with significant correlation, use median
                else:
                    strategies[column] = 'mean'  # For other numerical columns, use mean
            elif summary_stats.loc[column, 'dtype'] == 'object':
                strategies[column] = 'mode'  # For categorical columns, use mode
            elif summary_stats.loc[column, 'dtype'] == 'category':
                strategies[column] = 'mode'  # For categorical columns, use mode
    return {'imputation_strategies': strategies}





# def suggest_imputation_strategy(summary_stats, corr_matrix, target_col='HasDetections'):
#     """
#     Suggest imputation strategies based on summary statistics and correlation matrix.

#     Parameters:
#     - summary_stats (DataFrame): Summary statistics.
#     - corr_matrix (DataFrame): Correlation matrix.
#     - target_col (str): The target column for correlation analysis.

#     Returns:
#     - dict: Suggested imputation strategies.
#     """
#     strategies = {}
#     for column in summary_stats.index:
#         if summary_stats.loc[column, 'missing_values'] > 0:
#             if summary_stats.loc[column, 'dtype'] in ['float64', 'int64']:
#                 if abs(corr_matrix[target_col].get(column, 0)) > 0.1:
#                     strategies[column] = 'median'  # For numerical columns with significant correlation, use median
#                 else:
#                     strategies[column] = 'mean'    # For numerical columns with low correlation, use mean
#             else:
#                 strategies[column] = 'mode'        # For categorical columns, use mode
#     return strategies

def handle_missing_values(df, imputation_strategies):
    """
    Handle missing values in the dataframe based on suggested imputation strategies.

    Parameters:
    - df (DataFrame): The dataframe with missing values.
    - imputation_strategies (dict): Dictionary of imputation strategies.

    Returns:
    - DataFrame: Dataframe with imputed values.
    """
    for column, strategy in imputation_strategies.items():
        if strategy == 'median':
            df[column].fillna(df[column].median(), inplace=True)
        elif strategy == 'mean':
            df[column].fillna(df[column].mean(), inplace=True)
        elif strategy == 'mode':
            df[column].fillna(df[column].mode()[0], inplace=True)
    return df
