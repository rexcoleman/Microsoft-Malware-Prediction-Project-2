# src/feature_engineering/imputation.py

import yaml
from src.config_loader import load_paths

def load_feature_metadata():
    paths = load_paths()
    with open(paths['config']['feature_metadata'], 'r') as file:
        feature_metadata = yaml.safe_load(file)
    return feature_metadata

def parse_missing_percentage(missing_value_str):
    # Remove any non-numeric characters and convert to float
    return float(''.join(filter(str.isdigit, missing_value_str))) / 100.0

def classify_data_type(metadata):
    data_type = metadata.get('data_type', '').lower()
    inferred_data_type = metadata.get('inferred_data_type', '').lower()
    distribution = metadata.get('distribution', '').lower()

    if distribution == 'binary' or data_type in ['int8', 'bool'] or inferred_data_type in ['int8', 'bool']:
        return 'binary'
    elif data_type in ['float32', 'float64', 'int64'] or inferred_data_type in ['float32', 'float64', 'int64']:
        return 'numerical'
    else:
        return 'categorical'

def update_feature_metadata_with_inferred_types(feature_metadata, inferred_types):
    for feature, inferred_type in inferred_types.items():
        if feature in feature_metadata['features']:
            feature_metadata['features'][feature]['inferred_data_type'] = inferred_type
            feature_metadata['features'][feature]['classified_data_type'] = classify_data_type(feature_metadata['features'][feature])
        else:
            feature_metadata['features'][feature] = {
                'description': '',
                'data_type': inferred_type,  # Set inferred type as the main data type if it doesn't exist
                'importance': '',
                'data_source': '',
                'missing_values': '',
                'transformation': '',
                'feature_engineering': '',
                'correlation_with_target': '',
                'distribution': '',
                'data_quality': '',
                'security_implications': '',
                'inferred_data_type': inferred_type,
                'classified_data_type': classify_data_type({'data_type': inferred_type})
            }
    return feature_metadata

def save_feature_metadata(feature_metadata):
    paths = load_paths()
    with open(paths['config']['feature_metadata'], 'w') as file:
        file.write("# config/features_metadata.yaml\n\n")
        yaml.dump(feature_metadata, file)

def define_imputation_strategies(feature_metadata):
    imputation_strategies = {
        'numerical_features': {},
        'categorical_features': {},
        'binary_features': {}
    }

    # Debugging: Print the data types of each feature
    for feature, metadata in feature_metadata['features'].items():
        data_type = classify_data_type(metadata)
        print(f"Feature: {feature}, Classified Data Type: {data_type}, Missing Values: {metadata['missing_values']}")

    for feature, metadata in feature_metadata['features'].items():
        data_type = classify_data_type(metadata)
        missing_percentage = parse_missing_percentage(metadata['missing_values'])

        if data_type == 'numerical':
            if missing_percentage < 0.05:
                imputation_strategies['numerical_features'][feature] = 'mean'
            elif 0.05 <= missing_percentage < 0.20:
                imputation_strategies['numerical_features'][feature] = 'median'
            else:
                imputation_strategies['numerical_features'][feature] = 'mode'

        elif data_type == 'categorical':
            if missing_percentage < 0.05:
                imputation_strategies['categorical_features'][feature] = 'mode'
            else:
                imputation_strategies['categorical_features'][feature] = 'Unknown'

        elif data_type == 'binary':
            imputation_strategies['binary_features'][feature] = 'mode'

    # Debugging: Print the final imputation strategies
    print("Imputation Strategies:", imputation_strategies)

    return imputation_strategies

def save_imputation_strategies(imputation_strategies):
    paths = load_paths()
    with open(paths['config']['imputation_strategies'], 'w') as file:
        file.write("# config/imputation_strategies.yaml\n\n")
        yaml.dump(imputation_strategies, file)
