# src/feature_engineering/imputation.py

import os
import yaml
import json
import logging
import pandas as pd
from tqdm.notebook import tqdm
from typing import List, Tuple, Dict
from src.utils.file_operations import load_json_file, save_dataframe
from src.utils.json_pipeline import save_json_with_pipeline
from src.utils.metadata_operations import extract_general_attributes, extract_missing_values, extract_correlations



def create_imputation_strategy_table(metadata: dict, high_missing_values_df: pd.DataFrame, moderate_missing_values_df: pd.DataFrame) -> pd.DataFrame:
    """
    Create the imputation strategy table based on feature data.

    Parameters:
    - metadata (dict): Metadata dictionary.
    - high_missing_values_df (pd.DataFrame): DataFrame of high missing values features.
    - moderate_missing_values_df (pd.DataFrame): DataFrame of moderate missing values features.

    Returns:
    - pd.DataFrame: DataFrame containing imputation strategy data.
    """
    if isinstance(metadata, str):
        logging.error("Expected metadata to be a dictionary, but got a string.")
        raise TypeError("Metadata should be a dictionary, not a string.")

    imputation_data = []
    for feature, details in metadata['features'].items():
        missing_percentage = details.get('missing_values', {}).get('percentage', None)
        classification = details.get('general_attributes', {}).get('classified_data_type', 'Unknown')
        imputation_strategy = 'Keep'
        comments = ''
        
        if feature in high_missing_values_df['Feature'].values:
            imputation_strategy = 'Drop'
            comments = 'High missing values.'
        elif feature in moderate_missing_values_df['Feature'].values:
            if classification == 'categorical':
                imputation_strategy = 'Mode'
            elif classification == 'numerical':
                imputation_strategy = 'Median'
            elif classification == 'binary':
                imputation_strategy = 'Mode'
            comments = 'Moderate missing values.'
        elif missing_percentage is not None and missing_percentage < 10:
            if classification == 'categorical':
                imputation_strategy = 'Mode'
            elif classification == 'numerical':
                imputation_strategy = 'Median'
            elif classification == 'binary':
                imputation_strategy = 'Mode'
        
        imputation_info = {
            'Feature': feature,
            'Classification': classification,
            'Imputation Strategy': imputation_strategy,
            'Comments': comments
        }
        imputation_data.append(imputation_info)
    
    return pd.DataFrame(imputation_data)


def save_dataframes(
    high_missing_values_df: pd.DataFrame,
    moderate_missing_values_df: pd.DataFrame,
    low_missing_values_df: pd.DataFrame,
    high_corr_with_target_df: pd.DataFrame,
    moderate_corr_with_target_df: pd.DataFrame,
    low_corr_with_target_df: pd.DataFrame,
    high_missing_corr_with_target_df: pd.DataFrame,
    moderate_missing_corr_with_target_df: pd.DataFrame,
    low_missing_corr_with_target_df: pd.DataFrame,
    paths: Dict[str, Dict[str, str]]
) -> None:
    """
    Save various DataFrames to CSV files.

    Parameters:
    - high_missing_values_df (pd.DataFrame): DataFrame of high missing values features.
    - moderate_missing_values_df (pd.DataFrame): DataFrame of moderate missing values features.
    - low_missing_values_df (pd.DataFrame): DataFrame of low missing values features.
    - high_corr_with_target_df (pd.DataFrame): DataFrame of high correlation with target features.
    - moderate_corr_with_target_df (pd.DataFrame): DataFrame of moderate correlation with target features.
    - low_corr_with_target_df (pd.DataFrame): DataFrame of low correlation with target features.
    - high_missing_corr_with_target_df (pd.DataFrame): DataFrame of high missing values correlation with target.
    - moderate_missing_corr_with_target_df (pd.DataFrame): DataFrame of moderate missing values correlation with target.
    - low_missing_corr_with_target_df (pd.DataFrame): DataFrame of low missing values correlation with target.
    - paths (Dict[str, Dict[str, str]]): Dictionary containing file paths.
    """
    output_dir = paths['reports']['analysis_results']
    high_output_path = os.path.join(output_dir, 'high_missing_values_handling_strategy.csv')
    moderate_output_path = os.path.join(output_dir, 'moderate_missing_values_handling_strategy.csv')
    low_output_path = os.path.join(output_dir, 'low_missing_values_handling_strategy.csv')
    high_corr_with_target_output_path = os.path.join(output_dir, 'high_corr_with_target.csv')
    moderate_corr_with_target_output_path = os.path.join(output_dir, 'moderate_corr_with_target.csv')
    low_corr_with_target_output_path = os.path.join(output_dir, 'low_corr_with_target.csv')
    high_missing_corr_with_target_output_path = os.path.join(output_dir, 'high_missing_corr_with_target.csv')
    moderate_missing_corr_with_target_output_path = os.path.join(output_dir, 'moderate_missing_corr_with_target.csv')
    low_missing_corr_with_target_output_path = os.path.join(output_dir, 'low_missing_corr_with_target.csv')

    save_dataframe(high_missing_values_df, high_output_path)
    save_dataframe(moderate_missing_values_df, moderate_output_path)
    save_dataframe(low_missing_values_df, low_output_path)
    save_dataframe(high_corr_with_target_df, high_corr_with_target_output_path)
    save_dataframe(moderate_corr_with_target_df, moderate_corr_with_target_output_path)
    save_dataframe(low_corr_with_target_df, low_corr_with_target_output_path)
    save_dataframe(high_missing_corr_with_target_df, high_missing_corr_with_target_output_path)
    save_dataframe(moderate_missing_corr_with_target_df, moderate_missing_corr_with_target_output_path)
    save_dataframe(low_missing_corr_with_target_df, low_missing_corr_with_target_output_path)

    logging.info(f"High missing values handling strategy table saved to {high_output_path}")
    logging.info(f"Moderate missing values handling strategy table saved to {moderate_output_path}")
    logging.info(f"Low missing values handling strategy table saved to {low_output_path}")
    logging.info(f"High Correlation with Target table saved to {high_corr_with_target_output_path}")
    logging.info(f"Moderate Correlation with Target table saved to {moderate_corr_with_target_output_path}")
    logging.info(f"Low Correlation with Target table saved to {low_corr_with_target_output_path}")
    logging.info(f"High Missing Values Correlation with Target table saved to {high_missing_corr_with_target_output_path}")
    logging.info(f"Moderate Missing Values Correlation with Target table saved to {moderate_missing_corr_with_target_output_path}")
    logging.info(f"Low Missing Values Correlation with Target table saved to {low_missing_corr_with_target_output_path}")


def extract_feature_data_via_pipeline(metadata_path: str, features: list) -> pd.DataFrame:
    """
    Extract relevant feature data for analysis using the metadata extraction pipeline.

    Parameters:
    metadata_path (str): Path to the feature metadata JSON file.
    features (list): List of feature names to extract.

    Returns:
    pd.DataFrame: DataFrame containing extracted feature data.
    """
    try:
        # Load the metadata
        metadata = load_json_file(metadata_path)

        # Store DataFrames for each feature
        data = []

        for feature in features:
            # Extract relevant metadata using modular functions
            general_attributes = extract_general_attributes(metadata, feature)
            missing_values = extract_missing_values(metadata, feature)
            correlations = extract_correlations(metadata, feature)

            # Combine all extracted data into a single DataFrame
            combined_data = {'Feature': feature, **general_attributes, **missing_values, **correlations}
            feature_df = pd.DataFrame([combined_data])

            data.append(feature_df)

        # Concatenate all DataFrames into a single DataFrame
        if data:
            df_combined = pd.concat(data, ignore_index=True)
        else:
            df_combined = pd.DataFrame()  # Return an empty DataFrame if no data

        df_combined['Correlation with Target'] = pd.to_numeric(df_combined['Correlation with Target'], errors='coerce')
        df_combined['Missing Values Correlation with Target'] = pd.to_numeric(df_combined['Missing Values Correlation with Target'], errors='coerce')

        return df_combined.sort_values(by='Missing Percentage (%)', ascending=False)
    except Exception as e:
        logging.error(f"Error extracting feature data via pipeline: {e}", exc_info=True)
        raise


def transform_imputation_strategy_to_schema(imputation_df: pd.DataFrame) -> Dict[str, Dict]:
    """
    Transform the imputation strategy DataFrame into a nested dictionary structure consistent with the schema.
    
    Parameters:
    - imputation_df (pd.DataFrame): DataFrame containing imputation strategies.
    
    Returns:
    - dict: Nested dictionary structured according to the schema.
    """
    imputation_strategy_dict: Dict[str, Dict] = {}

    for _, row in imputation_df.iterrows():
        feature_name = row['Feature']
        imputation_type = row['Imputation Strategy']
        comments = row['Comments']

        imputation_strategy_dict.setdefault('features', {}).setdefault(feature_name, {}).setdefault(
            'feature_engineering', {}).setdefault('imputation', {})['type'] = imputation_type
        imputation_strategy_dict['features'][feature_name]['feature_engineering']['imputation']['comments'] = comments

    return imputation_strategy_dict


def save_imputation_strategy(imputation_df: pd.DataFrame, save_path: str) -> None:
    """
    Save the transformed imputation strategy to a JSON file.
    
    Parameters:
    - imputation_df (pd.DataFrame): DataFrame containing imputation strategies.
    - save_path (str): The path where the JSON file should be saved.
    """
    imputation_strategy_dict = transform_imputation_strategy_to_schema(imputation_df)
    save_json_with_pipeline(imputation_strategy_dict, save_path)
    logging.info(f"Imputation strategy saved to {save_path}")


