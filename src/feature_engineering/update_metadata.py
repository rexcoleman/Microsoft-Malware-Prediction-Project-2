# src/feature_engineering/update_metadata.py

import yaml
from src.config_loader import load_paths

def load_feature_metadata():
    paths = load_paths()
    with open(paths['config']['feature_metadata'], 'r') as file:
        feature_metadata = yaml.safe_load(file)
    return feature_metadata

def save_feature_metadata(feature_metadata):
    paths = load_paths()
    with open(paths['config']['feature_metadata'], 'w') as file:
        file.write("# config/features_metadata.yaml\n\n")
        yaml.dump(feature_metadata, file)

def update_metadata_with_analysis(feature_metadata, analysis_results):
    for feature, analysis in analysis_results.items():
        if feature in feature_metadata['features']:
            feature_metadata['features'][feature]['data_type'] = analysis['data_type']
            feature_metadata['features'][feature]['inferred_data_type'] = analysis['inferred_data_type']
            feature_metadata['features'][feature]['missing_values'] = f"{analysis['missing_values']}%"
            feature_metadata['features'][feature]['correlation_with_target'] = analysis['correlation_with_target']
            feature_metadata['features'][feature]['distribution'] = analysis['distribution']
            feature_metadata['features'][feature]['data_quality'] = analysis['data_quality']
        else:
            feature_metadata['features'][feature] = {
                'description': '',
                'data_type': analysis['data_type'],
                'importance': '',
                'data_source': '',
                'missing_values': f"{analysis['missing_values']}%",
                'transformation': '',
                'feature_engineering': '',
                'correlation_with_target': analysis['correlation_with_target'],
                'distribution': analysis['distribution'],
                'data_quality': analysis['data_quality'],
                'security_implications': '',
                'inferred_data_type': analysis['inferred_data_type'],
                'classified_data_type': analysis['data_type']
            }
    return feature_metadata
