# src/feature_engineering/encoding.py

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from category_encoders import TargetEncoder

def encode_categorical_features(train_df, test_df):
    categorical_features = train_df.select_dtypes(include=['object']).columns
    high_cardinality_features = [col for col in categorical_features if train_df[col].nunique() > 10]
    low_cardinality_features = [col for col in categorical_features if train_df[col].nunique() <= 10]

    label_encoders = {}
    onehot_encoders = {}
    target_encoders = {}

    binary_features = [col for col in categorical_features if train_df[col].nunique() == 2]
    for column in binary_features:
        label_encoders[column] = LabelEncoder()
        train_df[column] = label_encoders[column].fit_transform(train_df[column])
        test_df[column] = label_encoders[column].transform(test_df[column])

    for column in low_cardinality_features:
        if column not in binary_features:
            onehot_encoders[column] = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
            train_encoded = onehot_encoders[column].fit_transform(train_df[[column]])
            test_encoded = onehot_encoders[column].transform(test_df[[column]])
            
            train_encoded_df = pd.DataFrame(train_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
            test_encoded_df = pd.DataFrame(test_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
            
            train_df = pd.concat([train_df.drop(column, axis=1), train_encoded_df], axis=1)
            test_df = pd.concat([test_df.drop(column, axis=1), test_encoded_df], axis=1)

    for column in high_cardinality_features:
        target_encoders[column] = TargetEncoder()
        train_df[column] = target_encoders[column].fit_transform(train_df[column], train_df['HasDetections'])
        test_df[column] = target_encoders[column].transform(test_df[column])

    return train_df, test_df, {'label_encoders': label_encoders, 'onehot_encoders': onehot_encoders, 'target_encoders': target_encoders}

def plot_encoding_results(feature, encoder, train_cleaned, train_encoded, rotation=0):
    if feature not in train_encoded.columns and not any(col.startswith(feature + "_") for col in train_encoded.columns):
        print(f"Feature '{feature}' not found in the encoded dataset.")
        return

    if isinstance(encoder, LabelEncoder):
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        sns.histplot(train_cleaned[feature], ax=axes[0, 0], kde=False)
        axes[0, 0].set_title(f'Histogram of {feature} Before Encoding')
        sns.boxplot(x=train_cleaned[feature], ax=axes[0, 1])
        axes[0, 1].set_title(f'Box Plot of {feature} Before Encoding')
        sns.histplot(train_encoded[feature], ax=axes[1, 0], kde=False)
        axes[1, 0].set_title(f'Histogram of {feature} After Encoding')
        sns.boxplot(x=train_encoded[feature], ax=axes[1, 1])
        axes[1, 1].set_title(f'Box Plot of {feature} After Encoding')
        for ax in axes.flatten():
            for label in ax.get_xticklabels():
                label.set_rotation(rotation)
        plt.tight_layout()
        plt.subplots_adjust(hspace=0.6)
        plt.show()

    elif isinstance(encoder, OneHotEncoder):
        onehot_features = [f"{feature}_{category}" for category in encoder.categories_[0]]
        fig, axes = plt.subplots(len(onehot_features), 2, figsize=(15, 5 * len(onehot_features)))
        for i, onehot_feature in enumerate(onehot_features):
            if onehot_feature in train_encoded.columns:
                sns.histplot(train_encoded[onehot_feature], ax=axes[i, 1], kde=False)
                axes[i, 1].set_title(f'Histogram of {onehot_feature} After Encoding')
                sns.histplot(train_cleaned[feature], ax=axes[i, 0], kde=False)
                axes[i, 0].set_title(f'Histogram of {feature} Before Encoding')
                for ax in axes[i]:
                    for label in ax.get_xticklabels():
                        label.set_rotation(rotation)
        plt.tight_layout()
        plt.subplots_adjust(hspace=0.6)
        plt.show()

    elif isinstance(encoder, TargetEncoder):
        value_counts = train_cleaned[feature].value_counts()
        top_categories = value_counts.nlargest(10).index
        simplified = train_cleaned[feature].apply(lambda x: x if x in top_categories else 'Other')
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        sns.histplot(simplified, ax=axes[0, 0], kde=False)
        axes[0, 0].set_title(f'Histogram of {feature} Before Encoding (Simplified)')
        axes[0, 0].tick_params(axis='x', rotation=rotation)
        sns.boxplot(x=simplified, ax=axes[0, 1])
        axes[0, 1].set_title(f'Box Plot of {feature} Before Encoding (Simplified)')
        axes[0, 1].tick_params(axis='x', rotation=rotation)
        sns.histplot(train_encoded[feature], ax=axes[1, 0], kde=False)
        axes[1, 0].set_title(f'Histogram of {feature} After Encoding')
        sns.boxplot(x=train_encoded[feature], ax=axes[1, 1])
        axes[1, 1].set_title(f'Box Plot of {feature} After Encoding')
        for ax in [axes[1, 0], axes[1, 1]]:
            for label in ax.get_xticklabels():
                label.set_rotation(rotation)
        plt.tight_layout()
        plt.subplots_adjust(hspace=0.6)
        plt.show()

def generate_encoding_insights(feature, encoder, train_cleaned, train_encoded):
    summary_before = train_cleaned[feature].describe()
    summary_after = train_encoded[feature].describe() if feature in train_encoded.columns else pd.Series(index=summary_before.index, data=[None]*len(summary_before))
    
    summary_table = pd.DataFrame({'Before Encoding': summary_before, 'After Encoding': summary_after})
    
    if isinstance(encoder, TargetEncoder):
        insights = (f"The feature '{feature}' was target encoded to handle high cardinality. "
                    f"Target encoding replaces each category with the mean of the target variable for that category. "
                    f"Target encoding is chosen for features with high cardinality (more than 10 unique categories) because it helps maintain "
                    f"the predictive power of the feature without creating a large number of sparse columns. "
                    f"After encoding, the feature values shift to reflect the average target value associated with each category. "
                    f"This shift can help the model understand the relationship between the feature and the target variable better.")
    else:
        insights = (f"The feature '{feature}' was label encoded for binary features or one-hot encoded for nominal features. "
                    f"Label encoding assigns an integer value to each category, which is useful for binary features. "
                    f"One-hot encoding creates binary columns for each category, ensuring no ordinal relationship is imposed between categories. "
                    f"One-hot encoding is chosen for features with low cardinality (10 or fewer unique categories) because it preserves "
                    f"the categorical nature of the data without introducing ordinality.")
    
    recommended_action = (f"Given that we are in the data understanding phase, it is crucial to validate the encoded features and ensure they make sense. "
                          f"Check if the encoded values align with the original categories' meaning. "
                          f"For target encoded features, verify that the transformation captures the relationship between the feature and the target variable effectively. "
                          f"Consider further analysis or feature engineering if the encoding results seem counterintuitive or introduce potential biases.")
    
    return insights, recommended_action, summary_table


# src/feature_engineering/encoding.py

import pandas as pd
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from category_encoders import TargetEncoder

class CustomLabelEncoder(LabelEncoder):
    def fit(self, y):
        super().fit(y)
        return self

    def transform(self, y):
        y = pd.Series(y)
        unseen_label = -1
        y_transformed = y.map(lambda x: x if x in self.classes_ else unseen_label)
        return y_transformed.values

def encode_categorical_features_test(train_df, test_df, feature_groups=None):
    if feature_groups:
        categorical_features = set(feature_groups.get('categorical_features', []))
        binary_features = set(feature_groups.get('binary_features', []))
    else:
        categorical_features = set(train_df.select_dtypes(include=['object']).columns)
        binary_features = set([col for col in categorical_features if train_df[col].nunique() == 2])

    # Exclude MachineIdentifier from the encoding process
    features_to_encode = categorical_features | binary_features
    features_to_encode -= {'MachineIdentifier'}

    high_cardinality_features = [col for col in features_to_encode if train_df[col].nunique() > 10]
    low_cardinality_features = [col for col in features_to_encode if train_df[col].nunique() <= 10 and col not in binary_features]

    label_encoders = {}
    onehot_encoders = {}
    target_encoders = {}

    # Encode binary features
    for column in binary_features:
        if column in train_df.columns:
            label_encoders[column] = CustomLabelEncoder()
            train_df[column] = label_encoders[column].fit_transform(train_df[column])
            test_df[column] = label_encoders[column].transform(test_df[column])

    # Encode low cardinality features
    for column in low_cardinality_features:
        if column in train_df.columns:
            onehot_encoders[column] = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
            train_encoded = onehot_encoders[column].fit_transform(train_df[[column]])
            test_encoded = onehot_encoders[column].transform(test_df[[column]])
            
            train_encoded_df = pd.DataFrame(train_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
            test_encoded_df = pd.DataFrame(test_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
            
            train_df = pd.concat([train_df.drop(column, axis=1), train_encoded_df], axis=1)
            test_df = pd.concat([test_df.drop(column, axis=1), test_encoded_df], axis=1)

    # Encode high cardinality features
    for column in high_cardinality_features:
        if column in train_df.columns:
            target_encoders[column] = TargetEncoder()
            train_df[column] = target_encoders[column].fit_transform(train_df[column], train_df['HasDetections'])
            if column in test_df.columns:
                test_df[column] = target_encoders[column].transform(test_df[column])

    return train_df, test_df, {'label_encoders': label_encoders, 'onehot_encoders': onehot_encoders, 'target_encoders': target_encoders}












# # src/feature_engineering/encoding.py

# import pandas as pd
# from sklearn.preprocessing import LabelEncoder, OneHotEncoder
# from category_encoders import TargetEncoder

# def encode_categorical_features_test(train_df, test_df, feature_groups=None):
#     if feature_groups:
#         categorical_features = feature_groups.get('categorical_features', [])
#         binary_features = feature_groups.get('binary_features', [])
#     else:
#         categorical_features = train_df.select_dtypes(include=['object']).columns
#         binary_features = [col for col in categorical_features if train_df[col].nunique() == 2]
        
#     high_cardinality_features = [col for col in categorical_features if train_df[col].nunique() > 10]
#     low_cardinality_features = [col for col in categorical_features if train_df[col].nunique() <= 10]

#     label_encoders = {}
#     onehot_encoders = {}
#     target_encoders = {}

#     for column in binary_features:
#         label_encoders[column] = LabelEncoder()
#         train_df[column] = label_encoders[column].fit_transform(train_df[column])
#         test_df[column] = label_encoders[column].transform(test_df[column])

#     for column in low_cardinality_features:
#         if column not in binary_features:
#             onehot_encoders[column] = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
#             train_encoded = onehot_encoders[column].fit_transform(train_df[[column]])
#             test_encoded = onehot_encoders[column].transform(test_df[[column]])
            
#             train_encoded_df = pd.DataFrame(train_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
#             test_encoded_df = pd.DataFrame(test_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
            
#             train_df = pd.concat([train_df.drop(column, axis=1), train_encoded_df], axis=1)
#             test_df = pd.concat([test_df.drop(column, axis=1), test_encoded_df], axis=1)

#     for column in high_cardinality_features:
#         target_encoders[column] = TargetEncoder()
#         train_df[column] = target_encoders[column].fit_transform(train_df[column], train_df['HasDetections'])
#         test_df[column] = target_encoders[column].transform(test_df[column])

#     return train_df, test_df, {'label_encoders': label_encoders, 'onehot_encoders': onehot_encoders, 'target_encoders': target_encoders}






# # src/feature_engineering/encoding.py

# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# from sklearn.preprocessing import LabelEncoder, OneHotEncoder
# from category_encoders import TargetEncoder

# def encode_categorical_features(train_df, test_df):
#     categorical_features = train_df.select_dtypes(include=['object']).columns
#     high_cardinality_features = [col for col in categorical_features if train_df[col].nunique() > 10]
#     low_cardinality_features = [col for col in categorical_features if train_df[col].nunique() <= 10]

#     label_encoders = {}
#     onehot_encoders = {}
#     target_encoders = {}

#     binary_features = [col for col in categorical_features if train_df[col].nunique() == 2]
#     for column in binary_features:
#         label_encoders[column] = LabelEncoder()
#         train_df[column] = label_encoders[column].fit_transform(train_df[column])
#         test_df[column] = label_encoders[column].transform(test_df[column])

#     for column in low_cardinality_features:
#         if column not in binary_features:
#             onehot_encoders[column] = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
#             train_encoded = onehot_encoders[column].fit_transform(train_df[[column]])
#             test_encoded = onehot_encoders[column].transform(test_df[[column]])
            
#             train_encoded_df = pd.DataFrame(train_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
#             test_encoded_df = pd.DataFrame(test_encoded, columns=[f"{column}_{category}" for category in onehot_encoders[column].categories_[0]])
            
#             train_df = pd.concat([train_df.drop(column, axis=1), train_encoded_df], axis=1)
#             test_df = pd.concat([test_df.drop(column, axis=1), test_encoded_df], axis=1)

#     for column in high_cardinality_features:
#         target_encoders[column] = TargetEncoder()
#         train_df[column] = target_encoders[column].fit_transform(train_df[column], train_df['HasDetections'])
#         test_df[column] = target_encoders[column].transform(test_df[column])

#     return train_df, test_df, {'label_encoders': label_encoders, 'onehot_encoders': onehot_encoders, 'target_encoders': target_encoders}

# def plot_encoding_results(feature, encoder, train_cleaned, train_encoded, rotation=0):
#     if feature not in train_encoded.columns and not any(col.startswith(feature + "_") for col in train_encoded.columns):
#         print(f"Feature '{feature}' not found in the encoded dataset.")
#         return

#     if isinstance(encoder, LabelEncoder):
#         fig, axes = plt.subplots(2, 2, figsize=(15, 10))
#         sns.histplot(train_cleaned[feature], ax=axes[0, 0], kde=False)
#         axes[0, 0].set_title(f'Histogram of {feature} Before Encoding')
#         sns.boxplot(x=train_cleaned[feature], ax=axes[0, 1])
#         axes[0, 1].set_title(f'Box Plot of {feature} Before Encoding')
#         sns.histplot(train_encoded[feature], ax=axes[1, 0], kde=False)
#         axes[1, 0].set_title(f'Histogram of {feature} After Encoding')
#         sns.boxplot(x=train_encoded[feature], ax=axes[1, 1])
#         axes[1, 1].set_title(f'Box Plot of {feature} After Encoding')
#         for ax in axes.flatten():
#             for label in ax.get_xticklabels():
#                 label.set_rotation(rotation)
#         plt.tight_layout()
#         plt.subplots_adjust(hspace=0.6)
#         plt.show()

#     elif isinstance(encoder, OneHotEncoder):
#         onehot_features = [f"{feature}_{category}" for category in encoder.categories_[0]]
#         fig, axes = plt.subplots(len(onehot_features), 2, figsize=(15, 5 * len(onehot_features)))
#         for i, onehot_feature in enumerate(onehot_features):
#             if onehot_feature in train_encoded.columns:
#                 sns.histplot(train_encoded[onehot_feature], ax=axes[i, 1], kde=False)
#                 axes[i, 1].set_title(f'Histogram of {onehot_feature} After Encoding')
#                 sns.histplot(train_cleaned[feature], ax=axes[i, 0], kde=False)
#                 axes[i, 0].set_title(f'Histogram of {feature} Before Encoding')
#                 for ax in axes[i]:
#                     for label in ax.get_xticklabels():
#                         label.set_rotation(rotation)
#         plt.tight_layout()
#         plt.subplots_adjust(hspace=0.6)
#         plt.show()

#     elif isinstance(encoder, TargetEncoder):
#         value_counts = train_cleaned[feature].value_counts()
#         top_categories = value_counts.nlargest(10).index
#         simplified = train_cleaned[feature].apply(lambda x: x if x in top_categories else 'Other')
#         fig, axes = plt.subplots(2, 2, figsize=(15, 10))
#         sns.histplot(simplified, ax=axes[0, 0], kde=False)
#         axes[0, 0].set_title(f'Histogram of {feature} Before Encoding (Simplified)')
#         axes[0, 0].tick_params(axis='x', rotation=rotation)
#         sns.boxplot(x=simplified, ax=axes[0, 1])
#         axes[0, 1].set_title(f'Box Plot of {feature} Before Encoding (Simplified)')
#         axes[0, 1].tick_params(axis='x', rotation=rotation)
#         sns.histplot(train_encoded[feature], ax=axes[1, 0], kde=False)
#         axes[1, 0].set_title(f'Histogram of {feature} After Encoding')
#         sns.boxplot(x=train_encoded[feature], ax=axes[1, 1])
#         axes[1, 1].set_title(f'Box Plot of {feature} After Encoding')
#         for ax in [axes[1, 0], axes[1, 1]]:
#             for label in ax.get_xticklabels():
#                 label.set_rotation(rotation)
#         plt.tight_layout()
#         plt.subplots_adjust(hspace=0.6)
#         plt.show()

# def generate_encoding_insights(feature, encoder, train_cleaned, train_encoded):
#     summary_before = train_cleaned[feature].describe()
#     summary_after = train_encoded[feature].describe() if feature in train_encoded.columns else pd.Series(index=summary_before.index, data=[None]*len(summary_before))
    
#     summary_table = pd.DataFrame({'Before Encoding': summary_before, 'After Encoding': summary_after})
    
#     if isinstance(encoder, TargetEncoder):
#         insights = (f"The feature '{feature}' was target encoded to handle high cardinality. "
#                     f"Target encoding replaces each category with the mean of the target variable for that category. "
#                     f"Target encoding is chosen for features with high cardinality (more than 10 unique categories) because it helps maintain "
#                     f"the predictive power of the feature without creating a large number of sparse columns. "
#                     f"After encoding, the feature values shift to reflect the average target value associated with each category. "
#                     f"This shift can help the model understand the relationship between the feature and the target variable better.")
#     else:
#         insights = (f"The feature '{feature}' was label encoded for binary features or one-hot encoded for nominal features. "
#                     f"Label encoding assigns an integer value to each category, which is useful for binary features. "
#                     f"One-hot encoding creates binary columns for each category, ensuring no ordinal relationship is imposed between categories. "
#                     f"One-hot encoding is chosen for features with low cardinality (10 or fewer unique categories) because it preserves "
#                     f"the categorical nature of the data without introducing ordinality.")
    
#     recommended_action = (f"Given that we are in the data understanding phase, it is crucial to validate the encoded features and ensure they make sense. "
#                           f"Check if the encoded values align with the original categories' meaning. "
#                           f"For target encoded features, verify that the transformation captures the relationship between the feature and the target variable effectively. "
#                           f"Consider further analysis or feature engineering if the encoding results seem counterintuitive or introduce potential biases.")
    
#     return insights, recommended_action, summary_table


