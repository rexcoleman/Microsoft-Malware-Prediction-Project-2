# src/feature_engineering/outliers.py

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def detect_outliers(df, columns):
    outliers = {}
    for column in columns:
        Q1 = df[column].quantile(0.25)
        Q3 = df[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        outliers[column] = df[(df[column] < lower_bound) | (df[column] > upper_bound)]
    return outliers

def handle_outliers(df, columns):
    for column in columns:
        Q1 = df[column].quantile(0.25)
        Q3 = df[column].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df[column] = np.where(df[column] < lower_bound, lower_bound, df[column])
        df[column] = np.where(df[column] > upper_bound, upper_bound, df[column])
    return df

def plot_outliers(train_cleaned_original, train_cleaned_no_outliers, numerical_columns, outliers):
    for column in numerical_columns:
        fig, axes = plt.subplots(1, 2, figsize=(15, 5))

        sns.boxplot(x=train_cleaned_original[column], ax=axes[0])
        axes[0].set_title(f'Box Plot of {column} Before Handling Outliers')

        sns.boxplot(x=train_cleaned_no_outliers[column], ax=axes[1])
        axes[1].set_title(f'Box Plot of {column} After Handling Outliers')

        plt.show()

        # Calculate summary statistics before and after handling outliers
        summary_before = train_cleaned_original[column].describe()
        summary_after = train_cleaned_no_outliers[column].describe()

        summary_table = pd.DataFrame({'Before Handling Outliers': summary_before, 'After Handling Outliers': summary_after})
        print(f"Summary Statistics for {column}")
        print(summary_table)
        print()

        # Calculate proportion of outliers
        num_outliers = len(outliers[column])
        proportion_outliers = num_outliers / len(train_cleaned_original) * 100

        # Calculate skewness and kurtosis
        skewness_before = train_cleaned_original[column].skew()
        skewness_after = train_cleaned_no_outliers[column].skew()
        kurtosis_before = train_cleaned_original[column].kurt()
        kurtosis_after = train_cleaned_no_outliers[column].kurt()

        # Print insights and recommended actions
        if num_outliers > 0:
            insight = f"The feature '{column}' had {num_outliers} outliers ({proportion_outliers:.2f}% of the data) which have been capped to the lower and upper bounds."
            recommended_action = f"Review the impact of outlier handling on the distribution of '{column}'. Consider further analysis or feature transformation if necessary."
        else:
            insight = f"No significant outliers were detected for the feature '{column}'."
            recommended_action = f"No action needed for outliers in '{column}'."

        print(f"Insights for {column}: {insight}")
        print(f"Proportion of Outliers: {proportion_outliers:.2f}%")
        print(f"Skewness Before Handling Outliers: {skewness_before}, After: {skewness_after}")
        print(f"Kurtosis Before Handling Outliers: {kurtosis_before}, After: {kurtosis_after}")
        print(f"Recommended Actions for {column}: {recommended_action}")
        print("\n" + "-"*80 + "\n")
