# src/feature_engineering/drop_features.py

import os
import pandas as pd
import logging
from tqdm.notebook import tqdm
from typing import Tuple, List, Dict
from src.utils.metadata_operations import extract_imputation_strategy

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def drop_high_missing_value_features(df: pd.DataFrame, metadata: dict) -> Tuple[pd.DataFrame, List[str]]:
    """
    Drop features with the imputation strategy set to "Drop" from the DataFrame based on metadata.

    Parameters:
    df (pd.DataFrame): The input DataFrame.
    metadata (dict): The metadata containing imputation strategy information.

    Returns:
    Tuple[pd.DataFrame, List[str]]: 
        - DataFrame with selected features dropped.
        - List of dropped columns.
    """
    try:
        columns_to_drop = []

        for column in tqdm(df.columns, desc="Processing columns for dropping"):
            imputation_strategy = extract_imputation_strategy(metadata, column)
            if imputation_strategy == "Drop":
                columns_to_drop.append(column)
                logging.info(f"Column '{column}' marked for dropping due to imputation strategy: {imputation_strategy}.")

        if columns_to_drop:
            df.drop(columns=columns_to_drop, inplace=True)
            logging.info(f"Dropped columns: {columns_to_drop}")

        return df, columns_to_drop
    except Exception as e:
        logging.error(f"Error dropping high missing value features: {e}")
        raise
