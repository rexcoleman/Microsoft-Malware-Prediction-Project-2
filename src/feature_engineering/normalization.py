# src/feature_engineering/normalization.py

import os
import pandas as pd
from src.utils.common import save_dataframe, save_json_file

def extract_normalization_metrics(metadata):
    normalization_metrics_columns = [
        'Feature', 'Classified Data Type', 'Technical Data Type', 'Mean', 'Std', 'Min', 'Max', 'Skewness', 'Kurtosis'
    ]
    
    normalization_metrics_data = []

    for feature, details in metadata['features'].items():
        if 'summary_statistics' in details:
            summary_stats = details['summary_statistics']
            outlier_metrics = details.get('outlier_metrics', {})
            row = {
                'Feature': feature,
                'Classified Data Type': details.get('classified_data_type', None),
                'Technical Data Type': details.get('technical_data_type', None),
                'Mean': summary_stats.get('mean', None),
                'Std': summary_stats.get('std', None),
                'Min': summary_stats.get('min', None),
                'Max': summary_stats.get('max', None),
                'Skewness': outlier_metrics.get('Skewness', None),
                'Kurtosis': outlier_metrics.get('Kurtosis', None)
            }
            normalization_metrics_data.append(row)

    return pd.DataFrame(normalization_metrics_data, columns=normalization_metrics_columns)

def save_normalization_metrics_to_files(normalization_metrics_df, csv_path, json_path):
    save_dataframe(normalization_metrics_df, csv_path)
    save_json_file(normalization_metrics_df.to_dict(orient='records'), json_path)

def define_strategy_and_check_thresholds(feature_metrics):
    strategies = {}
    thresholds_exceeded = {}
    thresholds = {}

    for feature, metrics in feature_metrics.items():
        possible_actions = []
        feature_thresholds = {}

        feature_thresholds['Standardization'] = metrics['Std'] is not None and metrics['Std'] != 0
        feature_thresholds['Normalization'] = metrics['Min'] is not None and metrics['Max'] is not None and (metrics['Max'] - metrics['Min']) != 0
        
        for action, condition in feature_thresholds.items():
            if condition:
                possible_actions.append((action, 1))
        
        possible_actions.sort(key=lambda x: x[1])
        
        if possible_actions:
            highest_priority_action = possible_actions[0][0]
        else:
            highest_priority_action = 'No Action'
        
        strategies[feature] = highest_priority_action

        exceeded = {action: condition for action, condition in feature_thresholds.items()}
        thresholds_exceeded[feature] = exceeded
        thresholds[feature] = feature_thresholds
    
    return strategies, thresholds_exceeded, thresholds

def save_normalization_strategies(strategies, thresholds_exceeded, thresholds, analysis_results_path):
    strategies_json_path = os.path.join(analysis_results_path, 'normalization_strategies.json')
    thresholds_exceeded_json_path = os.path.join(analysis_results_path, 'normalization_thresholds_exceeded.json')
    thresholds_json_path = os.path.join(analysis_results_path, 'normalization_thresholds.json')

    save_json_file(strategies, strategies_json_path)
    save_json_file(thresholds_exceeded, thresholds_exceeded_json_path)
    save_json_file(thresholds, thresholds_json_path)

def save_all_tables(strategies_df, thresholds_exceeded_df, normalization_metrics_df, analysis_results_path):
    combined_df = pd.concat([strategies_df, thresholds_exceeded_df, normalization_metrics_df], axis=1)
    combined_df.to_csv(os.path.join(analysis_results_path, 'normalization_all_tables.csv'), index=False)

def display_dataframe_as_html(df):
    from IPython.display import display, HTML
    display(HTML(df.to_html(index=False)))
