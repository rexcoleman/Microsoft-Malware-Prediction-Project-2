# src/create_feature_groups.py

import os
import sys
import yaml

# Adjust sys.path to include the root directory of the project
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
if project_root not in sys.path:
    sys.path.append(project_root)

from src.config_loader import load_paths

# Load paths
paths = load_paths()

def load_feature_metadata():
    feature_metadata_path = os.path.join(project_root, paths['config']['feature_metadata'])
    with open(feature_metadata_path, 'r') as file:
        feature_metadata = yaml.safe_load(file)
    return feature_metadata

def save_feature_groups(feature_groups):
    feature_groups_path = os.path.join(project_root, paths['config']['feature_groups'])
    with open(feature_groups_path, 'w') as file:
        file.write("# config/feature_groups.yaml\n\n")
        yaml.dump(feature_groups, file, default_flow_style=False)

def create_feature_groups():
    feature_metadata = load_feature_metadata()
    
    feature_groups = {
        'numerical_features': [],
        'categorical_features': [],
        'binary_features': [],
        'datetime_features': []  # If you have datetime features, add them here
    }
    
    for feature, metadata in feature_metadata['features'].items():
        classified_data_type = metadata.get('classified_data_type', 'categorical')
        feature_groups[f'{classified_data_type}_features'].append(feature)
    
    save_feature_groups(feature_groups)

if __name__ == "__main__":
    create_feature_groups()
