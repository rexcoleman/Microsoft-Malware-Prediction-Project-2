# src/initialization/initialize_schemas.py

import json
import yaml
import logging
from src.utils.file_operations import load_yaml, save_json_file

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def convert_yaml_to_json(yaml_path, json_path):
    """
    Convert a YAML file to a JSON file.

    Parameters:
    yaml_path (str): Path to the YAML file.
    json_path (str): Path to save the JSON file.
    """
    with open(yaml_path, 'r') as file:
        yaml_content = yaml.safe_load(file)
    
    with open(json_path, 'w') as file:
        json.dump(yaml_content, file, indent=4)
    
    logging.info(f"Converted {yaml_path} to {json_path}")

def extract_subschema(full_schema, attribute_path):
    """
    Extract a sub-schema from the full schema based on the attribute path.
    """
    attribute_parts = attribute_path.split('.')
    subschema = full_schema
    for part in attribute_parts:
        logging.debug(f"Current part: {part}")
        logging.debug(f"Current schema section keys: {subschema.keys()}")
        if part in subschema:
            subschema = subschema[part]
        elif 'properties' in subschema and part in subschema['properties']:
            subschema = subschema['properties'][part]
        else:
            raise KeyError(f"Key '{part}' not found in schema at {subschema.keys()}")
    return subschema

def save_subschema(subschema, subschema_path):
    """
    Save a sub-schema to a JSON file.
    """
    with open(subschema_path, 'w') as file:
        json.dump(subschema, file, indent=4)

def initialize_schemas(yaml_schema_path, json_schema_path, subschemas):
    """
    Initialize the full schema and sub-schemas based on the YAML file and save them as JSON.

    Parameters:
    yaml_schema_path (str): Path to the YAML schema file.
    json_schema_path (str): Path to save the JSON schema file.
    subschemas (dict): Dictionary of sub-schema paths and their attribute paths.
    """
    # Convert full schema from YAML to JSON
    convert_yaml_to_json(yaml_schema_path, json_schema_path)

    # Load the JSON full schema
    with open(json_schema_path, 'r') as file:
        full_schema = json.load(file)

    # Initialize and save sub-schemas
    for subschema_path, attribute_path in subschemas.items():
        subschema = extract_subschema(full_schema, attribute_path)
        save_subschema(subschema, subschema_path)
        logging.info(f"Sub-schema saved to {subschema_path}")

if __name__ == "__main__":
    from src.config_loader import load_paths
    
    project_root = find_project_root()
    os.chdir(project_root)
    
    paths = load_paths('config/paths.yaml')
    
    yaml_schema_path = paths['config']['schemas']['feature_metadata_complete_schema_yaml']
    json_schema_path = paths['config']['schemas']['feature_metadata_complete_schema_json']
    subschemas = {
        paths['config']['schemas']['missing_values_schema']: 'metadata_schema.properties.default_attributes.properties.missing_values'
        # Add other subschemas as needed
    }
    
    initialize_schemas(yaml_schema_path, json_schema_path, subschemas)
