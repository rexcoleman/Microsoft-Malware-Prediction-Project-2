# src/initialization/initialize_schemas.py

import os
import json
import yaml
import logging
from jsonschema import validate, ValidationError
from pathlib import Path
from src.utils.file_operations import load_yaml, save_json_file, load_json_file

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def convert_yaml_to_json(yaml_path, json_path):
    with open(yaml_path, 'r') as file:
        yaml_content = yaml.safe_load(file)
    
    with open(json_path, 'w') as file:
        json.dump(yaml_content, file, indent=4)
    
    logging.info(f"Converted {yaml_path} to {json_path}")
    log_schema_details(json_path)

def log_schema_details(schema):
    if isinstance(schema, dict):
        logging.debug(f"Schema details:\n{json.dumps(schema, indent=4)}")
    elif isinstance(schema, str):
        with open(schema, 'r') as file:
            schema_content = json.load(file)
        logging.debug(f"Schema details for {schema}:\n{json.dumps(schema_content, indent=4)}")
    else:
        raise TypeError("Expected schema to be either a dictionary or a file path string.")

def validate_schemas(json_schema_path, yaml_schema_path):
    json_schema = load_json_file(json_schema_path)
    yaml_schema = load_yaml(yaml_schema_path)

    try:
        validate(instance=json_schema, schema=yaml_schema)
        logging.info("JSON schema is consistent with the YAML schema.")
    except ValidationError as e:
        logging.error(f"JSON schema is not consistent with the YAML schema: {e}")
        log_schema_details(json_schema)
        log_schema_details(yaml_schema)
        raise

def validate_metadata(metadata, schema_path):
    schema = load_json_file(schema_path)

    try:
        validate(instance=metadata, schema=schema)
        logging.info("Metadata is consistent with the JSON schema.")
    except ValidationError as e:
        logging.error(f"Metadata is not consistent with the JSON schema: {e}")
        log_schema_details(metadata)
        log_schema_details(schema)
        raise

def main(paths, directories):
    try:
        yaml_schema_path = paths['config']['schemas']['feature_metadata_complete_schema_yaml']
        json_schema_path = paths['config']['schemas']['feature_metadata_complete_schema_json']

        logging.info(f"Initializing schemas from {yaml_schema_path} to {json_schema_path}")
        convert_yaml_to_json(yaml_schema_path, json_schema_path)
        validate_schemas(json_schema_path, yaml_schema_path)
        
        full_schema = load_json_file(json_schema_path)
        # Assuming you have metadata to validate
        metadata_path = paths['data']['metadata']  # This path should point to your metadata file
        metadata = load_json_file(metadata_path)
        validate_metadata(metadata, json_schema_path)
        
        logging.info("Schema and metadata validation completed successfully.")
        
    except Exception as e:
        logging.error(f"Error in main function: {e}", exc_info=True)

if __name__ == "__main__":
    main(paths, directories)
    import subprocess
    subprocess.run(['python', '-m', 'unittest', 'discover', 'tests'])
