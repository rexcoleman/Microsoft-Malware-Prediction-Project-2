# src/initialization/initialize_schemas.py

import json
import yaml
import logging
from jsonschema import validate, ValidationError
from src.utils.file_operations import load_yaml, save_json_file, load_json_file

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

def convert_yaml_to_json(yaml_path, json_path):
    """
    Convert a YAML file to a JSON file.

    Parameters:
    yaml_path (str): Path to the YAML file.
    json_path (str): Path to save the JSON file.
    """
    with open(yaml_path, 'r') as file:
        yaml_content = yaml.safe_load(file)
    
    with open(json_path, 'w') as file:
        json.dump(yaml_content, file, indent=4)
    
    logging.info(f"Converted {yaml_path} to {json_path}")

def extract_subschema(full_schema, attribute_path):
    """
    Extract a sub-schema from the full schema based on the attribute path.
    """
    attribute_parts = attribute_path.split('.')
    subschema = full_schema
    for part in attribute_parts:
        if part in subschema:
            subschema = subschema[part]
        elif 'properties' in subschema and part in subschema['properties']:
            subschema = subschema['properties'][part]
        else:
            raise KeyError(f"Key '{part}' not found in schema.")
    return subschema

def save_subschema(subschema, subschema_path):
    """
    Save a sub-schema to a JSON file.
    """
    with open(subschema_path, 'w') as file:
        json.dump(subschema, file, indent=4)

def initialize_schemas(yaml_schema_path, json_schema_path, subschemas):
    """
    Initialize the full schema and sub-schemas based on the YAML file and save them as JSON.

    Parameters:
    yaml_schema_path (str): Path to the YAML schema file.
    json_schema_path (str): Path to save the JSON schema file.
    subschemas (dict): Dictionary of sub-schema paths and their attribute paths.
    """
    # Convert full schema from YAML to JSON
    convert_yaml_to_json(yaml_schema_path, json_schema_path)

    # Load the JSON full schema
    with open(json_schema_path, 'r') as file:
        full_schema = json.load(file)

    # Initialize and save sub-schemas
    for subschema_path, attribute_path in subschemas.items():
        subschema = extract_subschema(full_schema, attribute_path)
        save_subschema(subschema, subschema_path)
        logging.info(f"Sub-schema saved to {subschema_path}")

def validate_schemas(json_schema_path, yaml_schema_path):
    """
    Validate that the JSON schema is consistent with the YAML schema.

    Parameters:
    json_schema_path (str): Path to the JSON schema file.
    yaml_schema_path (str): Path to the YAML schema file.
    """
    json_schema = load_json_file(json_schema_path)
    yaml_schema = load_yaml(yaml_schema_path)

    try:
        validate(instance=json_schema, schema=yaml_schema)
        logging.info("JSON schema is consistent with the YAML schema.")
    except ValidationError as e:
        logging.error(f"JSON schema is not consistent with the YAML schema: {e}")
        raise

def validate_metadata(metadata, schema_path):
    """
    Validate metadata against a JSON schema.

    Parameters:
    metadata (dict): The metadata to validate.
    schema_path (str): Path to the JSON schema file.
    """
    schema = load_json_file(schema_path)

    try:
        validate(instance=metadata, schema=schema)
        logging.info("Metadata is consistent with the JSON schema.")
    except ValidationError as e:
        logging.error(f"Metadata is not consistent with the JSON schema: {e}")
        raise
