# src/data/data_analysis.py

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import yaml

def generate_summary_statistics(df):
    summary_stats = df.describe(include='all').transpose()
    summary_stats['missing_values'] = df.isnull().sum()
    summary_stats['missing_percentage'] = (summary_stats['missing_values'] / len(df)) * 100
    summary_stats['dtype'] = df.dtypes
    return summary_stats

def plot_correlation_heatmap(df, target_col='HasDetections'):
    plt.figure(figsize=(12, 8))
    numeric_df = df.select_dtypes(include=['float64', 'int64'])
    corr_matrix = numeric_df.corr()
    sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm')
    plt.title('Correlation Matrix')
    plt.show()
    return corr_matrix

def suggest_imputation_strategy(summary_stats, corr_matrix, target_col='HasDetections', correlation_threshold=0.1):
    strategies = {}
    for column in summary_stats.index:
        if summary_stats.loc[column, 'missing_values'] > 0:
            if summary_stats.loc[column, 'dtype'] in ['float64', 'int64']:
                correlation = abs(corr_matrix[target_col].get(column, 0))
                if correlation > correlation_threshold:
                    print(f"Using median for {column} due to high correlation: {correlation}")
                    strategies[column] = 'median'  # For numerical columns with significant correlation, use median
                else:
                    print(f"Using mean for {column} due to low correlation: {correlation}")
                    strategies[column] = 'mean'  # For numerical columns without significant correlation, use mean
            else:
                print(f"Using mode for {column} as it is categorical")
                strategies[column] = 'mode'  # For categorical columns, use mode
    return strategies

def save_analysis_results(train_summary_stats, test_summary_stats, imputation_strategies, report_dir):
    train_summary_stats.to_csv(f"{report_dir}/train_summary_stats.csv", index=True)
    test_summary_stats.to_csv(f"{report_dir}/test_summary_stats.csv", index=True)
    
    with open(f"{report_dir}/imputation_strategies.yaml", 'w') as file:
        yaml.dump({"imputation_strategies": imputation_strategies}, file)







# # src/data/data_analysis.py

# import pandas as pd
# import seaborn as sns
# import matplotlib.pyplot as plt
# import yaml
# from config_loader import load_config

# def generate_summary_statistics(df):
#     summary_stats = df.describe(include='all').transpose()
#     summary_stats['missing_values'] = df.isnull().sum()
#     summary_stats['missing_percentage'] = (df.isnull().sum() / len(df)) * 100
#     summary_stats['dtype'] = df.dtypes
#     return summary_stats

# def plot_correlation_heatmap(df, target_col='HasDetections'):
#     corr_matrix = df.corr(numeric_only=True)
#     plt.figure(figsize=(12, 8))
#     sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm')
#     plt.title('Correlation Matrix')
#     plt.show()
#     return corr_matrix

# def suggest_imputation_strategy(summary_stats, corr_matrix, target_col='HasDetections'):
#     strategies = {}
#     for column in summary_stats.index:
#         if summary_stats.loc[column, 'missing_values'] > 0:
#             if summary_stats.loc[column, 'dtype'] in ['float64', 'int64']:
#                 if abs(corr_matrix[target_col].get(column, 0)) > 0.1:
#                     strategies[column] = 'median'  # For numerical columns with significant correlation, use median
#                 else:
#                     strategies[column] = 'mean'  # For numerical columns without significant correlation, use mean
#             else:
#                 strategies[column] = 'mode'  # For categorical columns, use mode
#     return strategies

# def save_analysis_results(train_summary_stats, test_summary_stats, imputation_strategies, report_dir):
#     train_summary_stats.to_csv(f'{report_dir}/train_summary_statistics.csv')
#     test_summary_stats.to_csv(f'{report_dir}/test_summary_statistics.csv')

#     with open(f'{report_dir}/imputation_strategies.yaml', 'w') as file:
#         yaml.dump(imputation_strategies, file)
