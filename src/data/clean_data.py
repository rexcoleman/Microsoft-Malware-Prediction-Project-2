# src/data/clean_data.py

from src.feature_engineering.imputation import load_feature_metadata, define_imputation_strategies
from src.config_loader import load_paths
import pandas as pd

def clean_data(train_df, test_df):
    paths = load_paths()
    
    # Load feature metadata and imputation strategies
    feature_metadata = load_feature_metadata()
    imputation_strategies = define_imputation_strategies(feature_metadata)
    
    # Apply imputation strategies
    train_df = impute_missing_values(train_df, imputation_strategies)
    test_df = impute_missing_values(test_df, imputation_strategies)
    
    return train_df, test_df

def impute_missing_values(df, strategies):
    for feature, strategy in strategies['numerical_features'].items():
        if strategy == 'mean':
            df[feature].fillna(df[feature].mean(), inplace=True)
        elif strategy == 'median':
            df[feature].fillna(df[feature].median(), inplace=True)
        elif strategy == 'mode':
            df[feature].fillna(df[feature].mode()[0], inplace=True)
            
    for feature, strategy in strategies['categorical_features'].items():
        df[feature].fillna(strategy, inplace=True)
        
    for feature, strategy in strategies['binary_features'].items():
        if feature in df.columns:
            df[feature].fillna(df[feature].mode()[0], inplace=True)
    
    return df

def remove_duplicates(df):
    initial_shape = df.shape
    df = df.drop_duplicates()
    final_shape = df.shape
    return df, initial_shape, final_shape
