# src/analysis/exploratory_data_analysis.py

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def plot_univariate_analysis(df):
    """
    Perform univariate analysis by plotting the distribution of each feature.
    """
    numeric_features = df.select_dtypes(include=['int64', 'float64']).columns
    categorical_features = df.select_dtypes(include=['object', 'category']).columns

    # Plot numeric features
    for feature in numeric_features:
        if not df[feature].dropna().empty:
            plt.figure(figsize=(10, 6))
            sns.histplot(df[feature].dropna(), kde=True)
            plt.title(f'Distribution of {feature}')
            plt.show()

    # Plot categorical features
    for feature in categorical_features:
        if not df[feature].dropna().empty and not df[feature].value_counts().empty:
            plt.figure(figsize=(10, 6))
            df[feature].value_counts().plot(kind='bar')
            plt.title(f'Distribution of {feature}')
            plt.show()

def plot_bivariate_analysis(df, target_col):
    """
    Perform bivariate and multivariate analysis by plotting relationships between features and the target variable.
    """
    numeric_features = df.select_dtypes(include=['int64', 'float64']).columns

    for feature in numeric_features:
        if feature != target_col and not df[feature].dropna().empty:
            plt.figure(figsize=(10, 6))
            sns.boxplot(x=target_col, y=feature, data=df)
            plt.title(f'{feature} vs {target_col}')
            plt.show()

def plot_time_series_analysis(df):
    """
    Perform time series analysis by plotting time-related features.
    """
    time_features = [col for col in df.columns if 'Date' in col or 'Time' in col]

    for feature in time_features:
        df[feature] = pd.to_datetime(df[feature], errors='coerce')
        if not df[feature].dropna().empty:
            plt.figure(figsize=(10, 6))
            df.groupby(df[feature].dt.to_period("M")).size().plot()
            plt.title(f'Time Series Analysis of {feature}')
            plt.show()
