import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import yaml
from scipy.stats import entropy, chi2_contingency
import numpy as np

# Functions for numerical features

def generate_numerical_summary(df, output_path):
    summary = df.describe().transpose()
    summary.to_csv(output_path)
    return summary

def plot_histogram(df, feature, output_dir):
    plt.figure(figsize=(10, 6))
    sns.histplot(df[feature].dropna(), kde=False, bins=30)
    plt.title(f'Histogram of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')
    plt.grid(True)
    
    output_path = os.path.join(output_dir, f'{feature}_histogram.png')
    plt.savefig(output_path)
    plt.close()

def plot_kde(df, feature, output_dir):
    plt.figure(figsize=(10, 6))
    sns.kdeplot(df[feature].dropna(), fill=True)  # Use 'fill' instead of 'shade'
    plt.title(f'KDE Plot of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Density')
    plt.grid(True)
    
    output_path = os.path.join(output_dir, f'{feature}_kde.png')
    plt.savefig(output_path)
    plt.close()

def plot_box(df, feature, output_dir):
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[feature].dropna())
    plt.title(f'Box Plot of {feature}')
    plt.xlabel(feature)
    plt.grid(True)
    
    output_path = os.path.join(output_dir, f'{feature}_box.png')
    plt.savefig(output_path)
    plt.close()

def analyze_numerical_features(df, features, summary_output_path, plot_output_dir):
    summary = generate_numerical_summary(df[features], summary_output_path)
    
    if not os.path.exists(plot_output_dir):
        os.makedirs(plot_output_dir)
    
    for feature in features:
        plot_histogram(df, feature, plot_output_dir)
        plot_kde(df, feature, plot_output_dir)
        plot_box(df, feature, plot_output_dir)


# Functions for calculating feature balance metrics

def calculate_gini(probabilities):
    return 1 - sum(probabilities ** 2)

def calculate_entropy(probabilities):
    return entropy(probabilities, base=2)

def calculate_chi_square(data, feature):
    contingency_table = pd.crosstab(data[feature], data['HasDetections'])
    chi2, p, dof, ex = chi2_contingency(contingency_table)
    return chi2, p

def feature_balance_metrics(data, feature):
    counts = data[feature].value_counts()
    probabilities = counts / len(data)
    
    gini = calculate_gini(probabilities)
    ent = calculate_entropy(probabilities)
    
    chi2, p_value = calculate_chi_square(data, feature)
    
    return {
        'gini_index': float(gini),
        'entropy': float(ent),
        'chi_square': float(chi2),
        'p_value': float(p_value)
    }

# Functions for categorical features

def generate_categorical_summary(df, features, output_path):
    summary = {}
    for feature in features:
        summary[feature] = df[feature].value_counts().to_dict()
    summary_df = pd.DataFrame.from_dict(summary, orient='index').fillna(0)
    summary_df.to_csv(output_path)
    return summary_df

def plot_categorical_feature(df, feature, output_dir):
    plt.figure(figsize=(10, 6))
    sns.countplot(y=df[feature], order=df[feature].value_counts().index)
    plt.title(f'Frequency of {feature}')
    plt.xlabel('Count')
    plt.ylabel(feature)
    plt.grid(True)
    
    output_path = os.path.join(output_dir, f'{feature}.png')
    plt.savefig(output_path)
    plt.close()

def analyze_categorical_features(df, features, summary_output_path, plot_output_dir):
    summary_df = generate_categorical_summary(df, features, summary_output_path)
    
    if not os.path.exists(plot_output_dir):
        os.makedirs(plot_output_dir)
    
    for feature in features:
        plot_categorical_feature(df, feature, plot_output_dir)
    
    return summary_df