# src/analysis/initial_data_analysis.py

from src.analysis.data_understanding import (
    data_overview,
    data_types_and_formats,
    statistical_summary,
    target_variable_analysis,
    missing_values_analysis,
    feature_balance_analysis,
    correlation_analysis,
    feature_interactions,
    feature_classification,
)

def perform_data_analysis(train_sample, test_sample, analysis_results_dir, pair_threshold=0.2):
    """
    Perform initial data analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    test_sample (pd.DataFrame): The test sample DataFrame.
    analysis_results_dir (str): Directory to save analysis results.
    pair_threshold (float): Threshold for correlation analysis. Defaults to 0.2.

    Raises:
    Exception: If there is an error performing data analysis.
    """
    try:
        analyze_data_overview(train_sample, test_sample, analysis_results_dir)
        analyze_data_types_and_formats(train_sample, analysis_results_dir)
        analyze_statistical_summary(train_sample, analysis_results_dir)
        analyze_target_variable(train_sample, analysis_results_dir)
        analyze_missing_values(train_sample, analysis_results_dir)
        analyze_feature_balance(train_sample, analysis_results_dir)
        analyze_correlation(train_sample, analysis_results_dir, pair_threshold)
        analyze_feature_interactions(train_sample, analysis_results_dir)
        analyze_feature_classification(train_sample, analysis_results_dir)
    except Exception as e:
        print(f"Error performing data analysis: {e}")
        raise

def analyze_data_overview(train_sample, test_sample, save_dir):
    """
    Perform data overview analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    test_sample (pd.DataFrame): The test sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing data overview analysis.
    """
    try:
        data_overview(train_sample, test_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in data overview analysis: {e}")
        raise

def analyze_data_types_and_formats(train_sample, save_dir):
    """
    Perform data types and formats analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing data types and formats analysis.
    """
    try:
        data_types_and_formats(train_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in data types and formats analysis: {e}")
        raise

def analyze_statistical_summary(train_sample, save_dir):
    """
    Perform statistical summary analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing statistical summary analysis.
    """
    try:
        statistical_summary(train_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in statistical summary analysis: {e}")
        raise

def analyze_target_variable(train_sample, save_dir):
    """
    Perform target variable analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing target variable analysis.
    """
    try:
        target_variable_analysis(train_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in target variable analysis: {e}")
        raise

def analyze_missing_values(train_sample, save_dir):
    """
    Perform missing values analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing missing values analysis.
    """
    try:
        missing_values_analysis(train_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in missing values analysis: {e}")
        raise

def analyze_feature_balance(train_sample, save_dir):
    """
    Perform feature balance analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing feature balance analysis.
    """
    try:
        feature_balance_analysis(train_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in feature balance analysis: {e}")
        raise

def analyze_correlation(train_sample, save_dir, pair_threshold):
    """
    Perform correlation analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.
    pair_threshold (float): Threshold for correlation analysis.

    Raises:
    Exception: If there is an error performing correlation analysis.
    """
    try:
        high_correlation_pairs, target_corr = correlation_analysis(train_sample, save_dir=save_dir, pair_threshold=pair_threshold)
    except Exception as e:
        print(f"Error in correlation analysis: {e}")
        raise

def analyze_feature_interactions(train_sample, save_dir):
    """
    Perform feature interactions analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing feature interactions analysis.
    """
    try:
        feature_interactions(train_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in feature interactions analysis: {e}")
        raise

def analyze_feature_classification(train_sample, save_dir):
    """
    Perform feature classification analysis.

    Parameters:
    train_sample (pd.DataFrame): The training sample DataFrame.
    save_dir (str): Directory to save analysis results.

    Raises:
    Exception: If there is an error performing feature classification analysis.
    """
    try:
        feature_classification(train_sample, save_dir=save_dir)
    except Exception as e:
        print(f"Error in feature classification analysis: {e}")
        raise





# # src/analysis/initial_data_analysis.py

# from src.analysis.data_understanding import (
#     data_overview,
#     data_types_and_formats,
#     statistical_summary,
#     target_variable_analysis,
#     missing_values_analysis,
#     feature_balance_analysis,
#     correlation_analysis,
#     feature_interactions,
#     feature_classification,
# )

# def perform_data_analysis(train_sample, test_sample, analysis_results_dir, pair_threshold=0.2):
#     """
#     Perform initial data analysis.

#     Parameters:
#     train_sample (pd.DataFrame): The training sample DataFrame.
#     test_sample (pd.DataFrame): The test sample DataFrame.
#     analysis_results_dir (str): Directory to save analysis results.
#     pair_threshold (float): Threshold for correlation analysis.
#     """
#     try:
#         # Data Overview
#         data_overview(train_sample, test_sample, save_dir=analysis_results_dir)

#         # Data Types and Formats
#         data_types_and_formats(train_sample, save_dir=analysis_results_dir)

#         # Statistical Summary
#         statistical_summary(train_sample, save_dir=analysis_results_dir)

#         # Target Variable Analysis
#         target_variable_analysis(train_sample, save_dir=analysis_results_dir)

#         # Missing Values Analysis
#         missing_values_analysis(train_sample, save_dir=analysis_results_dir)

#         # Feature Balance Analysis
#         feature_balance_analysis(train_sample, save_dir=analysis_results_dir)

#         # Correlation Analysis
#         high_correlation_pairs, target_corr = correlation_analysis(train_sample, save_dir=analysis_results_dir, pair_threshold=pair_threshold)

#         # Feature Interactions
#         feature_interactions(train_sample, save_dir=analysis_results_dir)

#         # Feature Classification
#         feature_classification(train_sample, save_dir=analysis_results_dir)
#     except Exception as e:
#         print(f"Error performing data analysis: {e}")
#         raise
