# src/analysis/missing_values_analysis.py

import pandas as pd

def calculate_missing_values(df):
    missing_values_check = df.isnull().sum()
    missing_values_df = missing_values_check.reset_index()
    missing_values_df.columns = ['Feature', 'MissingValues']
    missing_values_df = missing_values_df.sort_values(by='MissingValues', ascending=False).reset_index(drop=True)
    features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
    return missing_values_df, features_with_missing_values

def calculate_correlation_with_target(df, target_column):
    correlation_with_target = df.corr()[target_column].drop(target_column, errors='ignore')
    correlation_with_target = correlation_with_target.sort_values(ascending=False)
    return correlation_with_target

def calculate_pairwise_correlations(df, threshold=0.2):
    pairwise_correlation = df.corr()
    high_correlation_pairs = pairwise_correlation.stack().reset_index()
    high_correlation_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
    high_correlation_pairs = high_correlation_pairs[
        (high_correlation_pairs['Feature1'] != high_correlation_pairs['Feature2']) &
        (high_correlation_pairs['Correlation'].abs() > threshold)
    ]
    high_correlation_pairs['Pair'] = high_correlation_pairs.apply(
        lambda row: tuple(sorted([row['Feature1'], row['Feature2']])), axis=1
    )
    high_correlation_pairs = high_correlation_pairs.drop_duplicates(subset=['Pair']).drop(columns=['Pair'])
    high_correlation_pairs = high_correlation_pairs.reindex(
        high_correlation_pairs.sort_values(by=['Correlation'], key=abs, ascending=False)
        .sort_values(by=['Correlation'], ascending=False)
        .index
    )
    return high_correlation_pairs, pairwise_correlation

def missing_values_summary(df):
    missing_values = df.isnull().sum().reset_index()
    missing_values.columns = ['column_name', 'missing_count']
    missing_values = missing_values[missing_values['missing_count'] > 0]
    missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
    missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
    return missing_values

def plot_missing_values_per_row(df):
    missing_per_row = df.isnull().sum(axis=1) / df.shape[1] * 100
    return missing_per_row

def missing_features_per_row_distribution(missing_per_row, df):
    distribution = missing_per_row.value_counts(normalize=True).reset_index()
    distribution.columns = ['percent_missing_features_per_row', 'percent_of_rows']
    distribution['number_of_rows'] = distribution['percent_of_rows'] * len(missing_per_row)
    distribution['percent_of_rows'] = distribution['percent_of_rows'] * 100
    distribution['missing_features_per_row'] = (distribution['percent_missing_features_per_row'] / 100 * df.shape[1]).round(0).astype(int)
    distribution = distribution[['missing_features_per_row', 'percent_missing_features_per_row', 'percent_of_rows', 'number_of_rows']]
    distribution = distribution.sort_values(by='percent_missing_features_per_row', ascending=False)
    return distribution

def missing_values_per_row_summary(missing_per_row):
    summary = missing_per_row.describe(percentiles=[.25, .5, .75, .9, .95, .99])
    summary_df = summary.reset_index()
    summary_df.columns = ['Metric', 'Value']
    return summary_df

def categorize_missing_features(distribution):
    def categorize(row):
        if row['percent_missing_features_per_row'] < 10:
            return 'Low'
        elif 10 <= row['percent_missing_features_per_row'] < 50:
            return 'Medium'
        else:
            return 'High'
    
    distribution['category'] = distribution.apply(categorize, axis=1)
    summary = distribution.groupby('category').agg({
        'number_of_rows': 'sum',
        'percent_of_rows': 'sum'
    }).reset_index()
    summary = summary.sort_values(by='percent_of_rows', ascending=False)
    return summary



# import pandas as pd

# def missing_values_summary(df):
#     missing_values = df.isnull().sum().reset_index()
#     missing_values.columns = ['column_name', 'missing_count']
#     missing_values = missing_values[missing_values['missing_count'] > 0]
#     missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
#     missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
#     return missing_values

# def calculate_missing_values(df):
#     missing_values_check = df.isnull().sum()
#     missing_values_df = missing_values_check.reset_index()
#     missing_values_df.columns = ['Feature', 'MissingValues']
#     missing_values_df = missing_values_df.sort_values(by='MissingValues', ascending=False).reset_index(drop=True)
#     features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
#     return missing_values_df, features_with_missing_values

# def calculate_correlation_with_target(df, target_column):
#     correlation_with_target = df.corr()[target_column].drop(target_column, errors='ignore')
#     correlation_with_target = correlation_with_target.sort_values(ascending=False)
#     return correlation_with_target

# def calculate_pairwise_correlations(df, threshold=0.2):
#     pairwise_correlation = df.corr()
#     high_correlation_pairs = pairwise_correlation.stack().reset_index()
#     high_correlation_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
#     high_correlation_pairs = high_correlation_pairs[
#         (high_correlation_pairs['Feature1'] != high_correlation_pairs['Feature2']) &
#         (high_correlation_pairs['Correlation'].abs() > threshold)
#     ]
#     high_correlation_pairs['Pair'] = high_correlation_pairs.apply(
#         lambda row: tuple(sorted([row['Feature1'], row['Feature2']])), axis=1
#     )
#     high_correlation_pairs = high_correlation_pairs.drop_duplicates(subset=['Pair']).drop(columns=['Pair'])
#     high_correlation_pairs = high_correlation_pairs.reindex(
#         high_correlation_pairs.sort_values(by=['Correlation'], key=abs, ascending=False)
#         .sort_values(by=['Correlation'], ascending=False)
#         .index
#     )
#     return high_correlation_pairs, pairwise_correlation

# def plot_missing_values_per_row(df):
#     missing_per_row = df.isnull().sum(axis=1) / df.shape[1] * 100
#     return missing_per_row

# def missing_features_per_row_distribution(missing_per_row, df):
#     distribution = missing_per_row.value_counts(normalize=True).reset_index()
#     distribution.columns = ['percent_missing_features_per_row', 'percent_of_rows']
#     distribution['number_of_rows'] = distribution['percent_of_rows'] * len(missing_per_row)
#     distribution['percent_of_rows'] = distribution['percent_of_rows'] * 100
#     distribution['missing_features_per_row'] = (distribution['percent_missing_features_per_row'] / 100 * df.shape[1]).round(0).astype(int)
#     distribution = distribution[['missing_features_per_row', 'percent_missing_features_per_row', 'percent_of_rows', 'number_of_rows']]
#     distribution = distribution.sort_values(by='percent_missing_features_per_row', ascending=False)
#     return distribution

# def missing_values_per_row_summary(missing_per_row):
#     summary = missing_per_row.describe(percentiles=[.25, .5, .75, .9, .95, .99])
#     summary_df = summary.reset_index()
#     summary_df.columns = ['Metric', 'Value']
#     return summary_df

# def categorize_missing_features(distribution):
#     def categorize(row):
#         if row['percent_missing_features_per_row'] < 10:
#             return 'Low'
#         elif 10 <= row['percent_missing_features_per_row'] < 50:
#             return 'Medium'
#         else:
#             return 'High'
    
#     distribution['category'] = distribution.apply(categorize, axis=1)
#     summary = distribution.groupby('category').agg({
#         'number_of_rows': 'sum',
#         'percent_of_rows': 'sum'
#     }).reset_index()
#     summary = summary.sort_values(by='percent_of_rows', ascending=False)
#     return summary


# # # src/analysis/missing_values_analysis.py

# # import pandas as pd

# # def calculate_missing_values(df):
# #     missing_values_check = df.isnull().sum()
# #     missing_values_df = missing_values_check.reset_index()
# #     missing_values_df.columns = ['Feature', 'MissingValues']
# #     missing_values_df = missing_values_df.sort_values(by='MissingValues', ascending=False).reset_index(drop=True)
# #     features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
# #     return missing_values_df, features_with_missing_values

# # def calculate_correlation_with_target(df, target_column):
# #     correlation_with_target = df.corr()[target_column].drop(target_column, errors='ignore')
# #     correlation_with_target = correlation_with_target.sort_values(ascending=False)
# #     return correlation_with_target

# # def calculate_pairwise_correlations(df, threshold=0.2):
# #     pairwise_correlation = df.corr()
# #     high_correlation_pairs = pairwise_correlation.stack().reset_index()
# #     high_correlation_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
# #     high_correlation_pairs = high_correlation_pairs[
# #         (high_correlation_pairs['Feature1'] != high_correlation_pairs['Feature2']) &
# #         (high_correlation_pairs['Correlation'].abs() > threshold)
# #     ]
# #     high_correlation_pairs['Pair'] = high_correlation_pairs.apply(
# #         lambda row: tuple(sorted([row['Feature1'], row['Feature2']])), axis=1
# #     )
# #     high_correlation_pairs = high_correlation_pairs.drop_duplicates(subset=['Pair']).drop(columns=['Pair'])
# #     high_correlation_pairs = high_correlation_pairs.reindex(
# #         high_correlation_pairs.sort_values(by=['Correlation'], key=abs, ascending=False)
# #         .sort_values(by=['Correlation'], ascending=False)
# #         .index
# #     )
# #     return high_correlation_pairs, pairwise_correlation

# # def missing_values_summary(df):
# #     missing_values = df.isnull().sum().reset_index()
# #     missing_values.columns = ['column_name', 'missing_count']
# #     missing_values = missing_values[missing_values['missing_count'] > 0]
# #     missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
# #     missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
# #     return missing_values

# # def plot_missing_values_per_row(df):
# #     missing_per_row = df.isnull().sum(axis=1) / df.shape[1] * 100
# #     return missing_per_row

# # def missing_features_per_row_distribution(missing_per_row, df):
# #     distribution = missing_per_row.value_counts(normalize=True).reset_index()
# #     distribution.columns = ['percent_missing_features_per_row', 'percent_of_rows']
# #     distribution['number_of_rows'] = distribution['percent_of_rows'] * len(missing_per_row)
# #     distribution['percent_of_rows'] = distribution['percent_of_rows'] * 100
# #     distribution['missing_features_per_row'] = (distribution['percent_missing_features_per_row'] / 100 * df.shape[1]).round(0).astype(int)
# #     distribution = distribution[['missing_features_per_row', 'percent_missing_features_per_row', 'percent_of_rows', 'number_of_rows']]
# #     distribution = distribution.sort_values(by='percent_missing_features_per_row', ascending=False)
# #     return distribution

# # def missing_values_per_row_summary(missing_per_row):
# #     summary = missing_per_row.describe(percentiles=[.25, .5, .75, .9, .95, .99])
# #     summary_df = summary.reset_index()
# #     summary_df.columns = ['Metric', 'Value']
# #     return summary_df

# # def categorize_missing_features(distribution):
# #     def categorize(row):
# #         if row['percent_missing_features_per_row'] < 10:
# #             return 'Low'
# #         elif 10 <= row['percent_missing_features_per_row'] < 50:
# #             return 'Medium'
# #         else:
# #             return 'High'
    
# #     distribution['category'] = distribution.apply(categorize, axis=1)
# #     summary = distribution.groupby('category').agg({
# #         'number_of_rows': 'sum',
# #         'percent_of_rows': 'sum'
# #     }).reset_index()
# #     summary = summary.sort_values(by='percent_of_rows', ascending=False)
# #     return summary






# # # src/analysis/missing_values_analysis.py

# # import os
# # import pandas as pd
# # import seaborn as sns
# # import matplotlib.pyplot as plt
# # from src.utils.common import save_json_file, save_missing_values_summary, save_missing_values_correlation, save_missing_count_per_row
# # from src.visualization.plot_utils import plot_heatmap, plot_barplot

# # def missing_values_summary(df):
# #     missing_values = df.isnull().sum().reset_index()
# #     missing_values.columns = ['column_name', 'missing_count']
# #     missing_values = missing_values[missing_values['missing_count'] > 0]
# #     missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
# #     missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
# #     return missing_values

# # def plot_missing_values(missing_values, paths, top_n=20):
# #     plt.figure(figsize=(12, 8))
# #     sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
# #     plt.title('Top Rows with Missing Values')
# #     plt.xlabel('Missing Percentage')
# #     plt.ylabel('Column Name')
# #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
# #     plt.show()

# # def high_missing_value_correlation_pairs(corr_matrix, threshold=0.2):
# #     high_corr_pairs = corr_matrix.stack().reset_index()
# #     high_corr_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
# #     high_corr_pairs = high_corr_pairs[high_corr_pairs['Feature1'] != high_corr_pairs['Feature2']]
# #     high_corr_pairs['abs_corr'] = high_corr_pairs['Correlation'].abs()
# #     high_corr_pairs = high_corr_pairs[high_corr_pairs['abs_corr'] > threshold]
# #     high_corr_pairs = high_corr_pairs.sort_values(by='abs_corr', ascending=False).drop(columns='abs_corr')
# #     return high_corr_pairs

# # def missing_values_correlation(df):
# #     return df.isnull().corr()

# # def plot_missing_values_correlation(corr_matrix, paths):
# #     plot_heatmap(corr_matrix, 'Correlation of Missing Values', os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_correlation_heatmap.png'), annot=False)

# # def missing_count_per_row(dataframe):
# #     missing_count = dataframe.isnull().sum(axis=1).value_counts().reset_index()
# #     missing_count.columns = ['missing_count', 'row_count']
# #     missing_count['missing_percentage'] = (missing_count['row_count'] / len(dataframe)) * 100
# #     return missing_count

# # def plot_missing_count_per_row(dataframe, paths):
# #     missing_count = missing_count_per_row(dataframe)
# #     plt.figure(figsize=(12, 6))
# #     sns.histplot(missing_count['missing_percentage'], bins=30, kde=True)
# #     plt.title('Distribution of Missing Values per Row (Percentage)')
# #     plt.xlabel('Percentage of Missing Values per Row')
# #     plt.ylabel('Count of Rows')
# #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_distribution_plot.png'))
# #     plt.show()

# # def calculate_missing_values_correlation(df, target_column):
# #     missing_values_check = df.isnull().sum()
# #     features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
# #     missing_indicators = df[features_with_missing_values].isnull().astype(int)
# #     missing_indicators[target_column] = df[target_column].values
# #     correlation_with_target = missing_indicators.corr()[target_column].drop(target_column, errors='ignore')
# #     return correlation_with_target.sort_values(ascending=False).rename(index=str.strip)

# # def analyze_missing_values(df, paths):
# #     missing_values = missing_values_summary(df)
# #     print("\n--- Top Rows with Missing Values ---")
# #     print(missing_values.head(20))
# #     plot_missing_values(missing_values, paths)
# #     save_missing_values_summary(missing_values, paths['reports']['missing_values_summary'])

# # def analyze_missing_values_correlation(df, paths):
# #     missing_corr = missing_values_correlation(df)
# #     save_missing_values_correlation(missing_corr.to_dict(), paths['reports']['missing_values_correlation'])
# #     plot_missing_values_correlation(missing_corr, paths)

# #     # Calculate correlation with target
# #     missing_values_correlation_with_target = calculate_missing_values_correlation(df, 'HasDetections')
# #     save_json_file(missing_values_correlation_with_target.to_dict(), paths['reports']['missing_values_correlation_with_target'])

# #     correlation_df = missing_values_correlation_with_target.reset_index()
# #     correlation_df.columns = ['Feature', 'Correlation']
# #     plot_barplot(correlation_df, 'Correlation of Missing Values with Target', os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_corr_with_target.png'))
# #     print("\nMissing Values Correlation with Target:\n", correlation_df)

# # def analyze_missing_values_pattern(df, paths):
# #     missing_count = missing_count_per_row(df)
# #     missing_count['percent_of_rows'] = (missing_count['row_count'] / len(df)) * 100
# #     missing_count['percent_of_features_with_missing_values'] = (missing_count['missing_count'] / len(df.columns)) * 100
# #     missing_count = missing_count.sort_values(by='percent_of_features_with_missing_values', ascending=False)
# #     save_missing_count_per_row(missing_count.set_index('missing_count').T.to_dict(), paths['reports']['missing_count_per_row'])

# #     plt.figure(figsize=(12, 6))
# #     sns.barplot(x=missing_count['percent_of_features_with_missing_values'].round(2), y=missing_count['percent_of_rows'].round(2))
# #     plt.title('Distribution of Missing Values per Row')
# #     plt.xlabel('% Missing Features per Row')
# #     plt.ylabel('% of Rows')
# #     plt.xticks(rotation=45)
# #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_distribution_bar_plot.png'))
# #     plt.show()

# #     missing_count = missing_count.rename(columns={
# #         'missing_count': 'missing features per row',
# #         'percent_of_features_with_missing_values': '% missing features per row',
# #         'percent_of_rows': '% of rows'
# #     })
# #     print("\n--- Distribution of Missing Values per Row ---")
# #     print(missing_count[['missing features per row', '% missing features per row', '% of rows']].to_string(index=False))





# # # # src/analysis/missing_values_analysis.py

# # # import os
# # # import pandas as pd
# # # import seaborn as sns
# # # import matplotlib.pyplot as plt
# # # from sklearn.model_selection import train_test_split
# # # from src.utils.common import load_yaml, save_json_file, save_missing_values_summary, save_missing_values_correlation, save_missing_count_per_row
# # # from src.visualization.plot_utils import plot_heatmap, plot_barplot

# # # def missing_values_summary(df):
# # #     missing_values = df.isnull().sum().reset_index()
# # #     missing_values.columns = ['column_name', 'missing_count']
# # #     missing_values = missing_values[missing_values['missing_count'] > 0]
# # #     missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
# # #     missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
# # #     return missing_values

# # # def plot_missing_values(missing_values, paths, top_n=20):
# # #     plt.figure(figsize=(12, 8))
# # #     sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
# # #     plt.title('Top Rows with Missing Values')
# # #     plt.xlabel('Missing Percentage')
# # #     plt.ylabel('Column Name')
# # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
# # #     plt.show()

# # # def high_missing_value_correlation_pairs(corr_matrix, threshold=0.2):
# # #     high_corr_pairs = corr_matrix.stack().reset_index()
# # #     high_corr_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
# # #     high_corr_pairs = high_corr_pairs[high_corr_pairs['Feature1'] != high_corr_pairs['Feature2']]
# # #     high_corr_pairs['abs_corr'] = high_corr_pairs['Correlation'].abs()
# # #     high_corr_pairs = high_corr_pairs[high_corr_pairs['abs_corr'] > threshold]
# # #     high_corr_pairs = high_corr_pairs.sort_values(by='abs_corr', ascending=False).drop(columns='abs_corr')
# # #     return high_corr_pairs

# # # def missing_values_correlation(df):
# # #     return df.isnull().corr()

# # # def calculate_missing_values_correlation(df, target_column):
# # #     missing_values_check = df.isnull().sum()
# # #     features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
# # #     missing_indicators = df[features_with_missing_values].isnull().astype(int)
# # #     missing_indicators[target_column] = df[target_column].values
# # #     correlation_with_target = missing_indicators.corr()[target_column].drop(target_column, errors='ignore')
# # #     return correlation_with_target.sort_values(ascending=False).rename(index=str.strip)

# # # def missing_count_per_row(dataframe):
# # #     missing_count = dataframe.isnull().sum(axis=1).value_counts().reset_index()
# # #     missing_count.columns = ['missing_count', 'row_count']
# # #     missing_count['missing_percentage'] = (missing_count['row_count'] / len(dataframe)) * 100
# # #     return missing_count

# # # def analyze_missing_values(df, paths):
# # #     missing_values = missing_values_summary(df)
# # #     print("\n--- Top Rows with Missing Values ---")
# # #     print(missing_values.head(20))
# # #     plot_missing_values(missing_values, paths)
# # #     save_missing_values_summary(missing_values, paths['reports']['missing_values_summary'])

# # # def analyze_missing_values_correlation(df, paths):
# # #     missing_corr = missing_values_correlation(df)
# # #     save_missing_values_correlation(missing_corr.to_dict(), paths['reports']['missing_values_correlation'])
# # #     plot_heatmap(missing_corr, 'Correlation of Missing Values', os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_correlation_heatmap.png'), annot=False)

# # #     # Calculate correlation with target
# # #     missing_values_correlation_with_target = calculate_missing_values_correlation(df, 'HasDetections')
# # #     save_json_file(missing_values_correlation_with_target.to_dict(), paths['reports']['missing_values_correlation_with_target'])
# # #     correlation_df = missing_values_correlation_with_target.reset_index()
# # #     correlation_df.columns = ['Feature', 'Correlation']
# # #     print("\nMissing Values Correlation with Target:\n", correlation_df)
# # #     plot_barplot(correlation_df, 'Correlation of Missing Values with Target', os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_correlation_with_target.png'))

# # # def analyze_missing_values_pattern(df, paths):
# # #     missing_count = missing_count_per_row(df)
# # #     missing_count['percent_of_rows'] = (missing_count['row_count'] / len(df)) * 100
# # #     missing_count['percent_of_features_with_missing_values'] = (missing_count['missing_count'] / len(df.columns)) * 100
# # #     missing_count = missing_count.sort_values(by='percent_of_features_with_missing_values', ascending=False)
# # #     save_missing_count_per_row(missing_count.set_index('missing_count').T.to_dict(), paths['reports']['missing_count_per_row'])

# # #     plt.figure(figsize=(12, 6))
# # #     sns.barplot(x=missing_count['percent_of_features_with_missing_values'].round(2), y=missing_count['percent_of_rows'].round(2))
# # #     plt.title('Distribution of Missing Values per Row')
# # #     plt.xlabel('% Missing Features per Row')
# # #     plt.ylabel('% of Rows')
# # #     plt.xticks(rotation=45)
# # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_distribution_bar_plot.png'))
# # #     plt.show()

# # #     missing_count = missing_count.rename(columns={
# # #         'missing_count': 'missing features per row',
# # #         'percent_of_features_with_missing_values': '% missing features per row',
# # #         'percent_of_rows': '% of rows'
# # #     })
# # #     print("\n--- Distribution of Missing Values per Row ---")
# # #     print(missing_count[['missing features per row', '% missing features per row', '% of rows']].to_string(index=False))









# # # # # src/analysis/missing_values_analysis.py

# # # # import os
# # # # import pandas as pd
# # # # import seaborn as sns
# # # # import matplotlib.pyplot as plt
# # # # from src.utils.common import load_yaml, save_json_file, save_missing_values_summary, save_missing_values_correlation, save_missing_count_per_row

# # # # def missing_values_summary(df):
# # # #     missing_values = df.isnull().sum().reset_index()
# # # #     missing_values.columns = ['column_name', 'missing_count']
# # # #     missing_values = missing_values[missing_values['missing_count'] > 0]
# # # #     missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
# # # #     missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
# # # #     return missing_values

# # # # def plot_missing_values(missing_values, paths, top_n=20):
# # # #     plt.figure(figsize=(12, 8))
# # # #     sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
# # # #     plt.title('Top Rows with Missing Values')
# # # #     plt.xlabel('Missing Percentage')
# # # #     plt.ylabel('Column Name')
# # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
# # # #     plt.show()

# # # # def high_missing_value_correlation_pairs(corr_matrix, threshold=0.2):
# # # #     high_corr_pairs = corr_matrix.stack().reset_index()
# # # #     high_corr_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
# # # #     high_corr_pairs = high_corr_pairs[high_corr_pairs['Feature1'] != high_corr_pairs['Feature2']]
# # # #     high_corr_pairs['abs_corr'] = high_corr_pairs['Correlation'].abs()
# # # #     high_corr_pairs = high_corr_pairs[high_corr_pairs['abs_corr'] > threshold]
# # # #     high_corr_pairs = high_corr_pairs.sort_values(by='abs_corr', ascending=False).drop(columns='abs_corr')
# # # #     return high_corr_pairs

# # # # def missing_values_correlation(df):
# # # #     return df.isnull().corr()

# # # # def plot_missing_values_correlation(corr_matrix, paths):
# # # #     plt.figure(figsize=(12, 8))
# # # #     sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
# # # #     plt.title('Correlation of Missing Values')
# # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_correlation_heatmap.png'))
# # # #     plt.show()

# # # # def missing_count_per_row(dataframe):
# # # #     missing_count = dataframe.isnull().sum(axis=1).value_counts().reset_index()
# # # #     missing_count.columns = ['missing_count', 'row_count']
# # # #     missing_count['missing_percentage'] = (missing_count['row_count'] / len(dataframe)) * 100
# # # #     return missing_count

# # # # def plot_missing_count_per_row(dataframe, paths):
# # # #     missing_count = missing_count_per_row(dataframe)
# # # #     plt.figure(figsize=(12, 6))
# # # #     sns.histplot(missing_count['missing_percentage'], bins=30, kde=True)
# # # #     plt.title('Distribution of Missing Values per Row (Percentage)')
# # # #     plt.xlabel('Percentage of Missing Values per Row')
# # # #     plt.ylabel('Count of Rows')
# # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_distribution_plot.png'))
# # # #     plt.show()

# # # # def calculate_missing_values_correlation(df, target_column):
# # # #     missing_values_check = df.isnull().sum()
# # # #     features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
# # # #     missing_indicators = df[features_with_missing_values].isnull().astype(int)
# # # #     missing_indicators[target_column] = df[target_column].values
# # # #     correlation_with_target = missing_indicators.corr()[target_column].drop(target_column, errors='ignore')
# # # #     return correlation_with_target.sort_values(ascending=False).rename(index=str.strip)

# # # # def plot_missing_values_correlation_with_target(correlation_df, paths):
# # # #     plt.figure(figsize=(10, 6))
# # # #     sns.barplot(x='Correlation', y='Feature', data=correlation_df, hue='Feature', palette='coolwarm', dodge=False, legend=False)
# # # #     plt.title('Correlation of Missing Values with Target')
# # # #     plt.xlabel('Correlation')
# # # #     plt.ylabel('Feature')
# # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_correlation_with_target.png'))
# # # #     plt.show()

# # # # def analyze_missing_values(df, paths):
# # # #     missing_values = missing_values_summary(df)
# # # #     print("\n--- Top Rows with Missing Values ---")
# # # #     print(missing_values.head(20))
# # # #     plot_missing_values(missing_values, paths)
# # # #     save_missing_values_summary(missing_values, paths['reports']['missing_values_summary'])

# # # # def analyze_missing_values_correlation(df, paths):
# # # #     missing_corr = missing_values_correlation(df)
# # # #     save_missing_values_correlation(missing_corr.to_dict(), paths['reports']['missing_values_correlation'])
# # # #     plot_missing_values_correlation(missing_corr, paths)

# # # #     # Calculate correlation with target
# # # #     missing_values_correlation_with_target = calculate_missing_values_correlation(df, 'HasDetections')
# # # #     save_json_file(missing_values_correlation_with_target.to_dict(), paths['reports']['missing_values_correlation_with_target'])
# # # #     correlation_df = missing_values_correlation_with_target.reset_index()
# # # #     correlation_df.columns = ['Feature', 'Correlation']
# # # #     print("\nMissing Values Correlation with Target:\n", correlation_df)
# # # #     plot_missing_values_correlation_with_target(correlation_df, paths)

# # # # def analyze_missing_values_pattern(df, paths):
# # # #     missing_count = missing_count_per_row(df)
# # # #     missing_count['percent_of_rows'] = (missing_count['row_count'] / len(df)) * 100
# # # #     missing_count['percent_of_features_with_missing_values'] = (missing_count['missing_count'] / len(df.columns)) * 100
# # # #     missing_count = missing_count.sort_values(by='percent_of_features_with_missing_values', ascending=False)
# # # #     save_missing_count_per_row(missing_count.set_index('missing_count').T.to_dict(), paths['reports']['missing_count_per_row'])

# # # #     plt.figure(figsize=(12, 6))
# # # #     sns.barplot(x=missing_count['percent_of_features_with_missing_values'].round(2), y=missing_count['percent_of_rows'].round(2))
# # # #     plt.title('Distribution of Missing Values per Row')
# # # #     plt.xlabel('% Missing Features per Row')
# # # #     plt.ylabel('% of Rows')
# # # #     plt.xticks(rotation=45)
# # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_distribution_bar_plot.png'))
# # # #     plt.show()

# # # #     missing_count = missing_count.rename(columns={
# # # #         'missing_count': 'missing features per row',
# # # #         'percent_of_features_with_missing_values': '% missing features per row',
# # # #         'percent_of_rows': '% of rows'
# # # #     })
# # # #     print("\n--- Distribution of Missing Values per Row ---")
# # # #     print(missing_count[['missing features per row', '% missing features per row', '% of rows']].to_string(index=False))










# # # # # import os
# # # # # import pandas as pd
# # # # # import seaborn as sns
# # # # # import matplotlib.pyplot as plt
# # # # # from sklearn.model_selection import train_test_split
# # # # # from src.utils.common import load_yaml, save_json_file, save_missing_values_summary, save_missing_values_correlation, save_missing_count_per_row, save_feature_importance
# # # # # from src.model.missing_values_training import prepare_data

# # # # # def missing_values_summary(df):
# # # # #     missing_values = df.isnull().sum().reset_index()
# # # # #     missing_values.columns = ['column_name', 'missing_count']
# # # # #     missing_values = missing_values[missing_values['missing_count'] > 0]
# # # # #     missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
# # # # #     missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
# # # # #     return missing_values

# # # # # def plot_missing_values(missing_values, paths, top_n=20):
# # # # #     plt.figure(figsize=(12, 8))
# # # # #     sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
# # # # #     plt.title('Top Rows with Missing Values')
# # # # #     plt.xlabel('Missing Percentage')
# # # # #     plt.ylabel('Column Name')
# # # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
# # # # #     plt.show()

# # # # # def high_missing_value_correlation_pairs(corr_matrix, threshold=0.2):
# # # # #     high_corr_pairs = corr_matrix.stack().reset_index()
# # # # #     high_corr_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
# # # # #     high_corr_pairs = high_corr_pairs[high_corr_pairs['Feature1'] != high_corr_pairs['Feature2']]
# # # # #     high_corr_pairs['abs_corr'] = high_corr_pairs['Correlation'].abs()
# # # # #     high_corr_pairs = high_corr_pairs[high_corr_pairs['abs_corr'] > threshold]
# # # # #     high_corr_pairs = high_corr_pairs.sort_values(by='abs_corr', ascending=False).drop(columns='abs_corr')
# # # # #     return high_corr_pairs

# # # # # def missing_values_correlation(df):
# # # # #     return df.isnull().corr()

# # # # # def plot_missing_values_correlation(corr_matrix, paths):
# # # # #     plt.figure(figsize=(12, 8))
# # # # #     sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
# # # # #     plt.title('Correlation of Missing Values')
# # # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_correlation_heatmap.png'))
# # # # #     plt.show()

# # # # # def missing_count_per_row(dataframe):
# # # # #     missing_count = dataframe.isnull().sum(axis=1).value_counts().reset_index()
# # # # #     missing_count.columns = ['missing_count', 'row_count']
# # # # #     missing_count['missing_percentage'] = (missing_count['row_count'] / len(dataframe)) * 100
# # # # #     return missing_count

# # # # # def plot_missing_count_per_row(dataframe, paths):
# # # # #     missing_count = missing_count_per_row(dataframe)
# # # # #     plt.figure(figsize=(12, 6))
# # # # #     sns.histplot(missing_count['missing_percentage'], bins=30, kde=True)
# # # # #     plt.title('Distribution of Missing Values per Row (Percentage)')
# # # # #     plt.xlabel('Percentage of Missing Values per Row')
# # # # #     plt.ylabel('Count of Rows')
# # # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_distribution_plot.png'))
# # # # #     plt.show()

# # # # # def calculate_missing_values_correlation(df, target_column):
# # # # #     missing_values_check = df.isnull().sum()
# # # # #     features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
# # # # #     missing_indicators = df[features_with_missing_values].isnull().astype(int)
# # # # #     missing_indicators[target_column] = df[target_column].values
# # # # #     correlation_with_target = missing_indicators.corr()[target_column].drop(target_column, errors='ignore')
# # # # #     return correlation_with_target.sort_values(ascending=False).rename(index=str.strip)

# # # # # def prepare_data_and_split(df, paths):
# # # # #     feature_metadata = load_yaml(paths['config']['feature_metadata'])
# # # # #     preprocessor, numeric_features, categorical_features = prepare_data(df, feature_metadata)
# # # # #     X = df.drop(columns=['HasDetections'])
# # # # #     y = df['HasDetections']
# # # # #     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# # # # #     return X_train, X_test, y_train, y_test, numeric_features, categorical_features, feature_metadata

# # # # # def analyze_missing_values(df, paths):
# # # # #     missing_values = missing_values_summary(df)
# # # # #     print("\n--- Top Rows with Missing Values ---")
# # # # #     print(missing_values.head(20))
# # # # #     plot_missing_values(missing_values, paths)
# # # # #     save_missing_values_summary(missing_values, paths['reports']['missing_values_summary'])

# # # # # def analyze_missing_values_correlation(df, paths):
# # # # #     missing_corr = missing_values_correlation(df)
# # # # #     save_missing_values_correlation(missing_corr.to_dict(), paths['reports']['missing_values_correlation'])
# # # # #     plot_missing_values_correlation(missing_corr, paths)

# # # # #     # Calculate correlation with target
# # # # #     missing_values_correlation_with_target = calculate_missing_values_correlation(df, 'HasDetections')
# # # # #     save_json_file(missing_values_correlation_with_target.to_dict(), paths['reports']['missing_values_correlation_with_target'])

# # # # # def analyze_missing_values_pattern(df, paths):
# # # # #     missing_count = missing_count_per_row(df)
# # # # #     missing_count['percent_of_rows'] = (missing_count['row_count'] / len(df)) * 100
# # # # #     missing_count['percent_of_features_with_missing_values'] = (missing_count['missing_count'] / len(df.columns)) * 100
# # # # #     missing_count = missing_count.sort_values(by='percent_of_features_with_missing_values', ascending=False)
# # # # #     save_missing_count_per_row(missing_count.set_index('missing_count').T.to_dict(), paths['reports']['missing_count_per_row'])

# # # # #     plt.figure(figsize=(12, 6))
# # # # #     sns.barplot(x=missing_count['percent_of_features_with_missing_values'].round(2), y=missing_count['percent_of_rows'].round(2))
# # # # #     plt.title('Distribution of Missing Values per Row')
# # # # #     plt.xlabel('% Missing Features per Row')
# # # # #     plt.ylabel('% of Rows')
# # # # #     plt.xticks(rotation=45)
# # # # #     plt.savefig(os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_distribution_bar_plot.png'))
# # # # #     plt.show()

# # # # #     missing_count = missing_count.rename(columns={
# # # # #         'missing_count': 'missing features per row',
# # # # #         'percent_of_features_with_missing_values': '% missing features per row',
# # # # #         'percent_of_rows': '% of rows'
# # # # #     })
# # # # #     print("\n--- Distribution of Missing Values per Row ---")
# # # # #     print(missing_count[['missing features per row', '% missing features per row', '% of rows']].to_string(index=False))


