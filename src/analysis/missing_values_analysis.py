# src/analysis/missing_values_analysis.py

import pandas as pd

def calculate_missing_values(df):
    """
    Calculates the number of missing values for each feature in the DataFrame.

    Parameters:
    df (pd.DataFrame): DataFrame to calculate missing values for.

    Returns:
    tuple: A tuple containing:
        - missing_values_df (pd.DataFrame): DataFrame with features and their missing values count.
        - features_with_missing_values (list): List of features with missing values.
    """
    missing_values_check = df.isnull().sum()
    missing_values_df = missing_values_check.reset_index()
    missing_values_df.columns = ['Feature', 'MissingValues']
    missing_values_df = missing_values_df.sort_values(by='MissingValues', ascending=False).reset_index(drop=True)
    features_with_missing_values = missing_values_check[missing_values_check > 0].index.tolist()
    return missing_values_df, features_with_missing_values

def calculate_correlation_with_target(df, target_column):
    """
    Calculates the correlation of each feature with the target variable.

    Parameters:
    df (pd.DataFrame): DataFrame to calculate correlations for.
    target_column (str): The target variable column name.

    Returns:
    pd.Series: Series with feature correlations with the target variable.
    """
    correlation_with_target = df.corr()[target_column].drop(target_column, errors='ignore')
    correlation_with_target = correlation_with_target.sort_values(ascending=False)
    return correlation_with_target

def calculate_pairwise_correlations(df: pd.DataFrame, threshold: float = 0.2) -> tuple:
    """
    Calculates pairwise correlations between features in the DataFrame.

    Parameters:
    df (pd.DataFrame): DataFrame to calculate pairwise correlations for.
    threshold (float): Correlation threshold to filter high correlations. Default is 0.2.

    Returns:
    tuple: A tuple containing:
        - high_correlation_pairs (pd.DataFrame): DataFrame with high correlation feature pairs.
        - pairwise_correlation (pd.DataFrame): Pairwise correlation matrix.
    """
    pairwise_correlation = df.corr()
    high_correlation_pairs = pairwise_correlation.stack().reset_index()
    high_correlation_pairs.columns = ['Feature1', 'Feature2', 'Correlation']
    high_correlation_pairs = high_correlation_pairs[
        (high_correlation_pairs['Feature1'] != high_correlation_pairs['Feature2']) &
        ((high_correlation_pairs['Correlation'] > threshold) | 
         (high_correlation_pairs['Correlation'] < -threshold))
    ]
    high_correlation_pairs['Pair'] = high_correlation_pairs.apply(
        lambda row: tuple(sorted([row['Feature1'], row['Feature2']])), axis=1
    )
    high_correlation_pairs = high_correlation_pairs.drop_duplicates(subset=['Pair']).drop(columns=['Pair'])
    high_correlation_pairs = high_correlation_pairs.sort_values(by=['Correlation'], ascending=False).reset_index(drop=True)
    
    return high_correlation_pairs, pairwise_correlation


def missing_values_summary(df):
    """
    Provides a summary of missing values in the DataFrame.

    Parameters:
    df (pd.DataFrame): DataFrame to summarize missing values for.

    Returns:
    pd.DataFrame: DataFrame with columns, missing count, and missing percentage.
    """
    missing_values = df.isnull().sum().reset_index()
    missing_values.columns = ['column_name', 'missing_count']
    missing_values = missing_values[missing_values['missing_count'] > 0]
    missing_values['missing_percentage'] = (missing_values['missing_count'] / len(df)) * 100
    missing_values = missing_values.sort_values(by='missing_percentage', ascending=False)
    return missing_values

def plot_missing_values_per_row(df):
    """
    Calculates the percentage of missing values per row in the DataFrame.

    Parameters:
    df (pd.DataFrame): DataFrame to calculate missing values per row for.

    Returns:
    pd.Series: Series with percentage of missing values per row.
    """
    missing_per_row = df.isnull().sum(axis=1) / df.shape[1] * 100
    return missing_per_row

def missing_features_per_row_distribution(missing_per_row, df):
    """
    Calculates the distribution of missing features per row.

    Parameters:
    missing_per_row (pd.Series): Series with percentage of missing values per row.
    df (pd.DataFrame): DataFrame to calculate the distribution for.

    Returns:
    pd.DataFrame: DataFrame with distribution of missing features per row.
    """
    distribution = missing_per_row.value_counts(normalize=True).reset_index()
    distribution.columns = ['percent_missing_features_per_row', 'percent_of_rows']
    distribution['number_of_rows'] = distribution['percent_of_rows'] * len(missing_per_row)
    distribution['percent_of_rows'] = distribution['percent_of_rows'] * 100
    distribution['missing_features_per_row'] = (distribution['percent_missing_features_per_row'] / 100 * df.shape[1]).round(0).astype(int)
    distribution = distribution[['missing_features_per_row', 'percent_missing_features_per_row', 'percent_of_rows', 'number_of_rows']]
    distribution = distribution.sort_values(by='percent_missing_features_per_row', ascending=False)
    return distribution


def missing_values_per_row_summary(missing_per_row):
    """
    Provides a summary of missing values per row.

    Parameters:
    missing_per_row (pd.Series): Series with percentage of missing values per row.

    Returns:
    pd.DataFrame: DataFrame with summary statistics for missing values per row.
    """
    summary = missing_per_row.describe(percentiles=[.25, .5, .75, .9, .95, .99])
    summary_df = summary.reset_index()
    summary_df.columns = ['Metric', 'Value']
    return summary_df


def categorize_missing_features(distribution):
    """
    Categorizes the missing features into Low, Medium, and High categories.

    Parameters:
    distribution (pd.DataFrame): DataFrame with distribution of missing features per row.

    Returns:
    pd.DataFrame: DataFrame with categorized missing features.
    """
    def categorize(row):
        if row['percent_missing_features_per_row'] < 10:
            return 'Low'
        elif 10 <= row['percent_missing_features_per_row'] < 50:
            return 'Medium'
        else:
            return 'High'
    
    distribution['category'] = distribution.apply(categorize, axis=1)
    summary = distribution.groupby('category').agg({
        'number_of_rows': 'sum',
        'percent_of_rows': 'sum'
    }).reset_index()
    summary = summary.sort_values(by='percent_of_rows', ascending=False)
    return summary


def calculate_missing_values_and_correlations(train_sample):
    """
    Calculates missing values and their correlations with the target variable.

    Parameters:
    train_sample (pd.DataFrame): Training sample DataFrame.

    Returns:
    tuple: A tuple containing:
        - missing_values_df (pd.DataFrame): DataFrame with features and their missing values count.
        - missing_values_correlation_with_target (pd.Series): Series with missing values correlation with the target.
        - numeric_columns (pd.Index): Index of numeric columns in the DataFrame.
        - feature_correlation_with_target (pd.Series): Series with feature correlation with the target.
        - features_with_missing_values (list): List of features with missing values.
    """
    missing_values_df, features_with_missing_values = calculate_missing_values(train_sample)
    missing_indicators = train_sample[features_with_missing_values].isnull().astype(int)
    missing_indicators['HasDetections'] = train_sample['HasDetections'].values
    missing_values_correlation_with_target = calculate_correlation_with_target(missing_indicators, 'HasDetections')
    numeric_columns = train_sample.select_dtypes(include=['number']).columns
    feature_correlation_with_target = calculate_correlation_with_target(train_sample[numeric_columns], 'HasDetections')
    return missing_values_df, missing_values_correlation_with_target, numeric_columns, feature_correlation_with_target, features_with_missing_values


def calculate_pairwise_correlations_for_features(missing_indicators, train_sample, numeric_columns):
    """
    Calculates pairwise correlations for features with missing values and numeric features.

    Parameters:
    missing_indicators (pd.DataFrame): DataFrame with missing indicators.
    train_sample (pd.DataFrame): Training sample DataFrame.
    numeric_columns (pd.Index): Index of numeric columns in the DataFrame.

    Returns:
    tuple: A tuple containing:
        - high_missing_value_pairs (pd.DataFrame): DataFrame with high correlation pairs of missing values.
        - missing_values_pairwise_correlation (pd.DataFrame): Pairwise correlation matrix of missing values.
        - high_feature_pairs (pd.DataFrame): DataFrame with high correlation pairs of features.
        - feature_pairwise_correlation (pd.DataFrame): Pairwise correlation matrix of features.
    """
    high_missing_value_pairs, missing_values_pairwise_correlation = calculate_pairwise_correlations(missing_indicators)
    high_feature_pairs, feature_pairwise_correlation = calculate_pairwise_correlations(train_sample[numeric_columns])
    return high_missing_value_pairs, missing_values_pairwise_correlation, high_feature_pairs, feature_pairwise_correlation


def calculate_missing_values_per_row(train_sample):
    """
    Calculates missing values per row and their distribution.

    Parameters:
    train_sample (pd.DataFrame): Training sample DataFrame.

    Returns:
    tuple: A tuple containing:
        - missing_per_row (pd.Series): Series with percentage of missing values per row.
        - missing_values_row_summary (pd.DataFrame): DataFrame with summary statistics for missing values per row.
        - missing_features_distribution (pd.DataFrame): DataFrame with distribution of missing features per row.
    """
    missing_per_row = plot_missing_values_per_row(train_sample)
    missing_values_row_summary = missing_values_per_row_summary(missing_per_row)
    missing_features_distribution = missing_features_per_row_distribution(missing_per_row, train_sample)
    return missing_per_row, missing_values_row_summary, missing_features_distribution


