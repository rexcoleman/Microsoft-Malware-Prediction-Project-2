# src/validation/validate_metadata_input.py

import os
import logging
from jsonschema import validate, ValidationError
from src.utils.file_operations import load_json_file
from src.utils.json_utils import clean_special_values, convert_to_json_compatible

def validate_metadata_input(json_path: str, schema_path: str) -> None:
    """
    Validate a JSON file against a JSON schema to ensure consistency.

    Parameters:
    json_path (str): Path to the JSON file to validate.
    schema_path (str): Path to the JSON schema file.

    Raises:
    ValidationError: If the JSON data does not conform to the schema.
    """
    json_data = load_json_file(json_path)
    schema = load_json_file(schema_path)
    
    # Preprocess the JSON data before validation
    json_data = clean_special_values(json_data)
    json_data = convert_to_json_compatible(json_data)
    
    try:
        validate(instance=json_data, schema=schema)
        logging.info(f"{json_path} is consistent with the schema.")
    except ValidationError as e:
        logging.error(f"{json_path} is not consistent with the schema: {e}")
        raise

if __name__ == "__main__":
    from src.config_loader import load_paths

    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    # Load paths from the config
    paths = load_paths('config/paths.yaml')
    
    # Example: Validate stat_summary.json
    stat_summary_path = os.path.join(paths['reports']['analysis_results'], 'stat_summary.json')
    full_schema_path = paths['config']['schemas']['feature_metadata_complete_schema_json']
    validate_metadata_input(stat_summary_path, full_schema_path)
    
    # Example: Validate data_overview.json
    data_overview_path = os.path.join(paths['reports']['analysis_results'], 'data_overview.json')
    validate_metadata_input(data_overview_path, full_schema_path)
