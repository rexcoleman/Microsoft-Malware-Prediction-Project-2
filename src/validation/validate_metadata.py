# src/validation/validate_metadata.py

import os
import json
import logging
from jsonschema import validate, ValidationError
from src.utils.file_operations import load_json_file

def validate_metadata(metadata_path, schema_path):
    """
    Validate metadata against a JSON schema.

    Parameters:
    metadata_path (str): Path to the metadata JSON file.
    schema_path (str): Path to the JSON schema file.

    Raises:
    ValidationError: If the metadata does not conform to the schema.
    """
    metadata = load_json_file(metadata_path)
    schema = load_json_file(schema_path)
    
    try:
        validate(instance=metadata, schema=schema)
        logging.info("Metadata is consistent with the JSON schema.")
    except ValidationError as e:
        logging.error(f"Metadata is not consistent with the JSON schema: {e}")
        raise

def validate_metadata_against_subschema(metadata_path, sub_schema_path, attribute_path):
    """
    Validate that the metadata section is consistent with the corresponding sub-schema.

    Parameters:
    metadata_path (str): Path to the metadata JSON file.
    sub_schema_path (str): Path to the sub-schema JSON file.
    attribute_path (str): Dot-separated path to the attribute in the metadata to compare with the sub-schema.
    """
    metadata = load_json_file(metadata_path)
    sub_schema = load_json_file(sub_schema_path)
    
    # Traverse the metadata to find the corresponding section
    attribute_parts = attribute_path.split('.')
    metadata_section = metadata
    for part in attribute_parts:
        logging.debug(f"Current part: {part}")
        logging.debug(f"Current metadata section keys: {metadata_section.keys()}")
        if part in metadata_section:
            metadata_section = metadata_section[part]
        else:
            raise KeyError(f"{part} not found in the current metadata section: {metadata_section.keys()}")

    logging.debug(f"Validating section: {metadata_section} against sub-schema: {sub_schema}")
    validate(instance=metadata_section, schema=sub_schema)
    logging.info("Metadata is consistent with the sub-schema.")

if __name__ == "__main__":
    from src.config_loader import load_paths

    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    project_root = find_project_root()
    os.chdir(project_root)
    
    paths = load_paths('config/paths.yaml')

    metadata_path = paths['config']['feature_metadata']
    full_schema_path = paths['config']['schemas']['feature_metadata_complete_schema_json']
    sub_schema_path = paths['config']['schemas']['missing_values_schema']
    
    validate_metadata(metadata_path, full_schema_path)
    validate_metadata_against_subschema(metadata_path, sub_schema_path, 'features.MachineIdentifier.missing_values')
