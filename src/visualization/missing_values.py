# src/visualization/missing_values.py

import os
import logging
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from typing import Dict, Optional, Union
import pandas as pd

from src.utils.file_operations import save_json_file
from src.utils.json_pipeline import save_json_with_pipeline
from src.analysis.missing_values_analysis import categorize_missing_features, missing_values_summary
from src.visualization.plot_utils import save_figure, plot_heatmap, plot_correlation, plot_missing_values

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def display_results(paths: Dict[str, Union[str, Dict[str, str]]], 
                    train_sample: pd.DataFrame, 
                    feature_correlation_with_target: pd.Series, 
                    missing_values_correlation_with_target: pd.Series, 
                    high_feature_pairs: pd.DataFrame, 
                    feature_pairwise_correlation: pd.DataFrame, 
                    high_missing_value_pairs: pd.DataFrame, 
                    missing_values_pairwise_correlation: pd.DataFrame, 
                    missing_features_distribution: pd.Series, 
                    missing_values_row_summary: pd.Series) -> None:
    """
    Display and log results for missing value analysis.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    train_sample (pd.DataFrame): Training sample DataFrame.
    feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
    missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
    high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
    feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
    high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
    missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
    missing_features_distribution (pd.Series): Distribution of missing features.
    missing_values_row_summary (pd.Series): Summary of missing values per row.
    """
    try:
        log_missing_values_summary(paths, train_sample)
        log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target)
        log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
        log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
    except Exception as e:
        logging.error(f"An error occurred while displaying results: {e}", exc_info=True)


def log_missing_values_summary(paths: Dict[str, Union[str, Dict[str, str]]], train_sample: pd.DataFrame) -> None:
    """
    Log and plot the missing values summary.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    train_sample (pd.DataFrame): Training sample DataFrame.
    """
    try:
        logging.info("\n1) ==== Missing Values ====")
        missing_values = missing_values_summary(train_sample)
        plot_missing_values(missing_values, save_path=os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
        logging.info("\nMissing Values Summary:\n%s", missing_values.to_string(index=False))
    except Exception as e:
        logging.error(f"An error occurred while logging missing values summary: {e}", exc_info=True)


def log_target_value_correlation(paths: Dict[str, Union[str, Dict[str, str]]], 
                                 feature_correlation_with_target: pd.Series, 
                                 missing_values_correlation_with_target: pd.Series) -> None:
    """
    Log and plot the correlation between features, missing values, and the target variable.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
    missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
    """
    try:
        logging.info("\n2) ==== Target Value (HasDetections) Correlation ====")
        plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target)
    except Exception as e:
        logging.error(f"An error occurred while logging target value correlation: {e}", exc_info=True)


def log_pair_correlations(paths: Dict[str, Union[str, Dict[str, str]]], 
                          high_feature_pairs: pd.DataFrame, 
                          feature_pairwise_correlation: pd.DataFrame, 
                          high_missing_value_pairs: pd.DataFrame, 
                          missing_values_pairwise_correlation: pd.DataFrame) -> None:
    """
    Log and plot the pair correlations for features and missing values.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
    feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
    high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
    missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
    """
    try:
        logging.info("\n3) ==== Pair Correlations ====")
        plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
    except Exception as e:
        logging.error(f"An error occurred while logging pair correlations: {e}", exc_info=True)


def log_missing_values_per_row(paths: Dict[str, Union[str, Dict[str, str]]], 
                               missing_features_distribution: pd.Series, 
                               missing_values_row_summary: pd.Series) -> None:
    """
    Log and plot the missing values per row.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    missing_features_distribution (pd.Series): Distribution of missing features.
    missing_values_row_summary (pd.Series): Summary of missing values per row.
    """
    try:
        logging.info("\n4) ==== Missing Values per Row ====")
        plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
    except Exception as e:
        logging.error(f"An error occurred while logging missing values per row: {e}", exc_info=True)


def plot_and_save_correlations(paths: Dict[str, Union[str, Dict[str, str]]], 
                               feature_correlation_with_target: pd.Series, 
                               missing_values_correlation_with_target: pd.Series) -> None:
    """
    Plot and save the feature and missing values correlations with the target variable.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
    missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
    """
    try:
        feature_corr_df = process_correlation(feature_correlation_with_target, 'Feature Correlation with Target Variable')
        save_plot(feature_corr_df, 'Feature Correlation with Target Variable', os.path.join(paths['reports']['figures']['missing_values'], 'feature_correlation_with_target.png'))

        missing_values_corr_df = process_correlation(missing_values_correlation_with_target, 'Missing Values Correlation with Target Variable')
        save_plot(missing_values_corr_df, 'Missing Values Correlation with Target Variable', os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_correlation_with_target.png'))

        missing_value_corr_with_target = {
            "features": {
                feature: {
                    "correlations": {
                        "missing_value_correlation_with_target": corr
                    }
                }
                for feature, corr in missing_values_correlation_with_target.items()
            }
        }

        save_json_with_pipeline(missing_value_corr_with_target, os.path.join(paths['reports']['analysis_results'], 'missing_values_correlations_with_target_variable.json'))
    except Exception as e:
        logging.error(f"An error occurred in plot_and_save_correlations: {e}", exc_info=True)


def process_correlation(correlation_series: pd.Series, title: str) -> pd.DataFrame:
    """
    Process the correlation series and return a DataFrame.

    Parameters:
    correlation_series (pd.Series): Series containing correlations.
    title (str): Title for the plot.

    Returns:
    pd.DataFrame: DataFrame containing processed correlation data.
    """
    try:
        correlation_df = correlation_series.reset_index()
        correlation_df.columns = ['Feature', 'Correlation']
        logging.info(f"\n{title}:\n{correlation_df.to_string(index=False)}")
        return correlation_df
    except Exception as e:
        logging.error(f"An error occurred while processing correlation {title}: {e}", exc_info=True)
        return pd.DataFrame()


def save_plot(correlation_df: pd.DataFrame, title: str, save_path: str) -> None:
    """
    Save the correlation plot to a file.

    Parameters:
    correlation_df (pd.DataFrame): DataFrame containing correlation data.
    title (str): Title for the plot.
    save_path (str): Path to save the plot.
    """
    try:
        plot_correlation(correlation_df, title, save_path=save_path)
    except Exception as e:
        logging.error(f"An error occurred while saving plot {title}: {e}", exc_info=True)




def process_and_save_pair_correlations(save_path: str, 
                                       high_pairs_df: pd.DataFrame, 
                                       pairwise_correlation_df: pd.DataFrame, 
                                       title: str, 
                                       print_msg: str, 
                                       json_save_path: Optional[str] = None) -> None:
    """
    Process and save pair correlations.

    Parameters:
    save_path (str): Path to save the heatmap plot.
    high_pairs_df (pd.DataFrame): DataFrame of high pairs with strong correlations.
    pairwise_correlation_df (pd.DataFrame): Correlation matrix.
    title: (str): Title for the plot.
    print_msg (str): Message to print with high pairs data.
    json_save_path (Optional[str]): Path to save the JSON file of high pairs data.
    """
    try:
        # Plot the heatmap without taking absolute values
        plot_heatmap(pairwise_correlation_df, title, save_path=save_path)
        
        # Explicitly ensure that we are not taking absolute values for display
        high_pairs_df_sorted = high_pairs_df.sort_values(by=['Correlation'], ascending=False).reset_index(drop=True)
        
        # Print the sorted DataFrame to verify negative correlations are intact
        logging.info(f"\n{print_msg}\n{high_pairs_df_sorted.to_string(index=False)}")
        print("Before saving to JSON or logging:")
        print(high_pairs_df_sorted)

        if json_save_path:
            missing_value_corr_with_other_features = {}

            # Build the nested dictionary structure for JSON output
            for _, row in high_pairs_df_sorted.iterrows():
                feature1 = row['Feature1']
                feature2 = row['Feature2']
                correlation = row['Correlation']
                
                # Initialize the nested structure if it doesn't exist
                if feature1 not in missing_value_corr_with_other_features:
                    missing_value_corr_with_other_features[feature1] = {"correlations": {"missing_value_correlation_with_other_features": {}}}
                
                if feature2 not in missing_value_corr_with_other_features:
                    missing_value_corr_with_other_features[feature2] = {"correlations": {"missing_value_correlation_with_other_features": {}}}
                
                # Add correlations for both features, including negative correlations
                missing_value_corr_with_other_features[feature1]["correlations"]["missing_value_correlation_with_other_features"][feature2] = correlation
                missing_value_corr_with_other_features[feature2]["correlations"]["missing_value_correlation_with_other_features"][feature1] = correlation

            # Format the dictionary for saving
            formatted_output = {"features": missing_value_corr_with_other_features}

            # Save the output as a JSON file
            save_json_with_pipeline(formatted_output, json_save_path)
            logging.info(f"JSON saved to {json_save_path}")
    except Exception as e:
        logging.error(f"An error occurred while processing and saving pair correlations {title}: {e}", exc_info=True)




# def process_and_save_pair_correlations(save_path: str, 
#                                        high_pairs_df: pd.DataFrame, 
#                                        pairwise_correlation_df: pd.DataFrame, 
#                                        title: str, 
#                                        print_msg: str, 
#                                        json_save_path: Optional[str] = None) -> None:
#     """
#     Process and save pair correlations.

#     Parameters:
#     save_path (str): Path to save the heatmap plot.
#     high_pairs_df (pd.DataFrame): DataFrame of high pairs with strong correlations.
#     pairwise_correlation_df (pd.DataFrame): Correlation matrix.
#     title: (str): Title for the plot.
#     print_msg (str): Message to print with high pairs data.
#     json_save_path (Optional[str]): Path to save the JSON file of high pairs data.
#     """
#     try:
#         # Plot the heatmap without taking absolute values
#         plot_heatmap(pairwise_correlation_df, title, save_path=save_path)
#         logging.info(f"\n{print_msg}\n{high_pairs_df.to_string(index=False)}")
        
#         # Print high_pairs_df for debugging
#         print("Before saving to JSON or logging:")
#         print(high_pairs_df)

#         if json_save_path:
#             missing_value_corr_with_other_features = {}

#             # Build the nested dictionary structure for JSON output
#             for _, row in high_pairs_df.iterrows():
#                 feature1 = row['Feature1']
#                 feature2 = row['Feature2']
#                 correlation = row['Correlation']
                
#                 # Initialize the nested structure if it doesn't exist
#                 if feature1 not in missing_value_corr_with_other_features:
#                     missing_value_corr_with_other_features[feature1] = {"correlations": {"missing_value_correlation_with_other_features": {}}}
                
#                 if feature2 not in missing_value_corr_with_other_features:
#                     missing_value_corr_with_other_features[feature2] = {"correlations": {"missing_value_correlation_with_other_features": {}}}
                
#                 # Add correlations for both features, including negative correlations
#                 missing_value_corr_with_other_features[feature1]["correlations"]["missing_value_correlation_with_other_features"][feature2] = correlation
#                 missing_value_corr_with_other_features[feature2]["correlations"]["missing_value_correlation_with_other_features"][feature1] = correlation

#             # Format the dictionary for saving
#             formatted_output = {"features": missing_value_corr_with_other_features}

#             # Save the output as a JSON file
#             save_json_with_pipeline(formatted_output, json_save_path)
#             logging.info(f"JSON saved to {json_save_path}")
#     except Exception as e:
#         logging.error(f"An error occurred while processing and saving pair correlations {title}: {e}", exc_info=True)





def plot_and_save_pair_correlations(paths: Dict[str, Union[str, Dict[str, str]]], 
                                    high_feature_pairs: pd.DataFrame, 
                                    feature_pairwise_correlation: pd.DataFrame, 
                                    high_missing_value_pairs: pd.DataFrame, 
                                    missing_values_pairwise_correlation: pd.DataFrame) -> None:
    """
    Plot and save the pair correlations for features and missing values.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
    feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
    high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
    missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
    """
    try:
        process_and_save_pair_correlations(
            os.path.join(paths['reports']['figures']['missing_values'], 'feature_pair_correlations_heatmap.png'),
            high_feature_pairs,
            feature_pairwise_correlation,
            'Feature Pair Correlations',
            'High Feature Pair Correlations (absolute value > 0.2 or < -0.2):\n'
        )

        process_and_save_pair_correlations(
            os.path.join(paths['reports']['figures']['missing_values'], 'missing_value_pair_correlations_heatmap.png'),
            high_missing_value_pairs,
            missing_values_pairwise_correlation,
            'Missing Value Pair Correlations',
            'High Missing Value Pair Correlations (absolute value > 0.2 or < -0.2):\n',
            os.path.join(paths['reports']['analysis_results'], 'missing_value_pair_correlations.json')
        )
    except Exception as e:
        logging.error(f"An error occurred in plot_and_save_pair_correlations: {e}", exc_info=True)


def plot_and_save_missing_values_per_row(paths: Dict[str, Union[str, Dict[str, str]]], 
                                         missing_features_distribution: pd.DataFrame, 
                                         missing_values_row_summary: pd.DataFrame) -> None:
    """
    Plot and save the distribution of missing values per row.

    Parameters:
    paths (Dict[str, Union[str, Dict[str, str]]]): Dictionary containing paths for saving figures and results.
    missing_features_distribution (pd.DataFrame): DataFrame of missing features distribution per row.
    missing_values_row_summary (pd.DataFrame): Summary of missing values per row.
    """
    try:
        plt.figure(figsize=(10, 6))
        sns.barplot(x='percent_missing_features_per_row', y='percent_of_rows', data=missing_features_distribution)
        plt.title('% of Rows by % Missing Features Per Row')
        plt.xlabel('% Missing Features Per Row')
        plt.ylabel('% of Rows')
        plt.xticks(rotation=90)
        plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
        plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):.0f}'))
        save_figure(plt, os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_per_row_distribution.png'))
        plt.show()

        logging.info(f"\nMissing Values Per Row Summary:\n{missing_values_row_summary.to_string(index=False)}")
        logging.info(f"\nMissing Features Per Row Distribution:\n{missing_features_distribution.to_string(index=False)}")
        
        missing_features_summary = categorize_missing_features(missing_features_distribution)
        logging.info(f"\nSummary of Missing Features Per Row Categories:\n{missing_features_summary.to_string(index=False)}")
    except Exception as e:
        logging.error(f"An error occurred in plot_and_save_missing_values_per_row: {e}", exc_info=True)













        
# def process_and_save_pair_correlations(save_path: str, 
#                                        high_pairs_df: pd.DataFrame, 
#                                        pairwise_correlation_df: pd.DataFrame, 
#                                        title: str, 
#                                        print_msg: str, 
#                                        json_save_path: Optional[str] = None) -> None:
#     """
#     Process and save pair correlations.

#     Parameters:
#     save_path (str): Path to save the heatmap plot.
#     high_pairs_df (pd.DataFrame): DataFrame of high pairs with strong correlations.
#     pairwise_correlation_df (pd.DataFrame): Correlation matrix.
#     title (str): Title for the plot.
#     print_msg (str): Message to print with high pairs data.
#     json_save_path (Optional[str]): Path to save the JSON file of high pairs data.
#     """
#     try:
#         plot_heatmap(pairwise_correlation_df, title, save_path=save_path)
#         logging.info(f"\n{print_msg}\n{high_pairs_df.to_string(index=False)}")
        
#         if json_save_path:
#             missing_value_corr_with_other_features = {
#                 "features": {
#                     feature: {
#                         "correlations": {
#                             "missing_value_correlation_with_other_features": high_pairs_df.set_index('Feature').loc[feature].to_dict()
#                         }
#                     }
#                     for feature in high_pairs_df['Feature'].unique()
#                 }
#             }

#             save_json_with_pipeline(missing_value_corr_with_other_features, json_save_path)
#     except Exception as e:
#         logging.error(f"An error occurred while processing and saving pair correlations {title}: {e}", exc_info=True)



# # # src/visualization/missing_values.py

# import os
# import logging
# import seaborn as sns
# import matplotlib.pyplot as plt
# from matplotlib.ticker import MaxNLocator
# from src.utils.json_pipeline import save_json_with_pipeline
# from src.analysis.missing_values_analysis import categorize_missing_features, missing_values_summary
# from src.visualization.plot_utils import save_figure, plot_heatmap, plot_correlation, plot_missing_values

# def display_results(paths, train_sample, feature_correlation_with_target, missing_values_correlation_with_target, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation, missing_features_distribution, missing_values_row_summary):
#     try:
#         log_missing_values_summary(paths, train_sample)
#         log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target)
#         log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
#         log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
#     except Exception as e:
#         logging.error(f"An error occurred while displaying results: {e}", exc_info=True)

# def log_missing_values_summary(paths, train_sample):
#     try:
#         logging.info("\n1) ==== Missing Values ====")
#         missing_values = missing_values_summary(train_sample)
#         plot_missing_values(missing_values, save_path=os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
#         logging.info("\nMissing Values Summary:\n%s", missing_values.to_string(index=False))
#     except Exception as e:
#         logging.error(f"An error occurred while logging missing values summary: {e}", exc_info=True)

# def log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target):
#     try:
#         logging.info("\n2) ==== Target Value (HasDetections) Correlation ====")
#         plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target)
#     except Exception as e:
#         logging.error(f"An error occurred while logging target value correlation: {e}", exc_info=True)

# def log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
#     try:
#         logging.info("\n3) ==== Pair Correlations ====")
#         plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
#     except Exception as e:
#         logging.error(f"An error occurred while logging pair correlations: {e}", exc_info=True)

# def log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
#     try:
#         logging.info("\n4) ==== Missing Values per Row ====")
#         plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
#     except Exception as e:
#         logging.error(f"An error occurred while logging missing values per row: {e}", exc_info=True)

# def plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target):
#     try:
#         feature_corr_df = process_correlation(feature_correlation_with_target, 'Feature Correlation with Target Variable')
#         save_plot(feature_corr_df, 'Feature Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'feature_correlation_with_target.png')

#         missing_values_corr_df = process_correlation(missing_values_correlation_with_target, 'Missing Values Correlation with Target Variable')
#         save_plot(missing_values_corr_df, 'Missing Values Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'missing_values_correlation_with_target.png')

#         # Update the JSON structure according to the schema
#         missing_value_corr_with_target = {
#             "features": {
#                 feature: {
#                     "correlations": {
#                         "missing_value_correlation_with_target": corr
#                     }
#                 }
#                 for feature, corr in missing_values_correlation_with_target.items()
#             }
#         }

#         # Save the JSON file
#         save_json_with_pipeline(missing_value_corr_with_target, os.path.join(paths['reports']['analysis_results'], 'missing_values_correlations_with_target_variable.json'))
#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_correlations: {e}", exc_info=True)

# def process_correlation(correlation_series, title):
#     try:
#         correlation_df = correlation_series.reset_index()
#         correlation_df.columns = ['Feature', 'Correlation']
#         print(f"\n{title}:\n", correlation_df.to_string(index=False))
#         return correlation_df
#     except Exception as e:
#         logging.error(f"An error occurred while processing correlation {title}: {e}", exc_info=True)
#         return pd.DataFrame()

# def save_plot(correlation_df, title, save_path):
#     try:
#         plot_correlation(correlation_df, title, save_path=save_path)
#     except Exception as e:
#         logging.error(f"An error occurred while saving plot {title}: {e}", exc_info=True)

# def plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
#     try:
#         process_and_save_pair_correlations(
#             paths['reports']['figures']['missing_values'] + 'feature_pair_correlations_heatmap.png',
#             high_feature_pairs,
#             feature_pairwise_correlation,
#             'Feature Pair Correlations',
#             'High Feature Pair Correlations (absolute value > 0.2 or < -0.2):\n'
#         )

#         process_and_save_pair_correlations(
#             paths['reports']['figures']['missing_values'] + 'missing_value_pair_correlations_heatmap.png',
#             high_missing_value_pairs,
#             missing_values_pairwise_correlation,
#             'Missing Value Pair Correlations',
#             'High Missing Value Pair Correlations (absolute value > 0.2 or < -0.2):\n',
#             json_save_path=os.path.join(paths['reports']['analysis_results'], 'missing_value_pair_correlations.json')
#         )
#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_pair_correlations: {e}", exc_info=True)

# def process_and_save_pair_correlations(save_path, high_pairs_df, pairwise_correlation_df, title, print_msg, json_save_path=None):
#     try:
#         plot_heatmap(pairwise_correlation_df, title, save_path=save_path)
#         print(f"\n{print_msg}\n", high_pairs_df.to_string(index=False))
        
#         if json_save_path:
#             # Update the JSON structure according to the schema
#             missing_value_corr_with_other_features = {
#                 "features": {}
#             }

#             for index, row in high_pairs_df.iterrows():
#                 feature1, feature2, corr = row
#                 if feature1 not in missing_value_corr_with_other_features["features"]:
#                     missing_value_corr_with_other_features["features"][feature1] = {
#                         "correlations": {
#                             "missing_value_correlation_with_other_features": {}
#                         }
#                     }
#                 missing_value_corr_with_other_features["features"][feature1]["correlations"]["missing_value_correlation_with_other_features"][feature2] = corr

#             # Save the JSON file
#             save_json_with_pipeline(missing_value_corr_with_other_features, json_save_path)
#     except Exception as e:
#         logging.error(f"An error occurred while processing and saving pair correlations {title}: {e}", exc_info=True)

# def plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
#     try:
#         plt.figure(figsize=(10, 6))
#         sns.barplot(x='percent_missing_features_per_row', y='percent_of_rows', data=missing_features_distribution)
#         plt.title('% of Rows by % Missing Features Per Row')
#         plt.xlabel('% Missing Features Per Row')
#         plt.ylabel('% of Rows')
#         plt.xticks(rotation=90)
#         plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
#         plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):.0f}'))
#         save_figure(plt, paths['reports']['figures']['missing_values'] + 'missing_values_per_row_distribution.png')
#         plt.show()
#         print("\nMissing Values Per Row Summary:\n", missing_values_row_summary.to_string(index=False))
#         print("\nMissing Features Per Row Distribution:\n", missing_features_distribution.to_string(index=False))
#         missing_features_summary = categorize_missing_features(missing_features_distribution)
#         print("\nSummary of Missing Features Per Row Categories:\n", missing_features_summary.to_string(index=False))
#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_missing_values_per_row: {e}", exc_info=True)

















# def display_results(paths, train_sample, feature_correlation_with_target, missing_values_correlation_with_target, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation, missing_features_distribution, missing_values_row_summary):
#     """
#     Function to display and plot the results.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     train_sample (pd.DataFrame): Training sample DataFrame.
#     feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
#     missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
#     high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
#     feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
#     high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
#     missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
#     missing_features_distribution (pd.Series): Distribution of missing features.
#     missing_values_row_summary (pd.Series): Summary of missing values per row.
#     """
#     try:
#         log_missing_values_summary(paths, train_sample)
#         log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target)
#         log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
#         log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
#     except Exception as e:
#         logging.error(f"An error occurred while displaying results: {e}", exc_info=True)

# def log_missing_values_summary(paths, train_sample):
#     """
#     Log and plot the missing values summary.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     train_sample (pd.DataFrame): Training sample DataFrame.
#     """
#     try:
#         logging.info("\n1) ==== Missing Values ====")
#         missing_values = missing_values_summary(train_sample)
#         plot_missing_values(missing_values, save_path=os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
#         logging.info("\nMissing Values Summary:\n%s", missing_values.to_string(index=False))
#     except Exception as e:
#         logging.error(f"An error occurred while logging missing values summary: {e}", exc_info=True)

# def log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target):
#     """
#     Log and plot the target value correlation.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
#     missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
#     """
#     try:
#         logging.info("\n2) ==== Target Value (HasDetections) Correlation ====")
#         plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target)
#     except Exception as e:
#         logging.error(f"An error occurred while logging target value correlation: {e}", exc_info=True)

# def log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
#     """
#     Log and plot the pair correlations for features and missing values.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
#     feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
#     high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
#     missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
#     """
#     try:
#         logging.info("\n3) ==== Pair Correlations ====")
#         plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
#     except Exception as e:
#         logging.error(f"An error occurred while logging pair correlations: {e}", exc_info=True)

# def log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
#     """
#     Log and plot the missing values per row.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     missing_features_distribution (pd.Series): Distribution of missing features.
#     missing_values_row_summary (pd.Series): Summary of missing values per row.
#     """
#     try:
#         logging.info("\n4) ==== Missing Values per Row ====")
#         plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
#     except Exception as e:
#         logging.error(f"An error occurred while logging missing values per row: {e}", exc_info=True)

# def plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target):
#     """
#     Plot and save the feature and missing values correlations with the target variable.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
#     missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
#     """
#     try:
#         # Process feature correlation with target
#         feature_corr_df = process_correlation(feature_correlation_with_target, 'Feature Correlation with Target Variable')
#         save_plot(feature_corr_df, 'Feature Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'feature_correlation_with_target.png')

#         # Process missing values correlation with target
#         missing_values_corr_df = process_correlation(missing_values_correlation_with_target, 'Missing Values Correlation with Target Variable')
#         save_plot(missing_values_corr_df, 'Missing Values Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'missing_values_correlation_with_target.png')

#         # Save missing values correlation with target to a JSON file
#         save_json_file(missing_values_corr_df.to_dict(orient='records'), paths['reports']['analysis_results'] + '/missing_values_correlations_with_target_variable.json')
#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_correlations: {e}", exc_info=True)

# def process_correlation(correlation_series, title):
#     """
#     Process the correlation series and return a DataFrame.

#     Parameters:
#     correlation_series (pd.Series): Series containing correlations.
#     title (str): Title for the plot.

#     Returns:
#     pd.DataFrame: DataFrame containing processed correlation data.
#     """
#     try:
#         correlation_df = correlation_series.reset_index()
#         correlation_df.columns = ['Feature', 'Correlation']
#         print(f"\n{title}:\n", correlation_df.to_string(index=False))
#         return correlation_df
#     except Exception as e:
#         logging.error(f"An error occurred while processing correlation {title}: {e}", exc_info=True)
#         return pd.DataFrame()

# def save_plot(correlation_df, title, save_path):
#     """
#     Save the correlation plot to a file.

#     Parameters:
#     correlation_df (pd.DataFrame): DataFrame containing correlation data.
#     title (str): Title for the plot.
#     save_path (str): Path to save the plot.
#     """
#     try:
#         plot_correlation(correlation_df, title, save_path=save_path)
#     except Exception as e:
#         logging.error(f"An error occurred while saving plot {title}: {e}", exc_info=True)

# def plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
#     """
#     Plot and save the pair correlations for features and missing values.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
#     feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
#     high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
#     missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
#     """
#     try:
#         # Process and save feature pair correlations
#         process_and_save_pair_correlations(
#             paths['reports']['figures']['missing_values'] + 'feature_pair_correlations_heatmap.png',
#             high_feature_pairs,
#             feature_pairwise_correlation,
#             'Feature Pair Correlations',
#             'High Feature Pair Correlations (absolute value > 0.2 or < -0.2):\n'
#         )

#         # Process and save missing value pair correlations
#         process_and_save_pair_correlations(
#             paths['reports']['figures']['missing_values'] + 'missing_value_pair_correlations_heatmap.png',
#             high_missing_value_pairs,
#             missing_values_pairwise_correlation,
#             'Missing Value Pair Correlations',
#             'High Missing Value Pair Correlations (absolute value > 0.2 or < -0.2):\n',
#             paths['reports']['analysis_results'] + '/missing_value_pair_correlations.json'
#         )
#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_pair_correlations: {e}", exc_info=True)

# def process_and_save_pair_correlations(save_path, high_pairs_df, pairwise_correlation_df, title, print_msg, json_save_path=None):
#     """
#     Process and save pair correlations.

#     Parameters:
#     save_path (str): Path to save the heatmap plot.
#     high_pairs_df (pd.DataFrame): DataFrame of high pairs with strong correlations.
#     pairwise_correlation_df (pd.DataFrame): Correlation matrix.
#     title (str): Title for the plot.
#     print_msg (str): Message to print with high pairs data.
#     json_save_path (str, optional): Path to save the JSON file of high pairs data.
#     """
#     try:
#         plot_heatmap(pairwise_correlation_df, title, save_path=save_path)
#         print(f"\n{print_msg}\n", high_pairs_df.to_string(index=False))
        
#         if json_save_path:
#             save_json_file(high_pairs_df.to_dict(orient='records'), json_save_path)
#     except Exception as e:
#         logging.error(f"An error occurred while processing and saving pair correlations {title}: {e}", exc_info=True)

# def plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
#     """
#     Plot and save the distribution of missing values per row.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     missing_features_distribution (pd.DataFrame): DataFrame of missing features distribution per row.
#     missing_values_row_summary (pd.DataFrame): Summary of missing values per row.
#     """
#     try:
#         plt.figure(figsize=(10, 6))
#         sns.barplot(x='percent_missing_features_per_row', y='percent_of_rows', data=missing_features_distribution)
#         plt.title('% of Rows by % Missing Features Per Row')
#         plt.xlabel('% Missing Features Per Row')
#         plt.ylabel('% of Rows')
#         plt.xticks(rotation=90)
#         plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
#         plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):.0f}'))
#         save_figure(plt, paths['reports']['figures']['missing_values'] + 'missing_values_per_row_distribution.png')
#         plt.show()
#         print("\nMissing Values Per Row Summary:\n", missing_values_row_summary.to_string(index=False))
#         print("\nMissing Features Per Row Distribution:\n", missing_features_distribution.to_string(index=False))
#         missing_features_summary = categorize_missing_features(missing_features_distribution)
#         print("\nSummary of Missing Features Per Row Categories:\n", missing_features_summary.to_string(index=False))
#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_missing_values_per_row: {e}", exc_info=True)