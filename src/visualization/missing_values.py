# src/visualization/missing_values.py

import logging
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from src.utils.file_operations import save_missing_values_correlations_with_target, save_missing_value_pair_correlations
from src.visualization.plot_utils import save_figure
from src.analysis.missing_values_analysis import categorize_missing_features, missing_values_summary

# src/visualization/missing_values.py

def display_results(paths, train_sample, feature_correlation_with_target, missing_values_correlation_with_target, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation, missing_features_distribution, missing_values_row_summary):
    """Function to display and plot the results."""
    logging.info("\n1) ==== Missing Values ====")
    missing_values = missing_values_summary(train_sample)
    plot_missing_values(missing_values, save_path=paths['reports']['figures']['missing_values'] + 'missing_values_bar_plot.png')
    logging.info("\nMissing Values Summary:\n%s", missing_values.to_string(index=False))

    logging.info("\n2) ==== Target Value (HasDetections) Correlation ====")
    plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target)

    logging.info("\n3) ==== Pair Correlations ====")
    plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)

    logging.info("\n4) ==== Missing Values per Row ====")
    plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)

def plot_missing_values(missing_values, save_path, top_n=20):
    """
    Plot the top N features with the most missing values.

    Parameters:
    missing_values (pd.DataFrame): DataFrame containing columns 'column_name' and 'missing_percentage'.
    save_path (str): Path to save the plot.
    top_n (int, optional): Number of top rows to display. Defaults to 20.
    """
    plt.figure(figsize=(12, 8))
    sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
    plt.title('Top Rows with Missing Values')
    plt.xlabel('Missing Percentage')
    plt.ylabel('Column Name')
    save_figure(plt, save_path)
    plt.show()

def plot_heatmap(correlation_matrix, title, save_path):
    """
    Plot a heatmap of the correlation matrix.

    Parameters:
    correlation_matrix (pd.DataFrame): Correlation matrix to plot.
    title (str): Title of the plot.
    save_path (str): Path to save the plot.
    """
    plt.figure(figsize=(12, 10))
    sns.heatmap(correlation_matrix, cmap='coolwarm', cbar=True, annot=False)
    plt.title(title)
    save_figure(plt, save_path)
    plt.show()

def plot_correlation(correlation_df, title, save_path):
    """
    Plot a barplot of the correlation dataframe.

    Parameters:
    correlation_df (pd.DataFrame): DataFrame containing columns 'Feature' and 'Correlation'.
    title (str): Title of the plot.
    save_path (str): Path to save the plot.
    """
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Correlation', y='Feature', data=correlation_df, hue='Feature', palette='coolwarm', dodge=False, legend=False)
    plt.title(title)
    plt.xlabel('Correlation')
    plt.ylabel('Feature')
    plt.savefig(save_path)
    plt.show()

def plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target):
    """
    Plot and save the feature and missing values correlations with the target variable.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
    missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
    """
    # Feature Correlation with Target Variable
    plain_vanilla_correlation_df = feature_correlation_with_target.reset_index()
    plain_vanilla_correlation_df.columns = ['Feature', 'Correlation']
    plot_correlation(plain_vanilla_correlation_df, 'Feature Correlation with Target Variable', save_path=paths['reports']['figures']['missing_values'] + 'feature_correlation_with_target.png')
    print("\nFeature Correlation with Target Variable:\n", plain_vanilla_correlation_df.to_string(index=False))

    # Missing Value Correlation with Target Variable
    correlation_df = missing_values_correlation_with_target.reset_index()
    correlation_df.columns = ['Feature', 'Correlation']
    plot_correlation(correlation_df, 'Missing Values Correlation with Target Variable', save_path=paths['reports']['figures']['missing_values'] + 'missing_values_correlation_with_target.png')
    print("\nMissing Values Correlation with Target Variable:\n", correlation_df.to_string(index=False))

    save_missing_values_correlations_with_target(correlation_df.to_dict(orient='records'), paths['reports']['analysis_results'] + 'missing_values_correlations_with_target_variable.json')

def plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
    """
    Plot and save the pair correlations for features and missing values.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
    feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
    high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
    missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
    """
    # Feature Pair Correlations
    plot_heatmap(feature_pairwise_correlation, 'Feature Pair Correlations', save_path=paths['reports']['figures']['missing_values'] + 'feature_pair_correlations_heatmap.png')
    print("\nHigh Feature Pair Correlations (absolute value > 0.2 or < -0.2):\n", high_feature_pairs.to_string(index=False))

    # Missing Value Pair Correlations
    plot_heatmap(missing_values_pairwise_correlation, 'Missing Value Pair Correlations', save_path=paths['reports']['figures']['missing_values'] + 'missing_value_pair_correlations_heatmap.png')
    print("\nHigh Missing Value Pair Correlations (absolute value > 0.2 or < -0.2):\n", high_missing_value_pairs.to_string(index=False))

    save_missing_value_pair_correlations(high_missing_value_pairs.to_dict(orient='records'), paths['reports']['analysis_results'] + 'missing_value_pair_correlations.json')

def plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
    """
    Plot and save the distribution of missing values per row.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    missing_features_distribution (pd.DataFrame): DataFrame of missing features distribution per row.
    missing_values_row_summary (pd.DataFrame): Summary of missing values per row.
    """
    plt.figure(figsize=(10, 6))
    sns.barplot(x='percent_missing_features_per_row', y='percent_of_rows', data=missing_features_distribution)
    plt.title('% of Rows by % Missing Features Per Row')
    plt.xlabel('% Missing Features Per Row')
    plt.ylabel('% of Rows')
    plt.xticks(rotation=90)
    plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
    plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):.0f}'))
    plt.savefig(paths['reports']['figures']['missing_values'] + 'missing_values_per_row_distribution.png')
    plt.show()
    print("\nMissing Values Per Row Summary:\n", missing_values_row_summary.to_string(index=False))
    print("\nMissing Features Per Row Distribution:\n", missing_features_distribution.to_string(index=False))
    missing_features_summary = categorize_missing_features(missing_features_distribution)
    print("\nSummary of Missing Features Per Row Categories:\n", missing_features_summary.to_string(index=False))




# # src/visualization/missing_values.py

# import seaborn as sns
# import matplotlib.pyplot as plt
# from matplotlib.ticker import MaxNLocator
# from src.utils.file_operations import save_missing_values_correlations_with_target, save_missing_value_pair_correlations
# from src.visualization.plot_utils import save_figure
# from src.analysis.missing_values_analysis import categorize_missing_features

# def plot_missing_values(missing_values, save_path, top_n=20):
#     plt.figure(figsize=(12, 8))
#     sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
#     plt.title('Top Rows with Missing Values')
#     plt.xlabel('Missing Percentage')
#     plt.ylabel('Column Name')
#     save_figure(plt, save_path)
#     plt.show()

# def plot_heatmap(correlation_matrix, title, save_path):
#     plt.figure(figsize=(12, 10))
#     sns.heatmap(correlation_matrix, cmap='coolwarm', cbar=True, annot=False)
#     plt.title(title)
#     save_figure(plt, save_path)
#     plt.show()

# def plot_correlation(correlation_df, title, save_path):
#     plt.figure(figsize=(10, 6))
#     sns.barplot(x='Correlation', y='Feature', data=correlation_df, hue='Feature', palette='coolwarm', dodge=False, legend=False)
#     plt.title(title)
#     plt.xlabel('Correlation')
#     plt.ylabel('Feature')
#     plt.savefig(save_path)
#     plt.show()

# def plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target):
#     # Feature Correlation with Target Variable
#     plain_vanilla_correlation_df = feature_correlation_with_target.reset_index()
#     plain_vanilla_correlation_df.columns = ['Feature', 'Correlation']
#     plot_correlation(plain_vanilla_correlation_df, 'Feature Correlation with Target Variable', save_path=paths['reports']['figures']['missing_values'] + 'feature_correlation_with_target.png')
#     print("\nFeature Correlation with Target Variable:\n", plain_vanilla_correlation_df.to_string(index=False))

#     # Missing Value Correlation with Target Variable
#     correlation_df = missing_values_correlation_with_target.reset_index()
#     correlation_df.columns = ['Feature', 'Correlation']
#     plot_correlation(correlation_df, 'Missing Values Correlation with Target Variable', save_path=paths['reports']['figures']['missing_values'] + 'missing_values_correlation_with_target.png')
#     print("\nMissing Values Correlation with Target Variable:\n", correlation_df.to_string(index=False))

#     save_missing_values_correlations_with_target(correlation_df.to_dict(orient='records'), paths['reports']['analysis_results'] + 'missing_values_correlations_with_target_variable.json')

# def plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
#     # Feature Pair Correlations
#     plot_heatmap(feature_pairwise_correlation, 'Feature Pair Correlations', save_path=paths['reports']['figures']['missing_values'] + 'feature_pair_correlations_heatmap.png')
#     print("\nHigh Feature Pair Correlations (absolute value > 0.2 or < -0.2):\n", high_feature_pairs.to_string(index=False))

#     # Missing Value Pair Correlations
#     plot_heatmap(missing_values_pairwise_correlation, 'Missing Value Pair Correlations', save_path=paths['reports']['figures']['missing_values'] + 'missing_value_pair_correlations_heatmap.png')
#     print("\nHigh Missing Value Pair Correlations (absolute value > 0.2 or < -0.2):\n", high_missing_value_pairs.to_string(index=False))

#     save_missing_value_pair_correlations(high_missing_value_pairs.to_dict(orient='records'), paths['reports']['analysis_results'] + 'missing_value_pair_correlations.json')

# def plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
#     plt.figure(figsize=(10, 6))
#     sns.barplot(x='percent_missing_features_per_row', y='percent_of_rows', data=missing_features_distribution)
#     plt.title('% of Rows by % Missing Features Per Row')
#     plt.xlabel('% Missing Features Per Row')
#     plt.ylabel('% of Rows')
#     plt.xticks(rotation=90)
#     plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
#     plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):.0f}'))
#     plt.savefig(paths['reports']['figures']['missing_values'] + 'missing_values_per_row_distribution.png')
#     plt.show()
#     print("\nMissing Values Per Row Summary:\n", missing_values_row_summary.to_string(index=False))
#     print("\nMissing Features Per Row Distribution:\n", missing_features_distribution.to_string(index=False))
#     missing_features_summary = categorize_missing_features(missing_features_distribution)
#     print("\nSummary of Missing Features Per Row Categories:\n", missing_features_summary.to_string(index=False))





