# # src/visualization/missing_values.py

import os
import logging
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from src.utils.file_operations import save_json_file
from src.analysis.missing_values_analysis import categorize_missing_features, missing_values_summary
from src.visualization.plot_utils import save_figure, plot_heatmap, plot_correlation, plot_missing_values

def display_results(paths, train_sample, feature_correlation_with_target, missing_values_correlation_with_target, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation, missing_features_distribution, missing_values_row_summary):
    """
    Function to display and plot the results.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    train_sample (pd.DataFrame): Training sample DataFrame.
    feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
    missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
    high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
    feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
    high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
    missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
    missing_features_distribution (pd.Series): Distribution of missing features.
    missing_values_row_summary (pd.Series): Summary of missing values per row.
    """
    try:
        log_missing_values_summary(paths, train_sample)
        log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target)
        log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
        log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
    except Exception as e:
        logging.error(f"An error occurred while displaying results: {e}", exc_info=True)

def log_missing_values_summary(paths, train_sample):
    """
    Log and plot the missing values summary.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    train_sample (pd.DataFrame): Training sample DataFrame.
    """
    try:
        logging.info("\n1) ==== Missing Values ====")
        missing_values = missing_values_summary(train_sample)
        plot_missing_values(missing_values, save_path=os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
        logging.info("\nMissing Values Summary:\n%s", missing_values.to_string(index=False))
    except Exception as e:
        logging.error(f"An error occurred while logging missing values summary: {e}", exc_info=True)

def log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target):
    """
    Log and plot the target value correlation.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
    missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
    """
    try:
        logging.info("\n2) ==== Target Value (HasDetections) Correlation ====")
        plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target)
    except Exception as e:
        logging.error(f"An error occurred while logging target value correlation: {e}", exc_info=True)

def log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
    """
    Log and plot the pair correlations for features and missing values.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
    feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
    high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
    missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
    """
    try:
        logging.info("\n3) ==== Pair Correlations ====")
        plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
    except Exception as e:
        logging.error(f"An error occurred while logging pair correlations: {e}", exc_info=True)

def log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
    """
    Log and plot the missing values per row.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    missing_features_distribution (pd.Series): Distribution of missing features.
    missing_values_row_summary (pd.Series): Summary of missing values per row.
    """
    try:
        logging.info("\n4) ==== Missing Values per Row ====")
        plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
    except Exception as e:
        logging.error(f"An error occurred while logging missing values per row: {e}", exc_info=True)

def plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target):
    """
    Plot and save the feature and missing values correlations with the target variable.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
    missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
    """
    try:
        # Process feature correlation with target
        feature_corr_df = process_correlation(feature_correlation_with_target, 'Feature Correlation with Target Variable')
        save_plot(feature_corr_df, 'Feature Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'feature_correlation_with_target.png')

        # Process missing values correlation with target
        missing_values_corr_df = process_correlation(missing_values_correlation_with_target, 'Missing Values Correlation with Target Variable')
        save_plot(missing_values_corr_df, 'Missing Values Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'missing_values_correlation_with_target.png')

        # Save missing values correlation with target to a JSON file
        save_json_file(missing_values_corr_df.to_dict(orient='records'), paths['reports']['analysis_results'] + '/missing_values_correlations_with_target_variable.json')
    except Exception as e:
        logging.error(f"An error occurred in plot_and_save_correlations: {e}", exc_info=True)

def process_correlation(correlation_series, title):
    """
    Process the correlation series and return a DataFrame.

    Parameters:
    correlation_series (pd.Series): Series containing correlations.
    title (str): Title for the plot.

    Returns:
    pd.DataFrame: DataFrame containing processed correlation data.
    """
    try:
        correlation_df = correlation_series.reset_index()
        correlation_df.columns = ['Feature', 'Correlation']
        print(f"\n{title}:\n", correlation_df.to_string(index=False))
        return correlation_df
    except Exception as e:
        logging.error(f"An error occurred while processing correlation {title}: {e}", exc_info=True)
        return pd.DataFrame()

def save_plot(correlation_df, title, save_path):
    """
    Save the correlation plot to a file.

    Parameters:
    correlation_df (pd.DataFrame): DataFrame containing correlation data.
    title (str): Title for the plot.
    save_path (str): Path to save the plot.
    """
    try:
        plot_correlation(correlation_df, title, save_path=save_path)
    except Exception as e:
        logging.error(f"An error occurred while saving plot {title}: {e}", exc_info=True)

def plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
    """
    Plot and save the pair correlations for features and missing values.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
    feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
    high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
    missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
    """
    try:
        # Process and save feature pair correlations
        process_and_save_pair_correlations(
            paths['reports']['figures']['missing_values'] + 'feature_pair_correlations_heatmap.png',
            high_feature_pairs,
            feature_pairwise_correlation,
            'Feature Pair Correlations',
            'High Feature Pair Correlations (absolute value > 0.2 or < -0.2):\n'
        )

        # Process and save missing value pair correlations
        process_and_save_pair_correlations(
            paths['reports']['figures']['missing_values'] + 'missing_value_pair_correlations_heatmap.png',
            high_missing_value_pairs,
            missing_values_pairwise_correlation,
            'Missing Value Pair Correlations',
            'High Missing Value Pair Correlations (absolute value > 0.2 or < -0.2):\n',
            paths['reports']['analysis_results'] + '/missing_value_pair_correlations.json'
        )
    except Exception as e:
        logging.error(f"An error occurred in plot_and_save_pair_correlations: {e}", exc_info=True)

def process_and_save_pair_correlations(save_path, high_pairs_df, pairwise_correlation_df, title, print_msg, json_save_path=None):
    """
    Process and save pair correlations.

    Parameters:
    save_path (str): Path to save the heatmap plot.
    high_pairs_df (pd.DataFrame): DataFrame of high pairs with strong correlations.
    pairwise_correlation_df (pd.DataFrame): Correlation matrix.
    title (str): Title for the plot.
    print_msg (str): Message to print with high pairs data.
    json_save_path (str, optional): Path to save the JSON file of high pairs data.
    """
    try:
        plot_heatmap(pairwise_correlation_df, title, save_path=save_path)
        print(f"\n{print_msg}\n", high_pairs_df.to_string(index=False))
        
        if json_save_path:
            save_json_file(high_pairs_df.to_dict(orient='records'), json_save_path)
    except Exception as e:
        logging.error(f"An error occurred while processing and saving pair correlations {title}: {e}", exc_info=True)

def plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
    """
    Plot and save the distribution of missing values per row.

    Parameters:
    paths (dict): Dictionary containing paths for saving figures and results.
    missing_features_distribution (pd.DataFrame): DataFrame of missing features distribution per row.
    missing_values_row_summary (pd.DataFrame): Summary of missing values per row.
    """
    try:
        plt.figure(figsize=(10, 6))
        sns.barplot(x='percent_missing_features_per_row', y='percent_of_rows', data=missing_features_distribution)
        plt.title('% of Rows by % Missing Features Per Row')
        plt.xlabel('% Missing Features Per Row')
        plt.ylabel('% of Rows')
        plt.xticks(rotation=90)
        plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
        plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):.0f}'))
        save_figure(plt, paths['reports']['figures']['missing_values'] + 'missing_values_per_row_distribution.png')
        plt.show()
        print("\nMissing Values Per Row Summary:\n", missing_values_row_summary.to_string(index=False))
        print("\nMissing Features Per Row Distribution:\n", missing_features_distribution.to_string(index=False))
        missing_features_summary = categorize_missing_features(missing_features_distribution)
        print("\nSummary of Missing Features Per Row Categories:\n", missing_features_summary.to_string(index=False))
    except Exception as e:
        logging.error(f"An error occurred in plot_and_save_missing_values_per_row: {e}", exc_info=True)





# import logging
# import os
# import seaborn as sns
# import matplotlib.pyplot as plt
# import json
# from matplotlib.ticker import MaxNLocator
# from src.utils.file_operations import save_missing_values_correlations_with_target, save_missing_value_pair_correlations, save_json_file
# from src.visualization.plot_utils import save_figure
# from src.analysis.missing_values_analysis import categorize_missing_features, missing_values_summary

# # src/visualization/missing_values.py

# def display_results(paths, train_sample, feature_correlation_with_target, missing_values_correlation_with_target, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation, missing_features_distribution, missing_values_row_summary):
#     """
#     Function to display and plot the results.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     train_sample (pd.DataFrame): Training sample DataFrame.
#     feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
#     missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
#     high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
#     feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
#     high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
#     missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
#     missing_features_distribution (pd.Series): Distribution of missing features.
#     missing_values_row_summary (pd.Series): Summary of missing values per row.
#     """
#     try:
#         log_missing_values_summary(paths, train_sample)
#         log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target)
#         log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
#         log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
#     except Exception as e:
#         logging.error(f"An error occurred while displaying results: {e}", exc_info=True)

# def log_missing_values_summary(paths, train_sample):
#     """
#     Log and plot the missing values summary.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     train_sample (pd.DataFrame): Training sample DataFrame.
#     """
#     try:
#         logging.info("\n1) ==== Missing Values ====")
#         missing_values = missing_values_summary(train_sample)
#         plot_missing_values(missing_values, save_path=os.path.join(paths['reports']['figures']['missing_values'], 'missing_values_bar_plot.png'))
#         logging.info("\nMissing Values Summary:\n%s", missing_values.to_string(index=False))
#     except Exception as e:
#         logging.error(f"An error occurred while logging missing values summary: {e}", exc_info=True)

# def log_target_value_correlation(paths, feature_correlation_with_target, missing_values_correlation_with_target):
#     """
#     Log and plot the target value correlation.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
#     missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
#     """
#     try:
#         logging.info("\n2) ==== Target Value (HasDetections) Correlation ====")
#         plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target)
#     except Exception as e:
#         logging.error(f"An error occurred while logging target value correlation: {e}", exc_info=True)

# def log_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
#     """
#     Log and plot the pair correlations for features and missing values.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
#     feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
#     high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
#     missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
#     """
#     try:
#         logging.info("\n3) ==== Pair Correlations ====")
#         plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation)
#     except Exception as e:
#         logging.error(f"An error occurred while logging pair correlations: {e}", exc_info=True)

# def log_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
#     """
#     Log and plot the missing values per row.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     missing_features_distribution (pd.Series): Distribution of missing features.
#     missing_values_row_summary (pd.Series): Summary of missing values per row.
#     """
#     try:
#         logging.info("\n4) ==== Missing Values per Row ====")
#         plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary)
#     except Exception as e:
#         logging.error(f"An error occurred while logging missing values per row: {e}", exc_info=True)

# def plot_missing_values(missing_values, save_path, top_n=20):
#     """
#     Plot the top N features with the most missing values.

#     Parameters:
#     missing_values (pd.DataFrame): DataFrame containing columns 'column_name' and 'missing_percentage'.
#     save_path (str): Path to save the plot.
#     top_n (int, optional): Number of top rows to display. Defaults to 20.
#     """
#     plt.figure(figsize=(12, 8))
#     sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
#     plt.title('Top Rows with Missing Values')
#     plt.xlabel('Missing Percentage')
#     plt.ylabel('Column Name')
#     save_figure(plt, save_path)
#     plt.show()

# def plot_heatmap(correlation_matrix, title, save_path):
#     """
#     Plot a heatmap of the correlation matrix.

#     Parameters:
#     correlation_matrix (pd.DataFrame): Correlation matrix to plot.
#     title (str): Title of the plot.
#     save_path (str): Path to save the plot.
#     """
#     plt.figure(figsize=(12, 10))
#     sns.heatmap(correlation_matrix, cmap='coolwarm', cbar=True, annot=False)
#     plt.title(title)
#     save_figure(plt, save_path)
#     plt.show()

# def plot_correlation(correlation_df, title, save_path):
#     """
#     Plot a barplot of the correlation dataframe.

#     Parameters:
#     correlation_df (pd.DataFrame): DataFrame containing columns 'Feature' and 'Correlation'.
#     title (str): Title of the plot.
#     save_path (str): Path to save the plot.
#     """
#     plt.figure(figsize=(10, 6))
#     sns.barplot(x='Correlation', y='Feature', data=correlation_df, hue='Feature', palette='coolwarm', dodge=False, legend=False)
#     plt.title(title)
#     plt.xlabel('Correlation')
#     plt.ylabel('Feature')
#     plt.savefig(save_path)
#     plt.show()

# def plot_and_save_correlations(paths, feature_correlation_with_target, missing_values_correlation_with_target):
#     """
#     Plot and save the feature and missing values correlations with the target variable.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     feature_correlation_with_target (pd.Series): Series containing feature correlations with the target variable.
#     missing_values_correlation_with_target (pd.Series): Series containing missing values correlations with the target variable.
#     """
#     try:
#         # Process feature correlation with target
#         feature_corr_df = process_correlation(feature_correlation_with_target, 'Feature Correlation with Target Variable')
#         save_plot(feature_corr_df, 'Feature Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'feature_correlation_with_target.png')

#         # Process missing values correlation with target
#         missing_values_corr_df = process_correlation(missing_values_correlation_with_target, 'Missing Values Correlation with Target Variable')
#         save_plot(missing_values_corr_df, 'Missing Values Correlation with Target Variable', paths['reports']['figures']['missing_values'] + 'missing_values_correlation_with_target.png')

#         # Save missing values correlation with target to a JSON file
#         save_json_file(missing_values_corr_df.to_dict(orient='records'), paths['reports']['analysis_results'] + '/missing_values_correlations_with_target_variable.json')

#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_correlations: {e}", exc_info=True)

# def process_correlation(correlation_series, title):
#     """
#     Process the correlation series and return a DataFrame.

#     Parameters:
#     correlation_series (pd.Series): Series containing correlations.
#     title (str): Title for the plot.

#     Returns:
#     pd.DataFrame: DataFrame containing processed correlation data.
#     """
#     correlation_df = correlation_series.reset_index()
#     correlation_df.columns = ['Feature', 'Correlation']
#     print(f"\n{title}:\n", correlation_df.to_string(index=False))
#     return correlation_df

# def save_plot(correlation_df, title, save_path):
#     """
#     Save the correlation plot to a file.

#     Parameters:
#     correlation_df (pd.DataFrame): DataFrame containing correlation data.
#     title (str): Title for the plot.
#     save_path (str): Path to save the plot.
#     """
#     try:
#         plot_correlation(correlation_df, title, save_path=save_path)
#     except Exception as e:
#         logging.error(f"An error occurred while saving plot {title}: {e}", exc_info=True)

# def plot_and_save_pair_correlations(paths, high_feature_pairs, feature_pairwise_correlation, high_missing_value_pairs, missing_values_pairwise_correlation):
#     """
#     Plot and save the pair correlations for features and missing values.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     high_feature_pairs (pd.DataFrame): DataFrame of high feature pairs with strong correlations.
#     feature_pairwise_correlation (pd.DataFrame): Correlation matrix for features.
#     high_missing_value_pairs (pd.DataFrame): DataFrame of high missing value pairs with strong correlations.
#     missing_values_pairwise_correlation (pd.DataFrame): Correlation matrix for missing values.
#     """
#     try:
#         # Process and save feature pair correlations
#         process_and_save_pair_correlations(
#             paths['reports']['figures']['missing_values'] + 'feature_pair_correlations_heatmap.png',
#             high_feature_pairs,
#             feature_pairwise_correlation,
#             'Feature Pair Correlations',
#             'High Feature Pair Correlations (absolute value > 0.2 or < -0.2):\n'
#         )

#         # Process and save missing value pair correlations
#         process_and_save_pair_correlations(
#             paths['reports']['figures']['missing_values'] + 'missing_value_pair_correlations_heatmap.png',
#             high_missing_value_pairs,
#             missing_values_pairwise_correlation,
#             'Missing Value Pair Correlations',
#             'High Missing Value Pair Correlations (absolute value > 0.2 or < -0.2):\n',
#             paths['reports']['analysis_results'] + '/missing_value_pair_correlations.json'
#         )
#     except Exception as e:
#         logging.error(f"An error occurred in plot_and_save_pair_correlations: {e}", exc_info=True)

# def process_and_save_pair_correlations(save_path, high_pairs_df, pairwise_correlation_df, title, print_msg, json_save_path=None):
#     """
#     Process and save pair correlations.

#     Parameters:
#     save_path (str): Path to save the heatmap plot.
#     high_pairs_df (pd.DataFrame): DataFrame of high pairs with strong correlations.
#     pairwise_correlation_df (pd.DataFrame): Correlation matrix.
#     title (str): Title for the plot.
#     print_msg (str): Message to print with high pairs data.
#     json_save_path (str, optional): Path to save the JSON file of high pairs data.
#     """
#     try:
#         plot_heatmap(pairwise_correlation_df, title, save_path=save_path)
#         print(f"\n{print_msg}\n", high_pairs_df.to_string(index=False))
        
#         if json_save_path:
#             save_json_file(high_pairs_df.to_dict(orient='records'), json_save_path)
#     except Exception as e:
#         logging.error(f"An error occurred while processing and saving pair correlations {title}: {e}", exc_info=True)

# def save_missing_value_pair_correlations(data, filepath):
#     """
#     Save missing value pair correlations to a JSON file.

#     Parameters:
#     data (dict): Data to save.
#     filepath (str): Path to the file.
#     """
#     try:
#         save_json_file(data, filepath)
#     except Exception as e:
#         logging.error(f"An error occurred while saving missing value pair correlations: {e}", exc_info=True)

# def plot_and_save_missing_values_per_row(paths, missing_features_distribution, missing_values_row_summary):
#     """
#     Plot and save the distribution of missing values per row.

#     Parameters:
#     paths (dict): Dictionary containing paths for saving figures and results.
#     missing_features_distribution (pd.DataFrame): DataFrame of missing features distribution per row.
#     missing_values_row_summary (pd.DataFrame): Summary of missing values per row.
#     """
#     plt.figure(figsize=(10, 6))
#     sns.barplot(x='percent_missing_features_per_row', y='percent_of_rows', data=missing_features_distribution)
#     plt.title('% of Rows by % Missing Features Per Row')
#     plt.xlabel('% Missing Features Per Row')
#     plt.ylabel('% of Rows')
#     plt.xticks(rotation=90)
#     plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
#     plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: f'{int(x):.0f}'))
#     plt.savefig(paths['reports']['figures']['missing_values'] + 'missing_values_per_row_distribution.png')
#     plt.show()
#     print("\nMissing Values Per Row Summary:\n", missing_values_row_summary.to_string(index=False))
#     print("\nMissing Features Per Row Distribution:\n", missing_features_distribution.to_string(index=False))
#     missing_features_summary = categorize_missing_features(missing_features_distribution)
#     print("\nSummary of Missing Features Per Row Categories:\n", missing_features_summary.to_string(index=False))












