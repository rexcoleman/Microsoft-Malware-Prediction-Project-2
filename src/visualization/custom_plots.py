# visualization/custom_plots.py

import matplotlib.pyplot as plt

def custom_plot(data, save_path=None):
    # Custom plotting logic here
    pass

def plot_side_by_side_comparison(before_data, after_data, before_metrics, after_metrics, feature, output_plot_dir, strategy):
    fig, axes = plt.subplots(2, 2, figsize=(18, 10))

    sns.histplot(before_data[feature], bins=30, kde=True, ax=axes[0, 0], color='blue')
    axes[0, 0].set_title(f'{feature} Before Transformation')

    sns.histplot(after_data[feature], bins=30, kde=True, ax=axes[0, 1], color='green')
    axes[0, 1].set_title(f'{feature} After Transformation')

    before_stats = before_metrics[before_metrics['Feature'] == feature]
    after_stats = after_metrics[after_metrics['Feature'] == feature]

    before_text = (
        f"Before:\n"
        f"Z-Score Outliers: {before_stats['Z-Score Outliers'].values[0]}\n"
        f"IQR Outliers: {before_stats['IQR Outliers'].values[0]}\n"
        f"MAD Scores: {before_stats['MAD Scores'].values[0]}\n"
        f"Isolation Forest Outliers: {before_stats['Isolation Forest Outliers'].values[0]}\n"
        f"LOF Outliers: {before_stats['LOF Outliers'].values[0]}\n"
        f"DBSCAN Outliers: {before_stats['DBSCAN Outliers'].values[0]}\n"
        f"Skewness: {before_stats['Skewness'].values[0]}\n"
        f"Kurtosis: {before_stats['Kurtosis'].values[0]}"
    )
    after_text = (
        f"After:\n"
        f"Z-Score Outliers: {after_stats['Z-Score Outliers'].values[0]}\n"
        f"IQR Outliers: {after_stats['IQR Outliers'].values[0]}\n"
        f"MAD Scores: {after_stats['MAD Scores'].values[0]}\n"
        f"Isolation Forest Outliers: {after_stats['Isolation Forest Outliers'].values[0]}\n"
        f"LOF Outliers: {after_stats['LOF Outliers'].values[0]}\n"
        f"DBSCAN Outliers: {after_stats['DBSCAN Outliers'].values[0]}\n"
        f"Skewness: {after_stats['Skewness'].values[0]}\n"
        f"Kurtosis: {after_stats['Kurtosis'].values[0]}"
    )

    axes[1, 0].axis('off')
    axes[1, 0].text(0.1, 0.5, before_text, fontsize=12)

    axes[1, 1].axis('off')
    axes[1, 1].text(0.1, 0.5, after_text, fontsize=12)

    plt.tight_layout()
    output_plot_path = os.path.join(output_plot_dir, f'{feature}_before_after_comparison.png')
    fig.savefig(output_plot_path)
    plt.close(fig)

    # Display plots inline
    display(Image(filename=output_plot_path))
    display(HTML(f"<b>Outlier Remediation Strategy: {strategy}</b>"))

    return before_stats, after_stats

