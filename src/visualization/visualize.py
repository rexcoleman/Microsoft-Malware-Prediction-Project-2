# src/visualization/visualize.py

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

def plot_correlation_heatmap(df, target_col='HasDetections', save_path=None):
    """
    Plot a correlation heatmap for the dataframe.

    Parameters:
    - df (DataFrame): The dataframe to analyze.
    - target_col (str): The target column for correlation analysis.
    - save_path (str): The path to save the heatmap image.

    Returns:
    - DataFrame: Correlation matrix.
    """
    plt.figure(figsize=(12, 8))
    
    # Select only numeric columns for correlation analysis
    numeric_df = df.select_dtypes(include=['float64', 'int64', 'float32', 'int32'])
    
    # Calculate the correlation matrix
    corr_matrix = numeric_df.corr()
    
    # Plot the heatmap
    sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm')
    plt.title('Correlation Matrix')
    
    if save_path:
        plt.savefig(save_path)
    
    plt.show()
    return corr_matrix

def plot_missing_values(df, save_path):
    """
    Plot a heatmap of missing values for the dataframe.

    Parameters:
    - df (DataFrame): The dataframe to analyze.
    - save_path (str): The path to save the heatmap image.
    """
    plt.figure(figsize=(12, 8))
    sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
    plt.title('Missing Values Heatmap')
    plt.savefig(save_path)
    plt.close()


def plot_univariate_analysis(df):
    """
    Perform univariate analysis by plotting the distribution of each feature.
    
    Parameters:
    - df (DataFrame): The dataframe to analyze.
    """
    for column in df.columns:
        plt.figure(figsize=(10, 6))
        if df[column].dtype == 'object':
            sns.countplot(data=df, x=column)
        else:
            sns.histplot(data=df, x=column, kde=True)
        plt.title(f'Distribution of {column}')
        plt.show()

def plot_bivariate_analysis(df, target_col):
    """
    Perform bivariate and multivariate analysis by plotting the relationship between features and the target variable.
    
    Parameters:
    - df (DataFrame): The dataframe to analyze.
    - target_col (str): The name of the target column.
    """
    for column in df.columns:
        if column != target_col:
            plt.figure(figsize=(10, 6))
            if df[column].dtype == 'object':
                sns.countplot(data=df, x=column, hue=target_col)
            else:
                sns.scatterplot(data=df, x=column, y=target_col)
            plt.title(f'Relationship between {column} and {target_col}')
            plt.show()

def plot_time_series_analysis(df):
    """
    Perform time series analysis by plotting time-related features to identify trends and seasonal effects.
    
    Parameters:
    - df (DataFrame): The dataframe to analyze.
    """
    time_cols = [col for col in df.columns if 'Date' in col or 'Time' in col]
    for column in time_cols:
        plt.figure(figsize=(10, 6))
        if pd.api.types.is_datetime64_any_dtype(df[column]):
            df.set_index(column)[df.columns.difference(time_cols)].plot()
        else:
            sns.lineplot(data=df, x=column, y=df.columns.difference(time_cols))
        plt.title(f'Time Series Analysis of {column}')
        plt.show()
