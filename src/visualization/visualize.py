# src/visualization/visualize.py

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import MaxNLocator

def plot_missing_values(missing_values, save_path, top_n=20):
    plt.figure(figsize=(12, 8))
    sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
    plt.title('Top Rows with Missing Values')
    plt.xlabel('Missing Percentage')
    plt.ylabel('Column Name')
    plt.savefig(save_path)
    plt.show()

def plot_correlation(correlation_df, title, save_path):
    plt.figure(figsize=(10, 6))
    sns.barplot(x='Correlation', y='Feature', data=correlation_df, hue='Feature', palette='coolwarm', dodge=False, legend=False)
    plt.title(title)
    plt.xlabel('Correlation')
    plt.ylabel('Feature')
    plt.savefig(save_path)
    plt.show()

def plot_heatmap(correlation_matrix, title, save_path):
    plt.figure(figsize=(12, 10))
    sns.heatmap(correlation_matrix, cmap='coolwarm', cbar=True, annot=False)
    plt.title(title)
    plt.savefig(save_path)
    plt.show()





# # src/visualization/visualize.py

# import matplotlib.pyplot as plt
# import seaborn as sns
# from matplotlib.ticker import MaxNLocator




# def plot_missing_values(missing_values, top_n=20, save_path=None):
#     plt.figure(figsize=(12, 8))
#     sns.barplot(x='missing_percentage', y='column_name', data=missing_values.head(top_n))
#     plt.title('Top Rows with Missing Values')
#     plt.xlabel('Missing Percentage')
#     plt.ylabel('Column Name')
#     if save_path:
#         plt.savefig(save_path)
#     plt.show()

# def plot_correlation(correlation_df, title, save_path=None):
#     plt.figure(figsize=(10, 6))
#     sns.barplot(x='Correlation', y='Feature', data=correlation_df, hue='Feature', palette='coolwarm', dodge=False, legend=False)
#     plt.title(title)
#     plt.xlabel('Correlation')
#     plt.ylabel('Feature')
#     if save_path:
#         plt.savefig(save_path)
#     plt.show()

# def plot_heatmap(correlation_matrix, title, save_path=None):
#     plt.figure(figsize=(12, 10))
#     sns.heatmap(correlation_matrix, cmap='coolwarm', cbar=True, annot=False)
#     plt.title(title)
#     if save_path:
#         plt.savefig(save_path)
#     plt.show()










# src/visualization/visualize.py

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import os


# src/visualization/visualize.py

import os
import seaborn as sns
import matplotlib.pyplot as plt

def plot_correlation_heatmap(df, save_path):
    """
    Plot a correlation heatmap for the dataframe.
    
    Parameters:
    - df (DataFrame): The dataframe to analyze.
    - save_path (str): The path to save the heatmap image.
    
    Returns:
    - DataFrame: Correlation matrix.
    """
    plt.figure(figsize=(20, 16))
    
    # Select only numeric columns for correlation analysis
    numeric_df = df.select_dtypes(include=['float64', 'int64', 'float32', 'int32'])
    
    # Calculate the correlation matrix
    corr_matrix = numeric_df.corr()
    
    # Plot the heatmap
    sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm')
    plt.title('Correlation Matrix')
    
    if not os.path.exists(save_path):
        os.makedirs(save_path)
    
    plt.xticks(rotation=90)
    plt.yticks(rotation=0)
    plt.tight_layout()
    plt.savefig(os.path.join(save_path, 'correlation_heatmap.png'))
    plt.close()
    
    return corr_matrix

# def plot_missing_values(df, save_path):
#     """
#     Plot a heatmap of missing values for the dataframe.

#     Parameters:
#     - df (DataFrame): The dataframe to analyze.
#     - save_path (str): The path to save the heatmap image.
#     """
#     plt.figure(figsize=(12, 8))
#     sns.heatmap(df.isnull(), cbar=False, cmap='viridis')
#     plt.title('Missing Values Heatmap')
#     plt.savefig(save_path)
#     plt.close()

def plot_histogram(df, column, output_dir):
    plt.figure(figsize=(10, 5))
    sns.histplot(df[column].dropna(), kde=True)
    plt.title(f'Distribution of {column}')
    plt.savefig(f'{output_dir}/{column}_distribution.png')
    plt.close()

def plot_boxplot(df, column, output_dir):
    plt.figure(figsize=(10, 5))
    sns.boxplot(x=df[column].dropna())
    plt.title(f'Box Plot of {column}')
    plt.savefig(f'{output_dir}/{column}_boxplot.png')
    plt.close()

def plot_countplot(df, column, output_dir):
    plt.figure(figsize=(10, 5))
    sns.countplot(y=df[column].dropna())
    plt.title(f'Count Plot of {column}')
    plt.savefig(f'{output_dir}/{column}_countplot.png')
    plt.close()

def plot_scatter(df, x_column, y_column, output_dir):
    plt.figure(figsize=(10, 5))
    sns.scatterplot(data=df, x=x_column, y=y_column)
    plt.title(f'Scatter Plot: {x_column} vs {y_column}')
    plt.savefig(f'{output_dir}/{x_column}_vs_{y_column}_scatterplot.png')
    plt.close()

def plot_boxplot_comparison(df, x_column, y_column, output_dir):
    plt.figure(figsize=(10, 5))
    sns.boxplot(x=x_column, y=y_column, data=df)
    plt.title(f'Box Plot: {x_column} vs {y_column}')
    plt.savefig(f'{output_dir}/{x_column}_vs_{y_column}_boxplot.png')
    plt.close()





# def plot_univariate_analysis(df):
#     """
#     Perform univariate analysis by plotting the distribution of each feature.
    
#     Parameters:
#     - df (DataFrame): The dataframe to analyze.
#     """
#     for column in df.columns:
#         plt.figure(figsize=(10, 6))
#         if df[column].dtype == 'object':
#             sns.countplot(data=df, x=column)
#         else:
#             sns.histplot(data=df, x=column, kde=True)
#         plt.title(f'Distribution of {column}')
#         plt.show()

# def plot_bivariate_analysis(df, target_col):
#     """
#     Perform bivariate and multivariate analysis by plotting the relationship between features and the target variable.
    
#     Parameters:
#     - df (DataFrame): The dataframe to analyze.
#     - target_col (str): The name of the target column.
#     """
#     for column in df.columns:
#         if column != target_col:
#             plt.figure(figsize=(10, 6))
#             if df[column].dtype == 'object':
#                 sns.countplot(data=df, x=column, hue=target_col)
#             else:
#                 sns.scatterplot(data=df, x=column, y=target_col)
#             plt.title(f'Relationship between {column} and {target_col}')
#             plt.show()

# def plot_time_series_analysis(df):
#     """
#     Perform time series analysis by plotting time-related features to identify trends and seasonal effects.
    
#     Parameters:
#     - df (DataFrame): The dataframe to analyze.
#     """
#     time_cols = [col for col in df.columns if 'Date' in col or 'Time' in col]
#     for column in time_cols:
#         plt.figure(figsize=(10, 6))
#         if pd.api.types.is_datetime64_any_dtype(df[column]):
#             df.set_index(column)[df.columns.difference(time_cols)].plot()
#         else:
#             sns.lineplot(data=df, x=column, y=df.columns.difference(time_cols))
#         plt.title(f'Time Series Analysis of {column}')
#         plt.show()
