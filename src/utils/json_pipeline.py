# src/utils/json_pipeline.py

import os
import logging
from src.utils.json_utils import (clean_special_values, convert_to_json_compatible,
                                  encode_strings, sort_dict_keys, remove_unnecessary_fields)
from src.utils.file_operations import save_json_file

logger = logging.getLogger(__name__)

def json_preprocessing_pipeline(data: dict, fields_to_remove: list = None) -> dict:
    """
    Apply a series of preprocessing steps to the JSON data before saving.

    Parameters:
    data (dict): The input dictionary.
    fields_to_remove (list, optional): List of keys to remove from the dictionary.

    Returns:
    dict: The preprocessed dictionary.
    """
    data = clean_special_values(data)
    data = convert_to_json_compatible(data)
    data = encode_strings(data)
    data = sort_dict_keys(data)
    
    if fields_to_remove:
        data = remove_unnecessary_fields(data, fields_to_remove)
    
    return data

def save_json_with_pipeline(data: dict, file_path: str, fields_to_remove: list = None) -> None:
    """
    Preprocess the JSON data and save it to the specified file path.

    Parameters:
    data (dict): The input dictionary.
    file_path (str): The path to save the JSON file.
    fields_to_remove (list, optional): List of keys to remove from the dictionary.
    """
    try:
        data = json_preprocessing_pipeline(data, fields_to_remove)
        save_json_file(data, file_path)
        logging.info(f"JSON file saved successfully at {file_path}")
    except Exception as e:
        logging.error(f"Error saving JSON file at {file_path}: {e}")
        raise

