import os
import sys
from src.config_loader import load_paths, load_directories
from src.utils.directory_utils import ensure_directories_exist

def setup_project_environment():
    """
    Setup the project environment by setting the project root, loading paths, and ensuring directories exist.

    Returns:
    tuple: A tuple containing paths and directories dictionaries.
    """
    try:
        # Set the project root dynamically based on the location of this script
        project_root = find_project_root('src/config_loader.py')
        if project_root not in sys.path:
            sys.path.append(project_root)
        os.chdir(project_root)  # Ensure the working directory is set to project root
        print(f"Project root set to: {project_root}")

        # Load paths and directories from the configuration files
        paths = load_paths()
        directories = load_directories()

        # Ensure all necessary directories exist
        ensure_directories_exist(directories)

        return paths, directories
    except Exception as e:
        print(f"Error setting up project environment: {e}")
        raise

def find_project_root(marker_file='src/config_loader.py'):
    """
    Locate the project root using the marker file.

    Parameters:
    marker_file (str): The marker file to identify the project root.

    Returns:
    str: The path to the project root directory.

    Raises:
    FileNotFoundError: If the marker file is not found.
    """
    current_dir = os.getcwd()
    while current_dir != os.path.dirname(current_dir):
        if os.path.isfile(os.path.join(current_dir, marker_file)):
            return current_dir
        current_dir = os.path.dirname(current_dir)
    raise FileNotFoundError(f"Marker file '{marker_file}' not found in any parent directories.")








# # src/utils/environment_setup.py

# import os
# import sys
# from src.config_loader import load_paths, load_directories
# from src.utils.directory_utils import ensure_directories_exist

# def setup_project_environment():
#     """
#     Setup the project environment by setting the project root, loading paths, and ensuring directories exist.

#     Returns:
#     tuple: A tuple containing paths and directories dictionaries.
#     """
#     try:
#         # Set the project root dynamically based on the location of this script
#         project_root = find_project_root('src/config_loader.py')
#         if project_root not in sys.path:
#             sys.path.append(project_root)
#         os.chdir(project_root)  # Ensure the working directory is set to project root
#         print(f"Project root set to: {project_root}")

#         # Load paths and directories from the configuration files
#         paths = load_paths()
#         directories = load_directories()

#         # Ensure all necessary directories exist
#         ensure_directories_exist(directories)

#         return paths, directories
#     except Exception as e:
#         print(f"Error setting up project environment: {e}")
#         raise

# def find_project_root(marker_file='src/config_loader.py'):
#     """
#     Locate the project root using the marker file.

#     Parameters:
#     marker_file (str): The marker file to identify the project root.

#     Returns:
#     str: The path to the project root directory.

#     Raises:
#     FileNotFoundError: If the marker file is not found.
#     """
#     current_dir = os.getcwd()
#     while current_dir != os.path.dirname(current_dir):
#         if os.path.isfile(os.path.join(current_dir, marker_file)):
#             return current_dir
#         current_dir = os.path.dirname(current_dir)
#     raise FileNotFoundError(f"Marker file '{marker_file}' not found in any parent directories.")












# # def setup_project():
# #     """
# #     Set up the project environment by locating the project root and setting up paths and directories.

# #     Returns:
# #     tuple: A tuple containing paths and directories dictionaries.
# #     """
# #     project_root = find_project_root('src/config_loader.py')
# #     if project_root not in sys.path:
# #         sys.path.append(project_root)
# #     os.chdir(project_root)  # Ensure the working directory is set to project root
# #     print(f"Project root set to: {project_root}")
# #     return setup_project_environment()




# # # src/utils/environment_setup.py

# # import os
# # import sys
# # from src.config_loader import load_paths, load_directories
# # from src.utils.directory_utils import ensure_directories_exist

# # def setup_project_environment():
# #     """
# #     Setup the project environment by setting the project root, loading paths, and ensuring directories exist.

# #     Returns:
# #     tuple: A tuple containing paths and directories dictionaries.
# #     """
# #     try:
# #         # Set the project root dynamically based on the location of this script
# #         project_root = find_project_root('src/config_loader.py')
# #         if project_root not in sys.path:
# #             sys.path.append(project_root)
# #         os.chdir(project_root)  # Ensure the working directory is set to project root
# #         print(f"Project root set to: {project_root}")

# #         # Load paths and directories from the configuration files
# #         paths = load_paths()
# #         directories = load_directories()

# #         # Ensure all necessary directories exist
# #         ensure_directories_exist(directories)

# #         return paths, directories
# #     except Exception as e:
# #         print(f"Error setting up project environment: {e}")
# #         raise

# # def find_project_root(marker_file='src/config_loader.py'):
# #     """
# #     Locate the project root using the marker file.

# #     Parameters:
# #     marker_file (str): The marker file to identify the project root.

# #     Returns:
# #     str: The path to the project root directory.

# #     Raises:
# #     FileNotFoundError: If the marker file is not found.
# #     """
# #     current_dir = os.getcwd()
# #     while current_dir != os.path.dirname(current_dir):
# #         if os.path.isfile(os.path.join(current_dir, marker_file)):
# #             return current_dir
# #         current_dir = os.path.dirname(current_dir)
# #     raise FileNotFoundError(f"Marker file '{marker_file}' not found in any parent directories.")




# # # # src/utils/environment_setup.py

# # # import os
# # # import sys
# # # from src.config_loader import load_paths, load_directories
# # # from src.utils.directory_utils import ensure_directories_exist

# # # def setup_project_environment():
# # #     """
# # #     Setup the project environment by setting the project root, loading paths, and ensuring directories exist.

# # #     Returns:
# # #     tuple: A tuple containing paths and directories dictionaries.
# # #     """
# # #     try:
# # #         # Set the project root dynamically based on the location of this script
# # #         project_root = find_project_root('src/config_loader.py')
# # #         if project_root not in sys.path:
# # #             sys.path.append(project_root)
# # #         os.chdir(project_root)  # Ensure the working directory is set to project root
# # #         print(f"Project root set to: {project_root}")

# # #         # Load paths and directories from the configuration files
# # #         paths = load_paths()
# # #         directories = load_directories()

# # #         # Ensure all necessary directories exist
# # #         ensure_directories_exist(directories)

# # #         return paths, directories
# # #     except Exception as e:
# # #         print(f"Error setting up project environment: {e}")
# # #         raise

# # # def find_project_root(marker_file='src/config_loader.py'):
# # #     """
# # #     Locate the project root using the marker file.

# # #     Parameters:
# # #     marker_file (str): The marker file to identify the project root.

# # #     Returns:
# # #     str: The path to the project root directory.

# # #     Raises:
# # #     FileNotFoundError: If the marker file is not found.
# # #     """
# # #     current_dir = os.getcwd()
# # #     while current_dir != os.path.dirname(current_dir):
# # #         if os.path.isfile(os.path.join(current_dir, marker_file)):
# # #             return current_dir
# # #         current_dir = os.path.dirname(current_dir)
# # #     raise FileNotFoundError(f"Marker file '{marker_file}' not found in any parent directories.")
