# # src/utils/data_type_utils.py

# import pandas as pd
# from tqdm.notebook import tqdm

# def validate_data_types(df, metadata):
#     if 'features' not in metadata:
#         print("Metadata does not contain 'features'. Skipping data type validation.")
#         return

#     numerical_features = [feature for feature, details in metadata['features'].items() if details.get('classified_data_type') == 'numerical']
#     for feature in numerical_features:
#         if feature in df.columns:
#             if not pd.api.types.is_numeric_dtype(df[feature]):
#                 print(f"Warning: Feature {feature} is not of numerical type after conversion.")
#                 print(f"Sample data for {feature}:")
#                 print(df[feature].head())
#                 print(f"Unique values for {feature}: {df[feature].unique()}")
#                 print(f"Data type of {feature}: {df[feature].dtype}")

# def convert_data_types(df, metadata):
#     if 'features' not in metadata:
#         print("Metadata does not contain 'features'. Skipping data type conversion.")
#         return df

#     for feature, details in tqdm(metadata['features'].items(), desc="Converting data types"):
#         if feature in df.columns:
#             technical_data_type = details.get('technical_data_type', None)
#             if technical_data_type:
#                 if technical_data_type == 'int':
#                     df[feature] = pd.to_numeric(df[feature], errors='coerce').astype('Int64')
#                 elif technical_data_type == 'float':
#                     df[feature] = pd.to_numeric(df[feature], errors='coerce').astype('float64')
#                 elif technical_data_type == 'object':
#                     df[feature] = df[feature].astype('object')
#                 elif technical_data_type == 'datetime':
#                     df[feature] = pd.to_datetime(df[feature], errors='coerce')
#     return df

# def save_feature_data_types(df, metadata, path):
#     feature_data_types = [
#         {'Feature': feature, 'Technical Data Type': str(df[feature].dtype)}
#         for feature in df.columns
#     ]
#     from src.utils.file_operations import save_json_file
#     save_json_file(feature_data_types, path)
#     print(f"Feature data types saved to {path}")

