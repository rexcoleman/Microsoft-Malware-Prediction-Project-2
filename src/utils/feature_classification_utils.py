# # src/utils/feature_classification_utils.py

# import os
# import pandas as pd
# from src.utils.initialization import initialize_data_and_metadata
# from src.data.data_preparation import prepare_feature_classification_comparison_table
# from typing import Dict, Any, Tuple
# import logging

# # Configure logging
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# logger = logging.getLogger(__name__)

# def load_and_prepare_feature_classification_data_orchestration(paths: Dict[str, Any]) -> Tuple[pd.DataFrame, dict, Dict[str, Any], pd.DataFrame]:
#     """
#     Load sample data, initialize analysis results, and load metadata for feature classification.

#     Parameters:
#     paths (Dict[str, Any]): Dictionary containing file paths.

#     Returns:
#     Tuple[pd.DataFrame, dict, Dict[str, Any], pd.DataFrame]: Loaded train sample, metadata dictionary, paths dictionary, and comparison table.
#     """
#     try:
#         logger.info("Loading and preparing data for feature classification.")
#         train_sample, test_sample, schema, metadata = initialize_data_and_metadata(paths)
#         comparison_table = prepare_feature_classification_comparison_table(train_sample, metadata)
#         logger.info("Data loading and preparation completed successfully.")
#         return train_sample, metadata, paths, comparison_table
#     except Exception as e:
#         logger.error(f"Error loading and preparing data: {e}")
#         raise

# def print_feature_classification_comparison_summary(comparison_table: pd.DataFrame) -> None:
#     """
#     Print summary of feature classification discrepancies.

#     Parameters:
#     comparison_table (pd.DataFrame): The comparison table.
#     """
#     try:
#         total_features = comparison_table.shape[0]
#         discrepancies = comparison_table[comparison_table['Discrepancy'] == True]
#         total_discrepancies = discrepancies.shape[0]
#         total_non_discrepancies = total_features - total_discrepancies

#         logger.info("\n--- Summary of Feature Classification Discrepancies ---\n")
#         logger.info(f"Total Features: {total_features}")
#         logger.info(f"Features with Discrepancies: {total_discrepancies} ({(total_discrepancies / total_features) * 100:.2f}%)")
#         logger.info(f"Features without Discrepancies: {total_non_discrepancies} ({(total_non_discrepancies / total_features) * 100:.2f}%)")

#         logger.info("\n--- Comparison Table ---\n")
#         logger.info(f"{comparison_table.to_string(index=False)}")

#         logger.info("\nDescription:")
#         logger.info("Previously Analyzed Type: This classification type came from previous analysis and was updated using the new process to update the classified_data_type attribute in the metadata.")
#     except Exception as e:
#         logger.error(f"Error printing comparison summary: {e}")
#         raise





# # # src/utils/feature_classification_utils.py

# # import os
# # import pandas as pd
# # from src.utils.initialization import load_data_and_initialize_results
# # from src.data.data_preparation import load_metadata, prepare_feature_classification_comparison_table


# # def load_and_prepare_feature_classification_data_orchestration(paths):
# #     """
# #     Load sample data, initialize analysis results, and load metadata for feature classification.

# #     Parameters:
# #     paths (dict): Dictionary containing file paths.

# #     Returns:
# #     tuple: train_sample DataFrame, metadata dictionary, paths dictionary, and comparison table.
# #     """
# #     try:
# #         train_sample, test_sample, paths, schema = load_data_and_initialize_results(paths)
# #         metadata = load_metadata(paths['config']['feature_metadata'])
# #         comparison_table = prepare_feature_classification_comparison_table(train_sample, metadata)
# #         return train_sample, metadata, paths, comparison_table
# #     except Exception as e:
# #         print(f"Error loading and preparing data: {e}")
# #         raise

# # def print_feature_classification_comparison_summary(comparison_table):
# #     """
# #     Print summary of feature classification discrepancies.

# #     Parameters:
# #     comparison_table (pd.DataFrame): The comparison table.
# #     """
# #     try:
# #         total_features = comparison_table.shape[0]
# #         discrepancies = comparison_table[comparison_table['Discrepancy'] == True]
# #         total_discrepancies = discrepancies.shape[0]
# #         total_non_discrepancies = total_features - total_discrepancies

# #         print("\n--- Summary of Feature Classification Discrepancies ---\n")
# #         print(f"Total Features: {total_features}")
# #         print(f"Features with Discrepancies: {total_discrepancies} ({(total_discrepancies/total_features)*100:.2f}%)")
# #         print(f"Features without Discrepancies: {total_non_discrepancies} ({(total_non_discrepancies/total_features)*100:.2f}%)")

# #         print("\n--- Comparison Table ---\n")
# #         print(comparison_table.to_string(index=False))

# #         print("\nDescription:")
# #         print("Previously Analyzed Type: This classification type came from # notebooks/01_data_understanding/01a_initial_data_understanding.ipynb and was updated using # notebooks/01_data_understanding/01b_initial_data_understanding_update_metadata.ipynb to update the classified_data_type attribute in # config/feature_metadata.yaml.")
# #     except Exception as e:
# #         print(f"Error printing comparison summary: {e}")
# #         raise




# # def load_and_prepare_feature_classification_data_orchestration(paths, json_files=None):
# #     """
# #     Load sample data, initialize analysis results, and load metadata for feature classification.

# #     Parameters:
# #     paths (dict): Dictionary containing file paths.
# #     json_files (list, optional): List of JSON files to initialize. Defaults to None.

# #     Returns:
# #     tuple: train_sample DataFrame, metadata dictionary, paths dictionary, and comparison table.
# #     """
# #     if json_files is None:
# #         json_files = [
# #             'data_overview.json',
# #             'data_types.json',
# #             'stat_summary.json',
# #             'target_analysis.json',
# #             'missing_values.json',
# #             'feature_balance.json',
# #             'correlations.json',
# #             'high_correlation_pairs.json',
# #             'feature_interactions.json',
# #             'feature_classification.json',
# #             'target_correlations.json'
# #         ]
    
# #     try:
# #         train_sample, test_sample, paths = load_data_and_initialize_results(paths, json_files)
# #         metadata = load_metadata(paths['config']['feature_metadata'])
# #         comparison_table = prepare_feature_classification_comparison_table(train_sample, metadata)
# #         return train_sample, metadata, paths, comparison_table
# #     except Exception as e:
# #         print(f"Error loading and preparing data: {e}")
# #         raise



# # def load_and_prepare_feature_classification_data_orchestration(paths, json_files):
# #     """
# #     Load sample data, initialize analysis results, and load metadata for feature classification.

# #     Parameters:
# #     paths (dict): Dictionary containing file paths.
# #     json_files (list): List of JSON files to initialize.

# #     Returns:
# #     tuple: train_sample DataFrame, metadata dictionary, paths dictionary, and comparison table.
# #     """
# #     try:
# #         train_sample, test_sample, paths = load_data_and_initialize_results(paths, json_files)
# #         metadata = load_metadata(paths['config']['feature_metadata'])
# #         comparison_table = prepare_feature_classification_comparison_table(train_sample, metadata)
# #         return train_sample, metadata, paths, comparison_table
# #     except Exception as e:
# #         print(f"Error loading and preparing data: {e}")
# #         raise
