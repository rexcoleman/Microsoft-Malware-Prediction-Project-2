# src/utils/feature_classification_utils.py

import os
import pandas as pd
from src.utils.initialization import load_data_and_initialize_results
from src.data.data_preparation import load_metadata, prepare_feature_classification_comparison_table

def load_and_prepare_feature_classification_data_orchestration(paths, json_files):
    """
    Load sample data, initialize analysis results, and load metadata for feature classification.

    Parameters:
    paths (dict): Dictionary containing file paths.
    json_files (list): List of JSON files to initialize.

    Returns:
    tuple: train_sample DataFrame, metadata dictionary, paths dictionary, and comparison table.
    """
    try:
        train_sample, test_sample, paths = load_data_and_initialize_results(paths, json_files)
        metadata = load_metadata(paths['config']['feature_metadata'])
        comparison_table = prepare_feature_classification_comparison_table(train_sample, metadata)
        return train_sample, metadata, paths, comparison_table
    except Exception as e:
        print(f"Error loading and preparing data: {e}")
        raise

def print_feature_classification_comparison_summary(comparison_table):
    """
    Print summary of feature classification discrepancies.

    Parameters:
    comparison_table (pd.DataFrame): The comparison table.
    """
    try:
        total_features = comparison_table.shape[0]
        discrepancies = comparison_table[comparison_table['Discrepancy'] == True]
        total_discrepancies = discrepancies.shape[0]
        total_non_discrepancies = total_features - total_discrepancies

        print("\n--- Summary of Feature Classification Discrepancies ---\n")
        print(f"Total Features: {total_features}")
        print(f"Features with Discrepancies: {total_discrepancies} ({(total_discrepancies/total_features)*100:.2f}%)")
        print(f"Features without Discrepancies: {total_non_discrepancies} ({(total_non_discrepancies/total_features)*100:.2f}%)")

        print("\n--- Comparison Table ---\n")
        print(comparison_table.to_string(index=False))

        print("\nDescription:")
        print("Previously Analyzed Type: This classification type came from # notebooks/01_data_understanding/01a_initial_data_understanding.ipynb and was updated using # notebooks/01_data_understanding/01b_initial_data_understanding_update_metadata.ipynb to update the classified_data_type attribute in # config/feature_metadata.yaml.")
    except Exception as e:
        print(f"Error printing comparison summary: {e}")
        raise

