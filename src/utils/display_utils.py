# src/utils/display_utils.py

import pandas as pd
from IPython.display import display, HTML

def format_dataframe_for_display(df, float_format="{:.6f}"):
    """
    Format a DataFrame for display with consistent number formatting and left alignment.

    Parameters:
    df (pd.DataFrame): DataFrame to format.
    float_format (str): Format string for floating-point numbers.

    Returns:
    pd.Styler: Styled DataFrame ready for display.
    """
    # Apply number formatting
    styler = df.style.format(formatter={col: float_format for col in df.select_dtypes(include=['float']).columns})

    # Apply left alignment
    styler = styler.set_table_styles([
        {'selector': 'th', 'props': [('text-align', 'left')]},
        {'selector': 'td', 'props': [('text-align', 'left')]}
    ])
    
    return styler

def display_side_by_side(df1, df2, title1="", title2="", description1="", description2="", float_format="{:.6f}", table_style="", width="50%"):
    """
    Display two DataFrames side by side as HTML with optional titles, descriptions, consistent number formatting, and custom table styling.

    Parameters:
    df1 (pd.DataFrame): First DataFrame to display.
    df2 (pd.DataFrame): Second DataFrame to display.
    title1 (str): Title of the first DataFrame display.
    title2 (str): Title of the second DataFrame display.
    description1 (str): Description of the first DataFrame display.
    description2 (str): Description of the second DataFrame display.
    float_format (str): Format string for floating-point numbers.
    table_style (str): CSS styling for the table.
    width (str): Width of each table.
    """
    # Remove index from the DataFrames
    df1 = df1.reset_index(drop=True)
    df2 = df2.reset_index(drop=True)

    # Format the DataFrames
    styler1 = format_dataframe_for_display(df1, float_format=float_format)
    styler2 = format_dataframe_for_display(df2, float_format=float_format)

    # Define default table style if not provided
    if not table_style:
        table_style = f"""
            <style>
            .dataframe-container {{
                display: flex;
                justify-content: space-between;
                font-family: Arial, sans-serif;
            }}
            .dataframe-container .table {{
                border-collapse: collapse;
                width: {width};
                margin-right: 0;
            }}
            .dataframe-container th, .dataframe-container td {{
                border: 1px solid #dddddd;
                text-align: right;
                padding: 8px;
            }}
            .dataframe-container th {{
                background-color: #f2f2f2;
            }}
            .dataframe-container tr:nth-child(even) {{
                background-color: #f9f9f9;
            }}
            </style>
        """

    # Display titles and descriptions if provided
    title_html1 = f"<h3>{title1}</h3>" if title1 else ""
    title_html2 = f"<h3>{title2}</h3>" if title2 else ""
    description_html1 = f"<p>{description1}</p>" if description1 else ""
    description_html2 = f"<p>{description2}</p>" if description2 else ""

    # Generate the HTML representation of the tables
    html1 = f"{title_html1}{description_html1}{styler1.hide(axis='index').to_html()}"
    html2 = f"{title_html2}{description_html2}{styler2.hide(axis='index').to_html()}"
    html = f"<div class='dataframe-container'>{table_style}<div class='table'>{html1}</div><div class='table'>{html2}</div></div>"

    display(HTML(html))


def display_dataframe_as_html(df, title="", description="", float_format="{:.6f}", table_style=""):
    """
    Display a DataFrame as HTML with an optional title, description, consistent number formatting, and custom table styling.
    Also prints the size of the table below it.

    Parameters:
    df (pd.DataFrame): DataFrame to display.
    title (str): Title of the DataFrame display.
    description (str): Description of the DataFrame display.
    float_format (str): Format string for floating-point numbers.
    table_style (str): CSS styling for the table.
    """
    # Apply number formatting
    formatted_df = df.copy()
    for col in formatted_df.select_dtypes(include=['float']):
        formatted_df[col] = formatted_df[col].map(lambda x: float_format.format(x))

    # Define default table style if not provided
    if not table_style:
        table_style = """
            <style>
            table {
                border-collapse: collapse;
                width: 100%;
                font-family: Arial, sans-serif;
            }
            th, td {
                border: 1px solid #dddddd;
                text-align: left;
                padding: 8px;
            }
            th {
                background-color: #f2f2f2;
            }
            tr:nth-child(even) {
                background-color: #f9f9f9;
            }
            </style>
        """

    # Display title if provided
    title_html = f"<h3>{title}</h3>" if title else ""

    # Display description if provided
    description_html = f"<p>{description}</p>" if description else ""

    # Display table size
    size_html = f"<p>Size of {title}: {df.shape}</p>" if title else f"<p>Size of table: {df.shape}</p>"

    # Generate the HTML representation of the table
    html = table_style + title_html + size_html + formatted_df.to_html(index=False, escape=False) + description_html 

    display(HTML(html))

from IPython.display import display, HTML
import pandas as pd

def display_width_compact_dataframe(df, title="", description=""):
    """
    Display a DataFrame in a Jupyter notebook with horizontal scrolling.

    Parameters:
    df (pd.DataFrame): DataFrame to display.
    title (str): Title of the DataFrame display.
    description (str): Description of the DataFrame display.
    """
    # Convert the DataFrame to HTML
    table_html = df.to_html(index=False)

    # Add styling to make the table scrollable and handle cell overflow
    html = f"""
    <div style='width: 100%; overflow-x: auto;'>
        <h3>{title}</h3>
        <p>Size of the table: {df.shape}</p>
        
        <style>
            .dataframe tbody tr td {{
                max-width: 150px;  /* Set your desired width */
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }}
            .dataframe tbody tr td:hover {{
                overflow: visible;
                white-space: normal;
                position: absolute;
                z-index: 1;
                background: white;
                padding: 2px;
                border: 1px solid #dddddd;
                max-width: none;
            }}
        </style>
        {table_html}
        <p>{description}</p>
    </div>
    """
    display(HTML(html))




def print_comparison_summary(comparison_table):
    """
    Print summary of feature classification discrepancies.

    Parameters:
    comparison_table (pd.DataFrame): The comparison table.
    """
    try:
        total_features = comparison_table.shape[0]
        discrepancies = comparison_table[comparison_table['Discrepancy'] == True]
        total_discrepancies = discrepancies.shape[0]
        total_non_discrepancies = total_features - total_discrepancies

        print("\n--- Summary of Feature Classification Discrepancies ---\n")
        print(f"Total Features: {total_features}")
        print(f"Features with Discrepancies: {total_discrepancies} ({(total_discrepancies/total_features)*100:.2f}%)")
        print(f"Features without Discrepancies: {total_non_discrepancies} ({(total_non_discrepancies/total_features)*100:.2f}%)")

        print("\n--- Comparison Table ---\n")
        print(comparison_table.to_string(index=False))

        print("\nDescription:")
        print("Previously Analyzed Type: This classification type came from # notebooks/01_data_understanding/01a_initial_data_understanding.ipynb and was updated using # notebooks/01_data_understanding/01b_initial_data_understanding_update_metadata.ipynb to update the classified_data_type attribute in # config/feature_metadata.yaml.")
    except Exception as e:
        print(f"Error printing comparison summary: {e}")
        raise
