# src/utils/display_utils.py

import pandas as pd
from IPython.display import display, HTML

def display_dataframe_as_html(df, title="", description="", float_format="{:.6f}", table_style=""):
    """
    Display a DataFrame as HTML with an optional title, description, consistent number formatting, and custom table styling.
    Also prints the size of the table below it.

    Parameters:
    df (pd.DataFrame): DataFrame to display.
    title (str): Title of the DataFrame display.
    description (str): Description of the DataFrame display.
    float_format (str): Format string for floating-point numbers.
    table_style (str): CSS styling for the table.
    """
    # Apply number formatting
    formatted_df = df.copy()
    for col in formatted_df.select_dtypes(include=['float']):
        formatted_df[col] = formatted_df[col].map(lambda x: float_format.format(x))

    # Define default table style if not provided
    if not table_style:
        table_style = """
            <style>
            table {
                border-collapse: collapse;
                width: 100%;
                font-family: Arial, sans-serif;
            }
            th, td {
                border: 1px solid #dddddd;
                text-align: left;
                padding: 8px;
            }
            th {
                background-color: #f2f2f2;
            }
            tr:nth-child(even) {
                background-color: #f9f9f9;
            }
            </style>
        """

    # Display title if provided
    title_html = f"<h3>{title}</h3>" if title else ""

    # Display description if provided
    description_html = f"<p>{description}</p>" if description else ""

    # Display table size
    size_html = f"<p>Size of {title}: {df.shape}</p>" if title else f"<p>Size of table: {df.shape}</p>"

    # Generate the HTML representation of the table
    html = table_style + title_html + formatted_df.to_html(index=False, escape=False) + description_html + size_html

    display(HTML(html))



def print_comparison_summary(comparison_table):
    """
    Print summary of feature classification discrepancies.

    Parameters:
    comparison_table (pd.DataFrame): The comparison table.
    """
    try:
        total_features = comparison_table.shape[0]
        discrepancies = comparison_table[comparison_table['Discrepancy'] == True]
        total_discrepancies = discrepancies.shape[0]
        total_non_discrepancies = total_features - total_discrepancies

        print("\n--- Summary of Feature Classification Discrepancies ---\n")
        print(f"Total Features: {total_features}")
        print(f"Features with Discrepancies: {total_discrepancies} ({(total_discrepancies/total_features)*100:.2f}%)")
        print(f"Features without Discrepancies: {total_non_discrepancies} ({(total_non_discrepancies/total_features)*100:.2f}%)")

        print("\n--- Comparison Table ---\n")
        print(comparison_table.to_string(index=False))

        print("\nDescription:")
        print("Previously Analyzed Type: This classification type came from # notebooks/01_data_understanding/01a_initial_data_understanding.ipynb and was updated using # notebooks/01_data_understanding/01b_initial_data_understanding_update_metadata.ipynb to update the classified_data_type attribute in # config/feature_metadata.yaml.")
    except Exception as e:
        print(f"Error printing comparison summary: {e}")
        raise
