# src/utils/json_utils.py

import json
import numpy as np

def clean_special_values(data: dict) -> dict:
    """
    Replace NaN, Infinity, and -Infinity values with None in the dictionary.

    Parameters:
    data (dict): The input dictionary.

    Returns:
    dict: The cleaned dictionary.
    """
    for key, value in data.items():
        if isinstance(value, dict):
            data[key] = clean_special_values(value)
        elif isinstance(value, (float, int)):
            if np.isnan(value) or np.isinf(value):
                data[key] = None
    return data

def convert_to_json_compatible(data: dict) -> dict:
    """
    Convert NumPy types to Python native types for JSON compatibility.

    Parameters:
    data (dict): The input dictionary.

    Returns:
    dict: The dictionary with JSON-compatible types.
    """
    for key, value in data.items():
        if isinstance(value, dict):
            data[key] = convert_to_json_compatible(value)
        elif isinstance(value, (np.integer, np.floating)):
            data[key] = value.item()
    return data

def encode_strings(data: dict) -> dict:
    """
    Ensure all string values are properly encoded as UTF-8.

    Parameters:
    data (dict): The input dictionary.

    Returns:
    dict: The dictionary with UTF-8 encoded strings.
    """
    for key, value in data.items():
        if isinstance(value, dict):
            data[key] = encode_strings(value)
        elif isinstance(value, str):
            data[key] = value.encode('utf-8').decode('utf-8')
    return data

def sort_dict_keys(d: dict) -> dict:
    """
    Recursively sort the keys of a dictionary.

    Parameters:
    d (dict): The input dictionary.

    Returns:
    dict: A new dictionary with sorted keys.
    """
    return {key: sort_dict_keys(value) if isinstance(value, dict) else value for key, value in sorted(d.items())}


def remove_unnecessary_fields(data: dict, fields_to_remove: list) -> dict:
    """
    Remove unnecessary fields from the dictionary.

    Parameters:
    data (dict): The input dictionary.
    fields_to_remove (list): List of keys to remove from the dictionary.

    Returns:
    dict: The cleaned dictionary.
    """
    for field in fields_to_remove:
        if field in data:
            del data[field]
    for key, value in data.items():
        if isinstance(value, dict):
            data[key] = remove_unnecessary_fields(value, fields_to_remove)
    return data
