# src/utils/initialization.py

import os
import json
import logging
import pandas as pd
from src.utils.file_operations import load_json_file, load_yaml
from src.config_loader import load_paths
from src.utils.validation_utils import validate_data_types
from src.feature_engineering.data_types import convert_data_types
from src.utils.data_loading_utils import read_csv_with_progress

def load_train_and_test_data_initialize_schema(train_data_path: str, test_data_path: str, paths):
    """
    Load train and test data, and initialize the schema.

    Parameters:
    train_data_path (str): Path to the train data file.
    test_data_path (str): Path to the test data file.
    paths (dict): Dictionary containing file paths.

    Returns:
    tuple: Train data, test data, and schema.
    """
    try:
        logging.info(f"Loading train data from {train_data_path}")
        train_data = read_csv_with_progress(train_data_path)

        logging.info(f"Loading test data from {test_data_path}")
        test_data = read_csv_with_progress(test_data_path)
        
        logging.info("Loading feature metadata schema")
        schema_path = paths['config']['schemas']['feature_metadata_complete_schema']
        schema = load_json_file(schema_path) if schema_path.endswith('.json') else load_yaml(schema_path)
        
        return train_data, test_data, schema
    except Exception as e:
        logging.error(f"Error initializing feature metadata update: {e}")
        raise

def initialize_metadata(schema, train_sample, test_sample):
    def initialize_nested_dict(schema_section):
        initialized_dict = {}
        for key, value in schema_section.items():
            if isinstance(value, dict):
                initialized_dict[key] = initialize_nested_dict(value)
            elif isinstance(value, list):
                initialized_dict[key] = []
            else:
                initialized_dict[key] = value
        return initialized_dict
    
    metadata = {'features': {}}
    default_attributes = schema['metadata_schema']['default_attributes']
    
    # Initialize metadata for each feature in train_sample
    for feature in train_sample.columns:
        metadata['features'][feature] = initialize_nested_dict(default_attributes)
    
    # Initialize data_overview section
    metadata['data_overview'] = {
        'train_shape': list(train_sample.shape),
        'test_shape': list(test_sample.shape),
        'columns': list(train_sample.columns)
    }

    return metadata





def load_train_and_test_data(train_data_path: str, test_data_path: str, paths):
    """
    Load train and test data.

    Parameters:
    train_data_path (str): Path to the train data file.
    test_data_path (str): Path to the test data file.
    paths (dict): Dictionary containing file paths.

    Returns:
    tuple: Train data and test data.
    """
    try:
        logging.info(f"Loading train data from {train_data_path}")
        train_data = read_csv_with_progress(train_data_path)

        logging.info(f"Loading test data from {test_data_path}")
        test_data = read_csv_with_progress(test_data_path)
        
        return train_data, test_data
    except Exception as e:
        logging.error(f"Error initializing feature metadata update: {e}")
        raise


def initialize_feature_metadata_update_pre_data_type_handling(data_file_path: str, paths):
    """
    Load the specific CSV data file and its corresponding schema, then convert data types based on metadata.

    Parameters:
    data_file_path (str): Path to the CSV data file.

    Returns:
    pd.DataFrame: The loaded data.
    dict: The loaded schema.
    dict: The loaded feature metadata.
    list: The loaded JSON files.
    dict: The paths dictionary.
    """
    try:
        logging.info(f"Loading data from {data_file_path}")
        data = read_csv_with_progress(data_file_path)
        
        logging.info("Loading feature metadata schema")
        schema = load_yaml(paths['config']['feature_metadata_schema'])
        logging.debug(f"Schema: {schema}")

        logging.info("Loading feature metadata")
        feature_metadata = load_yaml(paths['config']['feature_metadata'])
        logging.debug(f"Metadata: {feature_metadata}")
        
        logging.info("Loading JSON files")
        json_files = load_json_files()
        
        return data, schema, feature_metadata, json_files, paths
    except Exception as e:
        logging.error(f"Error initializing feature metadata update: {e}")
        raise



















# def initialize_feature_metadata_update(data_file_path: str):
#     """
#     Load the specific CSV data file and its corresponding schema, then convert data types based on metadata.

#     Parameters:
#     data_file_path (str): Path to the CSV data file.

#     Returns:
#     pd.DataFrame: The loaded data.
#     dict: The loaded schema.
#     dict: The loaded feature metadata.
#     list: The loaded JSON files.
#     dict: The paths dictionary.
#     """
#     try:
#         logging.info(f"Loading data from {data_file_path}")
#         data = read_csv_with_progress(data_file_path)
        
#         logging.info("Loading paths configuration")
#         paths = load_paths()
        
#         logging.info("Loading feature metadata schema")
#         schema = load_yaml(paths['config']['feature_metadata_schema'])
        
#         logging.info("Loading feature metadata")
#         feature_metadata = load_yaml(paths['config']['feature_metadata'])
        
#         logging.info("Loading JSON files")
#         json_files = load_json_files()
        
#         logging.info("Converting data types based on feature metadata")
#         data = convert_data_types(data, feature_metadata)
        
#         # Validate data types after conversion
#         logging.info("Validating data types after conversion")
#         validate_data_types(data, feature_metadata)
        
#         return data, schema, feature_metadata, json_files, paths
#     except Exception as e:
#         logging.error(f"Error initializing feature metadata update: {e}")
#         raise



# def initialize_train_test_and_data_update(train_data_path: str, test_data_path: str):
#     """
#     Load the specific CSV data file and its corresponding schema, then convert data types based on metadata.

#     Parameters:
#     data_file_path (str): Path to the CSV data file.

#     Returns:
#     pd.DataFrame: The loaded data.
#     dict: The loaded schema.
#     dict: The loaded feature metadata.
#     list: The loaded JSON files.
#     dict: The paths dictionary.
#     """
#     try:
#         logging.info(f"Loading train data from {train_data_path}")
#         train_data = read_csv_with_progress(train_data_path)

#         logging.info(f"Loading train data from {test_data_path}")
#         test_data = read_csv_with_progress(test_data_path)
        
#         logging.info("Loading paths configuration")
#         paths = load_paths()
        
#         logging.info("Loading feature metadata schema")
#         schema = load_yaml(paths['config']['feature_metadata_schema'])
        
#         logging.info("Loading feature metadata")
#         feature_metadata = load_yaml(paths['config']['feature_metadata'])
        
#         # logging.info("Converting train_data data types based on feature metadata")
#         train_data = convert_data_types(train_data, feature_metadata)

#         # Validate data types after conversion
#         # logging.info("Validating data types after conversion")
#         validate_data_types(train_data, feature_metadata)

#         # logging.info("Converting test_data data types based on feature metadata")
#         test_data = convert_data_types(test_data, feature_metadata)
        
#         # Validate data types after conversion
#         # logging.info("Validating data types after conversion")
#         validate_data_types(test_data, feature_metadata)
        
#         return train_data, test_data, schema, feature_metadata
#     except Exception as e:
#         logging.error(f"Error initializing feature metadata update: {e}")
#         raise





# def load_data_and_initialize_results(paths):
#     """
#     Load the data and initialize the results paths.

#     Parameters:
#     paths (dict): Dictionary containing file paths.

#     Returns:
#     pd.DataFrame, pd.DataFrame, dict, dict: Train sample, test sample, paths, schema.
#     """
#     train_sample = pd.read_csv(paths['data']['train_sample'])
#     test_sample = pd.read_csv(paths['data']['test_sample'])
#     schema = load_yaml(paths['config']['feature_metadata_schema'])
#     return train_sample, test_sample, paths, schema









# def initialize_analysis_results(results_path, json_files):
#     """
#     Initialize analysis results by creating necessary JSON files.

#     Parameters:
#     results_path (str): Path to the directory for analysis results.
#     json_files (list): List of JSON files to initialize.
#     """
#     try:
#         for json_file in json_files:
#             file_path = os.path.join(results_path, json_file)
#             if not os.path.exists(file_path):
#                 with open(file_path, 'w') as f:
#                     f.write('{}')  # Create an empty JSON object
#     except Exception as e:
#         print(f"Error initializing analysis results: {e}")
#         raise





# # def initialize_metadata(schema, train_sample):
# #     """
# #     Initialize metadata based on schema and train sample.

# #     Parameters:
# #     schema (dict): Schema to validate against.
# #     train_sample (pd.DataFrame): The training sample data.

# #     Returns:
# #     dict: Initialized metadata.
# #     """
# #     metadata = {'features': {}}
# #     for feature in train_sample.columns:
# #         metadata['features'][feature] = {}
# #         for key, value in schema['default_attributes'].items():
# #             # Initialize nested dictionaries for keys that require them
# #             if isinstance(value, dict):
# #                 metadata['features'][feature][key] = {}
# #             elif isinstance(value, list):
# #                 metadata['features'][feature][key] = []
# #             else:
# #                 metadata['features'][feature][key] = value
# #     return metadata

# def load_yaml(filepath):
#     """
#     Load a YAML file.

#     Parameters:
#     filepath (str): Path to the YAML file.

#     Returns:
#     dict: Loaded YAML data.
#     """
#     with open(filepath, 'r') as file:
#         return yaml.safe_load(file)

# def load_sample_data_and_paths(paths):
#     """
#     Load sample data and return the data along with updated paths.

#     Parameters:
#     paths (dict): Dictionary containing file paths.

#     Returns:
#     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
#     """
#     try:
#         train_sample, test_sample = load_sample_data(paths)
#         return train_sample, test_sample, paths
#     except Exception as e:
#         print(f"Error loading sample data: {e}")
#         raise

# def load_sample_data(paths):
#     """
#     Load sample data from the specified paths.

#     Parameters:
#     paths (dict): Dictionary containing file paths.

#     Returns:
#     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
#     """
#     try:
#         train_sample = pd.read_csv(paths['data']['train_sample'])
#         test_sample = pd.read_csv(paths['data']['test_sample'])
#         return train_sample, test_sample
#     except FileNotFoundError as e:
#         print(f"Error reading sample data files: File not found {e.filename}")
#         raise
#     except pd.errors.ParserError as e:
#         print(f"Error reading sample data files: Parsing error {e}")
#         raise
#     except Exception as e:
#         print(f"Unexpected error reading sample data files: {e}")
#         raise






# # # src/utils/initialization.py

# # import os
# # import yaml
# # import logging
# # import pandas as pd
# # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results
# # from src.config_loader import load_json_files
# # from src.utils.file_operations import load_yaml



# # def initialize_metadata(schema, train_sample):
# #     """
# #     Initialize metadata based on schema and train sample.

# #     Parameters:
# #     schema (dict): Schema to validate against.
# #     train_sample (pd.DataFrame): The training sample data.

# #     Returns:
# #     dict: Initialized metadata.
# #     """
# #     metadata = {'features': {}}
# #     for feature in train_sample.columns:
# #         metadata['features'][feature] = {}
# #         for key, value in schema['default_attributes'].items():
# #             # Initialize nested dictionaries for keys that require them
# #             if isinstance(value, dict):
# #                 metadata['features'][feature][key] = {}
# #             elif isinstance(value, list):
# #                 metadata['features'][feature][key] = []
# #             else:
# #                 metadata['features'][feature][key] = value
# #     return metadata

# # def load_yaml(filepath):
# #     """
# #     Load a YAML file.

# #     Parameters:
# #     filepath (str): Path to the YAML file.

# #     Returns:
# #     dict: Loaded YAML data.
# #     """
# #     with open(filepath, 'r') as file:
# #         return yaml.safe_load(file)
















# # def load_data_and_initialize_results(paths):
# #     """
# #     Load sample data and initialize analysis results.

# #     Parameters:
# #     paths (dict): Dictionary containing file paths.

# #     Returns:
# #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, paths dictionary, and metadata schema.
# #     """
# #     try:
# #         json_files = load_json_files()  # Load JSON files from configuration
# #         # Load sample data
# #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# #         # Initialize analysis results
# #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# #         # Load metadata schema
# #         schema_path = paths['config']['feature_metadata_schema']
# #         schema = load_yaml(schema_path)
        
# #         return train_sample, test_sample, paths, schema
# #     except Exception as e:
# #         print(f"Error loading data and initializing results: {e}")
# #         raise





# # def load_sample_data_and_paths(paths):
# #     """
# #     Load sample data and return the data along with updated paths.

# #     Parameters:
# #     paths (dict): Dictionary containing file paths.

# #     Returns:
# #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# #     """
# #     try:
# #         train_sample, test_sample = load_sample_data(paths)
# #         return train_sample, test_sample, paths
# #     except Exception as e:
# #         print(f"Error loading sample data: {e}")
# #         raise

# # def load_sample_data(paths):
# #     """
# #     Load sample data from the specified paths.

# #     Parameters:
# #     paths (dict): Dictionary containing file paths.

# #     Returns:
# #     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
# #     """
# #     try:
# #         train_sample = pd.read_csv(paths['data']['train_sample'])
# #         test_sample = pd.read_csv(paths['data']['test_sample'])
# #         return train_sample, test_sample
# #     except FileNotFoundError as e:
# #         print(f"Error reading sample data files: File not found {e.filename}")
# #         raise
# #     except pd.errors.ParserError as e:
# #         print(f"Error reading sample data files: Parsing error {e}")
# #         raise
# #     except Exception as e:
# #         print(f"Unexpected error reading sample data files: {e}")
# #         raise

# # def initialize_analysis_results(results_path, json_files):
# #     """
# #     Initialize analysis results by creating necessary JSON files.

# #     Parameters:
# #     results_path (str): Path to the directory for analysis results.
# #     json_files (list): List of JSON files to initialize.
# #     """
# #     try:
# #         for json_file in json_files:
# #             file_path = os.path.join(results_path, json_file)
# #             if not os.path.exists(file_path):
# #                 with open(file_path, 'w') as f:
# #                     f.write('{}')  # Create an empty JSON object
# #     except Exception as e:
# #         print(f"Error initializing analysis results: {e}")
# #         raise










# # # def load_data_and_initialize_results(paths):
# # #     """
# # #     Load sample data and initialize analysis results.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, paths dictionary, and metadata schema.
# # #     """
# # #     try:
# # #         json_files = load_json_files()  # Load JSON files from configuration
# # #         # Load sample data
# # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # #         # Initialize analysis results
# # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # #         # Load metadata schema
# # #         schema_path = paths['config']['feature_metadata_schema']
# # #         schema = load_yaml(schema_path)
        
# # #         return train_sample, test_sample, paths, schema
# # #     except Exception as e:
# # #         print(f"Error loading data and initializing results: {e}")
# # #         raise




# # # def initialize_feature_metadata(paths):
# # #     """
# # #     Initialize feature metadata using the paths provided.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths from paths.yaml.
# # #     """
# # #     try:
# # #         # feature_metadata, metadata_schema = ensure_data_overview(paths)
# # #         # feature_descriptions = load_feature_descriptions(paths['config']['feature_descriptions'])

# # #         # feature_metadata = populate_feature_metadata(feature_metadata, feature_descriptions, metadata_schema)

# # #         save_yaml(feature_metadata, paths['config']['feature_metadata'])
# # #         logging.info(f"Feature metadata initialized and saved to: {paths['config']['feature_metadata']}")
# # #     except Exception as e:
# # #         logging.error(f"Error initializing feature metadata: {e}", exc_info=True)

# # # # src/utils/initialization.py

# # # import os
# # # import pandas as pd
# # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results
# # # from src.config_loader import load_json_files  

# # # def load_data_and_initialize_results(paths):
# # #     """
# # #     Load sample data and initialize analysis results.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # #     """
# # #     try:
# # #         json_files = load_json_files()  # Load JSON files from configuration
# # #         # Load sample data
# # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # #         # Initialize analysis results
# # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # #         return train_sample, test_sample, paths
# # #     except Exception as e:
# # #         print(f"Error loading data and initializing results: {e}")
# # #         raise

# # # def load_sample_data_and_paths(paths):
# # #     """
# # #     Load sample data and return the data along with updated paths.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # #     """
# # #     try:
# # #         train_sample, test_sample = load_sample_data(paths)
# # #         return train_sample, test_sample, paths
# # #     except Exception as e:
# # #         print(f"Error loading sample data: {e}")
# # #         raise

# # # def load_sample_data(paths):
# # #     """
# # #     Load sample data from the specified paths.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
# # #     """
# # #     try:
# # #         train_sample = pd.read_csv(paths['data']['train_sample'])
# # #         test_sample = pd.read_csv(paths['data']['test_sample'])
# # #         return train_sample, test_sample
# # #     except FileNotFoundError as e:
# # #         print(f"Error reading sample data files: File not found {e.filename}")
# # #         raise
# # #     except pd.errors.ParserError as e:
# # #         print(f"Error reading sample data files: Parsing error {e}")
# # #         raise
# # #     except Exception as e:
# # #         print(f"Unexpected error reading sample data files: {e}")
# # #         raise

# # # def initialize_analysis_results(results_path, json_files):
# # #     """
# # #     Initialize analysis results by creating necessary JSON files.

# # #     Parameters:
# # #     results_path (str): Path to the directory for analysis results.
# # #     json_files (list): List of JSON files to initialize.
# # #     """
# # #     try:
# # #         for json_file in json_files:
# # #             file_path = os.path.join(results_path, json_file)
# # #             if not os.path.exists(file_path):
# # #                 with open(file_path, 'w') as f:
# # #                     f.write('{}')  # Create an empty JSON object
# # #     except Exception as e:
# # #         print(f"Error initializing analysis results: {e}")
# # #         raise











# # # def load_data_and_initialize_results(paths, json_files):
# # #     """
# # #     Load sample data and initialize analysis results.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.
# # #     json_files (list): List of JSON files to initialize.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # #     """
# # #     try:
# # #         # Load sample data
# # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # #         # Initialize analysis results
# # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # #         return train_sample, test_sample, paths
# # #     except Exception as e:
# # #         print(f"Error loading data and initializing results: {e}")
# # #         raise




# # # # src/utils/initialization.py

# # # import os
# # # import pandas as pd
# # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results

# # # def load_data_and_initialize_results(paths, json_files):
# # #     """
# # #     Load sample data and initialize analysis results.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.
# # #     json_files (list): List of JSON files to initialize.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # #     """
# # #     try:
# # #         # Load sample data
# # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # #         # Initialize analysis results
# # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # #         return train_sample, test_sample, paths
# # #     except Exception as e:
# # #         print(f"Error loading data and initializing results: {e}")
# # #         raise

# # # def load_sample_data_and_paths(paths):
# # #     """
# # #     Load sample data and return the data along with updated paths.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # #     """
# # #     try:
# # #         train_sample, test_sample = load_sample_data(paths)
# # #         return train_sample, test_sample, paths
# # #     except Exception as e:
# # #         print(f"Error loading sample data: {e}")
# # #         raise

# # # def load_sample_data(paths):
# # #     """
# # #     Load sample data from the specified paths.

# # #     Parameters:
# # #     paths (dict): Dictionary containing file paths.

# # #     Returns:
# # #     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
# # #     """
# # #     try:
# # #         train_sample = pd.read_csv(paths['data']['train_sample'])
# # #         test_sample = pd.read_csv(paths['data']['test_sample'])
# # #         return train_sample, test_sample
# # #     except FileNotFoundError as e:
# # #         print(f"Error reading sample data files: File not found {e.filename}")
# # #         raise
# # #     except pd.errors.ParserError as e:
# # #         print(f"Error reading sample data files: Parsing error {e}")
# # #         raise
# # #     except Exception as e:
# # #         print(f"Unexpected error reading sample data files: {e}")
# # #         raise

# # # def initialize_analysis_results(results_path, json_files):
# # #     """
# # #     Initialize analysis results by creating necessary JSON files.

# # #     Parameters:
# # #     results_path (str): Path to the directory for analysis results.
# # #     json_files (list): List of JSON files to initialize.
# # #     """
# # #     try:
# # #         for json_file in json_files:
# # #             file_path = os.path.join(results_path, json_file)
# # #             if not os.path.exists(file_path):
# # #                 with open(file_path, 'w') as f:
# # #                     f.write('{}')  # Create an empty JSON object
# # #     except Exception as e:
# # #         print(f"Error initializing analysis results: {e}")
# # #         raise






# # # # # src/utils/initialization.py

# # # # import os
# # # # import pandas as pd
# # # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results

# # # # def load_data_and_initialize_results(paths, json_files):
# # # #     """
# # # #     Load sample data and initialize analysis results.

# # # #     Parameters:
# # # #     paths (dict): Dictionary containing file paths.
# # # #     json_files (list): List of JSON files to initialize.

# # # #     Returns:
# # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # #     """
# # # #     try:
# # # #         # Load sample data
# # # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # # #         # Initialize analysis results
# # # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # # #         return train_sample, test_sample, paths
# # # #     except Exception as e:
# # # #         print(f"Error loading data and initializing results: {e}")
# # # #         raise

# # # # def load_sample_data_and_paths(paths):
# # # #     """
# # # #     Load sample data and return the data along with updated paths.

# # # #     Parameters:
# # # #     paths (dict): Dictionary containing file paths.

# # # #     Returns:
# # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # #     """
# # # #     try:
# # # #         train_sample, test_sample = load_sample_data(paths)
# # # #         return train_sample, test_sample, paths
# # # #     except Exception as e:
# # # #         print(f"Error loading sample data: {e}")
# # # #         raise

# # # # def load_sample_data(paths):
# # # #     """
# # # #     Load sample data from the specified paths.

# # # #     Parameters:
# # # #     paths (dict): Dictionary containing file paths.

# # # #     Returns:
# # # #     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
# # # #     """
# # # #     try:
# # # #         train_sample = pd.read_csv(paths['data']['train_sample'])
# # # #         test_sample = pd.read_csv(paths['data']['test_sample'])
# # # #         return train_sample, test_sample
# # # #     except FileNotFoundError as e:
# # # #         print(f"Error reading sample data files: File not found {e.filename}")
# # # #         raise
# # # #     except pd.errors.ParserError as e:
# # # #         print(f"Error reading sample data files: Parsing error {e}")
# # # #         raise
# # # #     except Exception as e:
# # # #         print(f"Unexpected error reading sample data files: {e}")
# # # #         raise

# # # # def initialize_analysis_results(results_path, json_files):
# # # #     """
# # # #     Initialize analysis results by creating necessary JSON files.

# # # #     Parameters:
# # # #     results_path (str): Path to the directory for analysis results.
# # # #     json_files (list): List of JSON files to initialize.
# # # #     """
# # # #     try:
# # # #         for json_file in json_files:
# # # #             file_path = os.path.join(results_path, json_file)
# # # #             if not os.path.exists(file_path):
# # # #                 with open(file_path, 'w') as f:
# # # #                     f.write('{}')  # Create an empty JSON object
# # # #     except Exception as e:
# # # #         print(f"Error initializing analysis results: {e}")
# # # #         raise








# # # # # def load_data_and_initialize_results(paths, json_files):
# # # # #     """
# # # # #     Load sample data and initialize analysis results.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.
# # # # #     json_files (list): List of JSON files to initialize.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         # Load sample data
# # # # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # # # #         # Initialize analysis results
# # # # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading data and initializing results: {e}")
# # # # #         raise




# # # # # # src/utils/initialization.py

# # # # # import pandas as pd
# # # # # import os
# # # # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results

# # # # # def load_data_and_initialize_results(paths, json_files):
# # # # #     """
# # # # #     Load sample data and initialize analysis results.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.
# # # # #     json_files (list): List of JSON files to initialize.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
# # # # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading data and initializing results: {e}")
# # # # #         raise

# # # # # def load_sample_data_and_paths(paths):
# # # # #     """
# # # # #     Load sample data and return the data along with updated paths.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         train_sample, test_sample = load_sample_data(paths)
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading sample data: {e}")
# # # # #         raise

# # # # # def load_sample_data(paths):
# # # # #     """
# # # # #     Load sample data from the specified paths.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
# # # # #     """
# # # # #     try:
# # # # #         train_sample = pd.read_csv(paths['data']['train_sample'])
# # # # #         test_sample = pd.read_csv(paths['data']['test_sample'])
# # # # #         return train_sample, test_sample
# # # # #     except Exception as e:
# # # # #         print(f"Error reading sample data files: {e}")
# # # # #         raise

# # # # # def initialize_analysis_results(results_path, json_files):
# # # # #     """
# # # # #     Initialize analysis results by creating necessary JSON files.

# # # # #     Parameters:
# # # # #     results_path (str): Path to the directory for analysis results.
# # # # #     json_files (list): List of JSON files to initialize.
# # # # #     """
# # # # #     try:
# # # # #         for json_file in json_files:
# # # # #             file_path = os.path.join(results_path, json_file)
# # # # #             if not os.path.exists(file_path):
# # # # #                 with open(file_path, 'w') as f:
# # # # #                     f.write('{}')  # Create an empty JSON object
# # # # #     except Exception as e:
# # # # #         print(f"Error initializing analysis results: {e}")
# # # # #         raise




# # # # # # src/utils/initialization.py

# # # # # import pandas as pd
# # # # # import os
# # # # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results

# # # # # def load_data_and_initialize_results(paths, json_files):
# # # # #     """
# # # # #     Load sample data and initialize analysis results.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.
# # # # #     json_files (list): List of JSON files to initialize.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         # Load sample data
# # # # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # # # #         # Initialize analysis results
# # # # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading data and initializing results: {e}")
# # # # #         raise

# # # # # def load_sample_data_and_paths(paths):
# # # # #     """
# # # # #     Load sample data and return the data along with updated paths.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         train_sample, test_sample = load_sample_data(paths)
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading sample data: {e}")
# # # # #         raise

# # # # # def load_sample_data(paths):
# # # # #     """
# # # # #     Load sample data from the specified paths.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
# # # # #     """
# # # # #     try:
# # # # #         train_sample = pd.read_csv(paths['data']['train_sample'])
# # # # #         test_sample = pd.read_csv(paths['data']['test_sample'])
# # # # #         return train_sample, test_sample
# # # # #     except Exception as e:
# # # # #         print(f"Error reading sample data files: {e}")
# # # # #         raise

# # # # # def initialize_analysis_results(results_path, json_files):
# # # # #     """
# # # # #     Initialize analysis results by creating necessary JSON files.

# # # # #     Parameters:
# # # # #     results_path (str): Path to the directory for analysis results.
# # # # #     json_files (list): List of JSON files to initialize.
# # # # #     """
# # # # #     try:
# # # # #         for json_file in json_files:
# # # # #             file_path = os.path.join(results_path, json_file)
# # # # #             if not os.path.exists(file_path):
# # # # #                 with open(file_path, 'w') as f:
# # # # #                     f.write('{}')  # Create an empty JSON object
# # # # #     except Exception as e:
# # # # #         print(f"Error initializing analysis results: {e}")
# # # # #         raise





# # # # # # src/utils/initialization.py

# # # # # import pandas as pd
# # # # # import os
# # # # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results

# # # # # def load_data_and_initialize_results(paths, json_files):
# # # # #     """
# # # # #     Load sample data and initialize analysis results.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.
# # # # #     json_files (list): List of JSON files to initialize.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         # Load sample data
# # # # #         train_sample, test_sample, paths = load_sample_data_and_paths(paths)
        
# # # # #         # Initialize analysis results
# # # # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
        
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading data and initializing results: {e}")
# # # # #         raise

# # # # # def load_sample_data_and_paths(paths):
# # # # #     """
# # # # #     Load sample data and return the data along with updated paths.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         train_sample, test_sample = load_sample_data(paths)
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading sample data: {e}")
# # # # #         raise

# # # # # def load_sample_data(paths):
# # # # #     """
# # # # #     Load sample data from the specified paths.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame and test_sample DataFrame.
# # # # #     """
# # # # #     try:
# # # # #         train_sample = pd.read_csv(paths['data']['train_sample'])
# # # # #         test_sample = pd.read_csv(paths['data']['test_sample'])
# # # # #         return train_sample, test_sample
# # # # #     except Exception as e:
# # # # #         print(f"Error reading sample data files: {e}")
# # # # #         raise

# # # # # def initialize_analysis_results(results_path, json_files):
# # # # #     """
# # # # #     Initialize analysis results by creating necessary JSON files.

# # # # #     Parameters:
# # # # #     results_path (str): Path to the directory for analysis results.
# # # # #     json_files (list): List of JSON files to initialize.
# # # # #     """
# # # # #     try:
# # # # #         for json_file in json_files:
# # # # #             file_path = os.path.join(results_path, json_file)
# # # # #             if not os.path.exists(file_path):
# # # # #                 with open(file_path, 'w') as f:
# # # # #                     f.write('{}')  # Create an empty JSON object
# # # # #     except Exception as e:
# # # # #         print(f"Error initializing analysis results: {e}")
# # # # #         raise






# # # # # # src/utils/initialization.py

# # # # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results

# # # # # def load_data_and_initialize_results(paths, json_files):
# # # # #     """
# # # # #     Load sample data and initialize analysis results.

# # # # #     Parameters:
# # # # #     paths (dict): Dictionary containing file paths.
# # # # #     json_files (list): List of JSON files to initialize.

# # # # #     Returns:
# # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # #     """
# # # # #     try:
# # # # #         train_sample, test_sample, paths = load_sample_data_and_paths()
# # # # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
# # # # #         return train_sample, test_sample, paths
# # # # #     except Exception as e:
# # # # #         print(f"Error loading data and initializing results: {e}")
# # # # #         raise




# # # # # # import os
# # # # # # import sys
# # # # # # from src.config_loader import load_paths
# # # # # # from src.utils.directory_utils import ensure_directories_exist

# # # # # # def initialize_project_environment(marker_file='src/config_loader.py'):
# # # # # #     """
# # # # # #     Initialize the project environment by setting the project root and ensuring necessary directories exist.

# # # # # #     Parameters:
# # # # # #     marker_file (str): The name of the marker file to search for.

# # # # # #     Returns:
# # # # # #     dict: Configuration paths loaded from the config loader.
# # # # # #     """
# # # # # #     # Locate the project root
# # # # # #     def find_project_root(marker_file):
# # # # # #         current_dir = os.getcwd()
# # # # # #         while current_dir != os.path.dirname(current_dir):
# # # # # #             if os.path.isfile(os.path.join(current_dir, marker_file)):
# # # # # #                 return current_dir
# # # # # #             current_dir = os.path.dirname(current_dir)
# # # # # #         raise FileNotFoundError(f"Marker file '{marker_file}' not found in any parent directories.")

# # # # # #     project_root = find_project_root(marker_file)
# # # # # #     if project_root not in sys.path:
# # # # # #         sys.path.append(project_root)
# # # # # #     os.chdir(project_root)  # Ensure the working directory is set to project root
# # # # # #     print(f"Project root set to: {project_root}")

# # # # # #     # Load configuration paths
# # # # # #     paths = load_paths()
    
# # # # # #     # Ensure necessary directories exist
# # # # # #     ensure_directories_exist(paths)
    
# # # # # #     return paths









# # # # # # from src.utils.data_loading_utils import load_sample_data_and_paths, initialize_analysis_results

# # # # # # def load_data_and_initialize_results(paths, json_files):
# # # # # #     """
# # # # # #     Load sample data and initialize analysis results.

# # # # # #     Parameters:
# # # # # #     paths (dict): Dictionary containing file paths.
# # # # # #     json_files (list): List of JSON files to initialize.

# # # # # #     Returns:
# # # # # #     tuple: A tuple containing train_sample DataFrame, test_sample DataFrame, and paths dictionary.
# # # # # #     """
# # # # # #     try:
# # # # # #         train_sample, test_sample, paths = load_sample_data_and_paths()
# # # # # #         initialize_analysis_results(paths['reports']['analysis_results'], json_files)
# # # # # #         return train_sample, test_sample, paths
# # # # # #     except Exception as e:
# # # # # #         print(f"Error loading data and initializing results: {e}")
# # # # # #         raise

