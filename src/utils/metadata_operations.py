# src/utils/metadata_operations.py

from src.utils.file_operations import load_yaml, save_yaml

def load_metadata(paths):
    return load_yaml(paths['config']['feature_metadata'])

def save_metadata(metadata, paths):
    save_yaml(metadata, paths['config']['feature_metadata'])

def update_feature_metadata(feature_metadata, feature, updates):
    if feature not in feature_metadata["features"]:
        feature_metadata["features"][feature] = {}
    for key, value in updates.items():
        if isinstance(value, dict):
            if key not in feature_metadata["features"][feature]:
                feature_metadata["features"][feature][key] = {}
            for sub_key, sub_value in value.items():
                feature_metadata["features"][feature][key][sub_key] = sub_value
        else:
            feature_metadata["features"][feature][key] = value
    return feature_metadata

def initialize_feature_metadata(schema_path):
    schema = load_yaml(schema_path)
    feature_metadata = {"features": {}}
    for attribute, default_value in schema["default_attributes"].items():
        feature_metadata[attribute] = default_value
    return feature_metadata

def update_metadata_with_data_types(metadata, feature_data_types, attribute_name):
    for item in feature_data_types:
        feature = item['Feature']
        data_type = item[attribute_name]
        if feature in metadata['features']:
            metadata['features'][feature][attribute_name] = data_type
    return metadata

def determine_feature_type(feature, metadata):
    classified_type = metadata['features'][feature].get('classified_data_type', '')
    if classified_type == 'binary':
        return 'binary'
    if classified_type == 'categorical':
        return 'categorical'
    example_values = metadata['features'][feature].get('example_values', [])
    if all(isinstance(val, (int, float)) for val in example_values):
        if len(example_values) > 0 and isinstance(example_values[0], int):
            return 'categorical'
    return 'numerical'# src/utils/metadata_operations.py

from src.utils.file_operations import load_yaml, save_yaml

def load_metadata(paths):
    return load_yaml(paths['config']['feature_metadata'])

def save_metadata(metadata, paths):
    save_yaml(metadata, paths['config']['feature_metadata'])

def update_feature_metadata(feature_metadata, feature, updates):
    if feature not in feature_metadata["features"]:
        feature_metadata["features"][feature] = {}
    for key, value in updates.items():
        if isinstance(value, dict):
            if key not in feature_metadata["features"][feature]:
                feature_metadata["features"][feature][key] = {}
            for sub_key, sub_value in value.items():
                feature_metadata["features"][feature][key][sub_key] = sub_value
        else:
            feature_metadata["features"][feature][key] = value
    return feature_metadata

def initialize_feature_metadata(schema_path):
    schema = load_yaml(schema_path)
    feature_metadata = {"features": {}}
    for attribute, default_value in schema["default_attributes"].items():
        feature_metadata[attribute] = default_value
    return feature_metadata

def update_metadata_with_data_types(metadata, feature_data_types, attribute_name):
    for item in feature_data_types:
        feature = item['Feature']
        data_type = item[attribute_name]
        if feature in metadata['features']:
            metadata['features'][feature][attribute_name] = data_type
    return metadata

def determine_feature_type(feature, metadata):
    classified_type = metadata['features'][feature].get('classified_data_type', '')
    if classified_type == 'binary':
        return 'binary'
    if classified_type == 'categorical':
        return 'categorical'
    example_values = metadata['features'][feature].get('example_values', [])
    if all(isinstance(val, (int, float)) for val in example_values):
        if len(example_values) > 0 and isinstance(example_values[0], int):
            return 'categorical'
    return 'numerical'
