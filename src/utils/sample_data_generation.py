# src/utils/sample_data_generation.py

import os
import logging
import pandas as pd
from src.config_loader import load_paths
from src.data.data_preparation import generate_sample_data
from src.utils.data_loading_utils import read_csv_with_progress
from src.utils.file_operations import save_dataframe_with_progress
from src.validation.validate_sample_data import validate_samples, validate_stratification_with_progress, validate_size_and_shape
from src.utils.display_utils import display_dataframe_as_html



def generate_and_save_samples(train_data_path, test_data_path, intermediate_data_path, stratify_by, nrows=10000):
    """
    Generate and save sample datasets.

    Parameters:
    train_data_path (str): Path to the raw training data.
    test_data_path (str): Path to the raw testing data.
    intermediate_data_path (str): Path to save the intermediate data.
    stratify_by (str): Column to stratify by.
    nrows (int): Number of rows for the sample dataset.
    """
    try:
        train_sample = generate_sample_data(train_data_path, nrows=nrows, stratify_by=stratify_by)
        test_sample = generate_sample_data(test_data_path, nrows=nrows)
        
        save_dataframe_with_progress(train_sample, os.path.join(intermediate_data_path, "train_sample.csv"))
        save_dataframe_with_progress(test_sample, os.path.join(intermediate_data_path, "test_sample.csv"))
        
        logging.info(f"Sample train data saved to: {os.path.join(intermediate_data_path, 'train_sample.csv')}")
        logging.info(f"Sample test data saved to: {os.path.join(intermediate_data_path, 'test_sample.csv')}")
    except Exception as e:
        logging.error(f"Error generating and saving samples: {e}")
        raise


def main():
    """
    Main function to generate and validate sample data.
    """
    try:
        # Load configuration paths
        paths = load_configuration_paths()
        
        # Define parameters
        train_data_path = paths['data']['raw_train']
        test_data_path = paths['data']['raw_test']
        intermediate_data_path = paths['data']['intermediate']
        stratify_by = 'HasDetections'
        train_sample_path = os.path.join(intermediate_data_path, "train_sample.csv")
        test_sample_path = os.path.join(intermediate_data_path, "test_sample.csv")

        # Generate and save sample datasets
        generate_and_save_samples(train_data_path, test_data_path, intermediate_data_path, stratify_by)

        # Validate the generated samples
        validate_samples(train_data_path, test_data_path, train_sample_path, test_sample_path, stratify_by)
    except Exception as e:
        print(f"Error in main function: {e}")

if __name__ == "__main__":
    main()

