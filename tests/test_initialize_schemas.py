# tests/test_initialize_schemas.py

import unittest
import os
import sys
import json
import logging
import pandas as pd


def find_project_root(marker_file='src/config_loader.py'):
    """
    Locate the project root using the specified marker file.

    Parameters:
    marker_file (str): The marker file to identify the project root.
    Returns:
    str: The path to the project root directory.
    """
    current_dir = os.getcwd()
    while current_dir != os.path.dirname(current_dir):
        if os.path.isfile(os.path.join(current_dir, marker_file)):
            return current_dir
        current_dir = os.path.dirname(current_dir)
    raise FileNotFoundError(f"Marker file '{marker_file}' not found in any parent directories.")

def set_project_root():
    """Set the project root directory."""
    project_root = find_project_root()
    os.chdir(project_root)
    if project_root not in sys.path:
        sys.path.append(project_root)
    logging.info(f"Project root set to: {project_root}")
    return project_root

# Find and set the project root directory
project_root = set_project_root()

# Import setup function from custom module
from src.utils.environment_setup import setup_project_environment

# Set up the project environment
paths, directories = setup_project_environment()

# Import necessary custom modules
from src.initialization.initialize_schemas import (
    convert_yaml_to_json,
    validate_schemas,
)

class TestInitializeSchemas(unittest.TestCase):
    def setUp(self):
        self.yaml_schema_path = 'config/schemas/feature_metadata_complete_schema.yaml'
        self.json_schema_path = 'config/schemas/feature_metadata_complete_schema.json'
        self.example_instance_path = 'config/schemas/example_missing_values_instance.json'
        self.train_sample = pd.read_csv('data/intermediate/train_sample.csv')

    def test_convert_yaml_to_json(self):
        convert_yaml_to_json(self.yaml_schema_path, self.json_schema_path)
        self.assertTrue(os.path.exists(self.json_schema_path))

    def test_validate_schemas(self):
        convert_yaml_to_json(self.yaml_schema_path, self.json_schema_path)
        validate_schemas(self.json_schema_path, self.yaml_schema_path)

    def load_full_schema(self):
        with open(self.json_schema_path, 'r') as file:
            return json.load(file)

if __name__ == '__main__':
    unittest.main()
