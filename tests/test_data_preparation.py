# tests/test_data_preparation.py

import os
import sys
import unittest
import logging
import pandas as pd

def find_project_root(marker_file='src/config_loader.py'):
    """
    Locate the project root using the specified marker file.

    Parameters:
    marker_file (str): The marker file to identify the project root.
    Returns:
    str: The path to the project root directory.
    """
    current_dir = os.getcwd()
    while current_dir != os.path.dirname(current_dir):
        if os.path.isfile(os.path.join(current_dir, marker_file)):
            return current_dir
        current_dir = os.path.dirname(current_dir)
    raise FileNotFoundError(f"Marker file '{marker_file}' not found in any parent directories.")

def set_project_root():
    """Set the project root directory."""
    project_root = find_project_root()
    os.chdir(project_root)
    if project_root not in sys.path:
        sys.path.append(project_root)
    logging.info(f"Project root set to: {project_root}")
    return project_root

# Find and set the project root directory
project_root = set_project_root()

# Import setup function from custom module
from src.utils.environment_setup import setup_project_environment

# Set up the project environment
paths, directories = setup_project_environment()

# Import necessary custom modules
from src.data.data_preparation import generate_sample_data

class TestDataPreparation(unittest.TestCase):
    def setUp(self):
        self.file_path = 'data/raw/train.csv'
        self.nrows = 10000
        self.stratify_by = 'HasDetections'
        self.sample_data = generate_sample_data(self.file_path, self.nrows, self.stratify_by)

    def test_generate_sample_data(self):
        self.assertIsInstance(self.sample_data, pd.DataFrame)
        self.assertEqual(len(self.sample_data), self.nrows)

if __name__ == '__main__':
    unittest.main()





# # tests/test_data_preparation.py

# import unittest
# from src.data.data_preparation import generate_sample_data
# import pandas as pd

# class TestDataPreparation(unittest.TestCase):
#     def setUp(self):
#         self.file_path = 'data/raw/train.csv'
#         self.nrows = 10000
#         self.stratify_by = 'HasDetections'
#         self.sample_data = generate_sample_data(self.file_path, self.nrows, self.stratify_by)

#     def test_generate_sample_data(self):
#         self.assertIsInstance(self.sample_data, pd.DataFrame)
#         self.assertEqual(len(self.sample_data), self.nrows)

# if __name__ == '__main__':
#     unittest.main()
